
> financial-dashboard-lambda@1.0.0 test
> jest --coverage --coverageReporters=text --coverageReporters=html --coverageReporters=lcov --passWithNoTests --verbose

  console.log
    💰 Dividend history requested for AAPL

      at log (routes/dividend.js:585:13)

  console.log
    💰 Dividend history requested for AAPL

      at log (routes/dividend.js:585:13)

  console.log
    💰 Dividend history requested for BRK.B

      at log (routes/dividend.js:585:13)

  console.log
    💰 Dividend history requested for AAPL

      at log (routes/dividend.js:585:13)

  console.error
    Dividend history error: Error: Console error
        at console.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/dividend.test.js:75:15)
        at /home/stocks/algo/webapp/lambda/node_modules/jest-mock/build/index.js:397:39
        at console.<anonymous> (/home/stocks/algo/webapp/lambda/node_modules/jest-mock/build/index.js:404:13)
        at console.mockConstructor [as log] (/home/stocks/algo/webapp/lambda/node_modules/jest-mock/build/index.js:148:19)
        at log (/home/stocks/algo/webapp/lambda/routes/dividend.js:585:13)
        at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
        at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/route.js:149:13)
        at Route.dispatch (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/route.js:119:3)
        at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
        at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:284:15
        at param (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:365:14)
        at param (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:376:14)
        at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:421:3)
        at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
        at Function.handle (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:175:3)
        at router (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:47:12)
        at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
        at trim_prefix (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:328:13)
        at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:286:9
        at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:346:12)
        at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
        at jsonParser (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:113:7)
        at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
        at trim_prefix (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:328:13)
        at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:286:9
        at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:346:12)
        at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
        at expressInit (/home/stocks/algo/webapp/lambda/node_modules/express/lib/middleware/init.js:40:5)
        at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
        at trim_prefix (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:328:13)
        at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:286:9
        at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:346:12)
        at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
        at query (/home/stocks/algo/webapp/lambda/node_modules/express/lib/middleware/query.js:45:5)
        at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
        at trim_prefix (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:328:13)
        at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:286:9
        at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:346:12)
        at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
        at Function.handle (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:175:3)
        at Function.handle (/home/stocks/algo/webapp/lambda/node_modules/express/lib/application.js:181:10)
        at Server.app (/home/stocks/algo/webapp/lambda/node_modules/express/lib/express.js:39:9)
        at Server.emit (node:events:524:28)
        at parserOnIncoming (node:_http_server:1141:12)
        at HTTPParser.parserOnHeadersComplete (node:_http_common:118:17)

      624 |     });
      625 |   } catch (error) {
    > 626 |     console.error("Dividend history error:", error);
          |             ^
      627 |     res.status(500).json({
      628 |       success: false,
      629 |       error: "Failed to fetch dividend history",

      at error (routes/dividend.js:626:13)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at next (node_modules/express/lib/router/route.js:149:13)
      at Route.dispatch (node_modules/express/lib/router/route.js:119:3)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at node_modules/express/lib/router/index.js:284:15
      at param (node_modules/express/lib/router/index.js:365:14)
      at param (node_modules/express/lib/router/index.js:376:14)
      at Function.process_params (node_modules/express/lib/router/index.js:421:3)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Function.handle (node_modules/express/lib/router/index.js:175:3)
      at router (node_modules/express/lib/router/index.js:47:12)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at jsonParser (node_modules/body-parser/lib/types/json.js:113:7)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at expressInit (node_modules/express/lib/middleware/init.js:40:5)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at query (node_modules/express/lib/middleware/query.js:45:5)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Function.handle (node_modules/express/lib/router/index.js:175:3)
      at Function.handle (node_modules/express/lib/application.js:181:10)
      at Server.app (node_modules/express/lib/express.js:39:9)

  console.error
    Dividend history error: Error: Test error
        at console.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/dividend.test.js:455:15)
        at /home/stocks/algo/webapp/lambda/node_modules/jest-mock/build/index.js:397:39
        at console.<anonymous> (/home/stocks/algo/webapp/lambda/node_modules/jest-mock/build/index.js:404:13)
        at console.mockConstructor [as log] (/home/stocks/algo/webapp/lambda/node_modules/jest-mock/build/index.js:148:19)
        at log (/home/stocks/algo/webapp/lambda/routes/dividend.js:585:13)
        at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
        at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/route.js:149:13)
        at Route.dispatch (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/route.js:119:3)
        at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
        at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:284:15
        at param (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:365:14)
        at param (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:376:14)
        at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:421:3)
        at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
        at Function.handle (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:175:3)
        at router (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:47:12)
        at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
        at trim_prefix (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:328:13)
        at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:286:9
        at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:346:12)
        at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
        at jsonParser (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:113:7)
        at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
        at trim_prefix (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:328:13)
        at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:286:9
        at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:346:12)
        at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
        at expressInit (/home/stocks/algo/webapp/lambda/node_modules/express/lib/middleware/init.js:40:5)
        at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
        at trim_prefix (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:328:13)
        at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:286:9
        at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:346:12)
        at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
        at query (/home/stocks/algo/webapp/lambda/node_modules/express/lib/middleware/query.js:45:5)
        at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
        at trim_prefix (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:328:13)
        at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:286:9
        at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:346:12)
        at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
        at Function.handle (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:175:3)
        at Function.handle (/home/stocks/algo/webapp/lambda/node_modules/express/lib/application.js:181:10)
        at Server.app (/home/stocks/algo/webapp/lambda/node_modules/express/lib/express.js:39:9)
        at Server.emit (node:events:524:28)
        at parserOnIncoming (node:_http_server:1141:12)
        at HTTPParser.parserOnHeadersComplete (node:_http_common:118:17)

      624 |     });
      625 |   } catch (error) {
    > 626 |     console.error("Dividend history error:", error);
          |             ^
      627 |     res.status(500).json({
      628 |       success: false,
      629 |       error: "Failed to fetch dividend history",

      at error (routes/dividend.js:626:13)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at next (node_modules/express/lib/router/route.js:149:13)
      at Route.dispatch (node_modules/express/lib/router/route.js:119:3)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at node_modules/express/lib/router/index.js:284:15
      at param (node_modules/express/lib/router/index.js:365:14)
      at param (node_modules/express/lib/router/index.js:376:14)
      at Function.process_params (node_modules/express/lib/router/index.js:421:3)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Function.handle (node_modules/express/lib/router/index.js:175:3)
      at router (node_modules/express/lib/router/index.js:47:12)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at jsonParser (node_modules/body-parser/lib/types/json.js:113:7)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at expressInit (node_modules/express/lib/middleware/init.js:40:5)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at query (node_modules/express/lib/middleware/query.js:45:5)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Function.handle (node_modules/express/lib/router/index.js:175:3)
      at Function.handle (node_modules/express/lib/application.js:181:10)
      at Server.app (node_modules/express/lib/express.js:39:9)

FAIL tests/unit/routes/dividend.test.js
  Dividend Route - Comprehensive Unit Tests
    GET /api/dividend/history/:symbol
      ✓ should return dividend history for valid symbol (57 ms)
      ✓ should handle case insensitive symbols (9 ms)
      ✓ should handle special characters in symbol (6 ms)
      ✓ should handle query parameters gracefully (8 ms)
      ✕ should handle errors in dividend history gracefully (16 ms)
    GET /api/dividend/calendar
      ✓ should get dividend calendar with valid database data (7 ms)
      ✕ should handle empty database results and generate sample data (5 ms)
      ✕ should handle database connection failures gracefully (4 ms)
      ✕ should handle query parameters correctly (8 ms)
      ✕ should handle sorting options correctly (5 ms)
      ✕ should handle invalid sorting options with fallback (4 ms)
      ✕ should calculate dividend statistics correctly (6 ms)
      ✕ should handle null database results gracefully (4 ms)
      ✕ should handle malformed database results (4 ms)
      ✕ should handle string dividend amounts and yields correctly (5 ms)
      ✕ should handle error in dividend calendar (4 ms)
    Edge Cases and Error Handling
      ✕ should handle very long symbol names (4 ms)
      ✕ should handle symbols with special characters (6 ms)
      ✕ should handle extreme query parameters gracefully (4 ms)
      ✕ should handle non-numeric parameters correctly (4 ms)
      ✕ should handle empty query parameters (5 ms)
      ✕ should handle database timeout errors (4 ms)
      ✕ should handle SQL injection attempts safely (4 ms)
    Performance Testing
      ✕ should handle concurrent requests efficiently (31 ms)
      ✕ should handle large dividend datasets efficiently (6 ms)
    Response Format Validation
      ✕ should return consistent JSON response format (4 ms)
      ✕ should include timestamp in ISO format (5 ms)
      ✕ should maintain consistent error response format (7 ms)
      ✕ should include proper metadata in calendar responses (4 ms)

  ● Dividend Route - Comprehensive Unit Tests › GET /api/dividend/history/:symbol › should handle errors in dividend history gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: "Console error"
    Received: undefined

      82 |       expect(response.body.success).toBe(false);
      83 |       expect(response.body.error).toBe("Failed to fetch dividend history");
    > 84 |       expect(response.body.message).toBe("Console error");
         |                                     ^
      85 |
      86 |       // Restore console.log
      87 |       console.log = originalConsoleLog;

      at Object.toBe (tests/unit/routes/dividend.test.js:84:37)

  ● Dividend Route - Comprehensive Unit Tests › GET /api/dividend/calendar › should handle empty database results and generate sample data

    expect(received).toBeDefined()

    Received: undefined

      121 |
      122 |       expect(response.body.success).toBe(true);
    > 123 |       expect(response.body.data.dividend_calendar).toBeDefined();
          |                                                    ^
      124 |       expect(Array.isArray(response.body.data.dividend_calendar)).toBe(true);
      125 |       expect(response.body.data.summary).toBeDefined();
      126 |       expect(response.body.metadata.data_source).toBe("database_required");

      at Object.toBeDefined (tests/unit/routes/dividend.test.js:123:52)

  ● Dividend Route - Comprehensive Unit Tests › GET /api/dividend/calendar › should handle database connection failures gracefully

    expected 500 "Internal Server Error", got 200 "OK"

      132 |       const response = await request(app)
      133 |         .get("/api/dividend/calendar")
    > 134 |         .expect(500);
          |          ^
      135 |
      136 |       expect(response.body.success).toBe(false);
      137 |       expect(response.body.error).toBe("Failed to fetch dividend calendar");

      at Object.expect (tests/unit/routes/dividend.test.js:134:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Dividend Route - Comprehensive Unit Tests › GET /api/dividend/calendar › should handle query parameters correctly

    expect(received).toMatchObject(expected)

    - Expected  - 3
    + Received  + 1

      Object {
    -   "days": 7,
    -   "event_type": "all",
    -   "symbol": "AAPL",
    +   "days": 30,
      }

      148 |         .expect(200);
      149 |
    > 150 |       expect(response.body.data.filters).toMatchObject({
          |                                          ^
      151 |         days: 7,
      152 |         event_type: "all",
      153 |         symbol: "AAPL",

      at Object.toMatchObject (tests/unit/routes/dividend.test.js:150:42)

  ● Dividend Route - Comprehensive Unit Tests › GET /api/dividend/calendar › should handle sorting options correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: "amount"
    Received: undefined

      165 |
      166 |       expect(response.body.success).toBe(true);
    > 167 |       expect(response.body.data.filters.sort_by).toBe("amount");
          |                                                  ^
      168 |       expect(response.body.data.dividend_calendar).toBeDefined();
      169 |     });
      170 |

      at Object.toBe (tests/unit/routes/dividend.test.js:167:50)

  ● Dividend Route - Comprehensive Unit Tests › GET /api/dividend/calendar › should handle invalid sorting options with fallback

    expect(received).toBe(expected) // Object.is equality

    Expected: "invalid"
    Received: undefined

      177 |
      178 |       expect(response.body.success).toBe(true);
    > 179 |       expect(response.body.data.filters.sort_by).toBe("invalid");
          |                                                  ^
      180 |       expect(response.body.data.dividend_calendar).toBeDefined();
      181 |     });
      182 |

      at Object.toBe (tests/unit/routes/dividend.test.js:179:50)

  ● Dividend Route - Comprehensive Unit Tests › GET /api/dividend/calendar › should calculate dividend statistics correctly

    TypeError: Cannot read properties of undefined (reading 'dividend_stats')

      215 |         .expect(200);
      216 |
    > 217 |       expect(response.body.data.summary.dividend_stats).toMatchObject({
          |                                         ^
      218 |         avg_yield: 3.0,
      219 |         avg_amount: 1.0,
      220 |         highest_yield: 4.0,

      at Object.dividend_stats (tests/unit/routes/dividend.test.js:217:41)

  ● Dividend Route - Comprehensive Unit Tests › GET /api/dividend/calendar › should handle null database results gracefully

    expected 501 "Not Implemented", got 200 "OK"

      229 |       const response = await request(app)
      230 |         .get("/api/dividend/calendar")
    > 231 |         .expect(501);
          |          ^
      232 |
      233 |       expect(response.body.success).toBe(false);
      234 |       expect(response.body.error).toBe("Dividend calendar not implemented");

      at Object.expect (tests/unit/routes/dividend.test.js:231:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Dividend Route - Comprehensive Unit Tests › GET /api/dividend/calendar › should handle malformed database results

    expected 501 "Not Implemented", got 200 "OK"

      240 |       const response = await request(app)
      241 |         .get("/api/dividend/calendar")
    > 242 |         .expect(501);
          |          ^
      243 |
      244 |       expect(response.body.success).toBe(false);
      245 |       expect(response.body.error).toBe("Dividend calendar not implemented");

      at Object.expect (tests/unit/routes/dividend.test.js:242:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Dividend Route - Comprehensive Unit Tests › GET /api/dividend/calendar › should handle string dividend amounts and yields correctly

    TypeError: Cannot read properties of undefined (reading '0')

      268 |         .expect(200);
      269 |
    > 270 |       expect(response.body.data.dividend_calendar[0].dividend_amount).toBe(
          |                                                  ^
      271 |         0.24
      272 |       );
      273 |       expect(response.body.data.dividend_calendar[0].dividend_yield).toBe(0.52);

      at Object.<anonymous> (tests/unit/routes/dividend.test.js:270:50)

  ● Dividend Route - Comprehensive Unit Tests › GET /api/dividend/calendar › should handle error in dividend calendar

    expected 400 "Bad Request", got 200 "OK"

      278 |       const response = await request(app)
      279 |         .get("/api/dividend/calendar?days_ahead=invalid_number")
    > 280 |         .expect(400);
          |          ^
      281 |
      282 |       expect(response.body.success).toBe(false);
      283 |       expect(response.body.error).toBe("Invalid days_ahead parameter");

      at Object.expect (tests/unit/routes/dividend.test.js:280:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Dividend Route - Comprehensive Unit Tests › Edge Cases and Error Handling › should handle very long symbol names

    expected 501 "Not Implemented", got 200 "OK"

      292 |       const response = await request(app)
      293 |         .get("/api/dividend/history/VERYLONGSYMBOLNAME123456")
    > 294 |         .expect(501);
          |          ^
      295 |
      296 |       expect(response.body.symbol).toBe("VERYLONGSYMBOLNAME123456");
      297 |       expect(response.body.success).toBe(false);

      at Object.expect (tests/unit/routes/dividend.test.js:294:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Dividend Route - Comprehensive Unit Tests › Edge Cases and Error Handling › should handle symbols with special characters

    expected 501 "Not Implemented", got 200 "OK"

      301 |       const response = await request(app)
      302 |         .get("/api/dividend/history/TEST@123")
    > 303 |         .expect(501);
          |          ^
      304 |
      305 |       expect(response.body.symbol).toBe("TEST@123");
      306 |       expect(response.body.error).toBe("Dividend history not implemented");

      at Object.expect (tests/unit/routes/dividend.test.js:303:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Dividend Route - Comprehensive Unit Tests › Edge Cases and Error Handling › should handle extreme query parameters gracefully

    expected 501 "Not Implemented", got 200 "OK"

      314 |           "/api/dividend/calendar?days=99999&limit=99999&min_yield=-100&max_yield=100"
      315 |         )
    > 316 |         .expect(501);
          |          ^
      317 |
      318 |       expect(response.body.filters.days).toBe(99999);
      319 |       expect(mockQuery).toHaveBeenCalledWith(

      at Object.expect (tests/unit/routes/dividend.test.js:316:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Dividend Route - Comprehensive Unit Tests › Edge Cases and Error Handling › should handle non-numeric parameters correctly

    expected 501 "Not Implemented", got 200 "OK"

      328 |       const response = await request(app)
      329 |         .get("/api/dividend/calendar?days=invalid&limit=abc&min_yield=xyz")
    > 330 |         .expect(501);
          |          ^
      331 |
      332 |       // The route returns 501 and the filters object should contain parsed days (NaN for 'invalid')
      333 |       expect(response.body.filters.days).toBeNaN();

      at Object.expect (tests/unit/routes/dividend.test.js:330:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Dividend Route - Comprehensive Unit Tests › Edge Cases and Error Handling › should handle empty query parameters

    expected 501 "Not Implemented", got 200 "OK"

      343 |       await request(app)
      344 |         .get("/api/dividend/calendar?symbol=&days=&limit=")
    > 345 |         .expect(501);
          |          ^
      346 |
      347 |       // Empty symbol should be processed but the query should not include symbol filter
      348 |       expect(mockQuery).toHaveBeenCalledWith(

      at Object.expect (tests/unit/routes/dividend.test.js:345:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Dividend Route - Comprehensive Unit Tests › Edge Cases and Error Handling › should handle database timeout errors

    expected 501 "Not Implemented", got 200 "OK"

      357 |       const response = await request(app)
      358 |         .get("/api/dividend/calendar")
    > 359 |         .expect(501);
          |          ^
      360 |
      361 |       expect(response.body.success).toBe(false);
      362 |       expect(response.body.error).toBe("Dividend calendar not implemented");

      at Object.expect (tests/unit/routes/dividend.test.js:359:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Dividend Route - Comprehensive Unit Tests › Edge Cases and Error Handling › should handle SQL injection attempts safely

    expected 501 "Not Implemented", got 200 "OK"

      370 |           "/api/dividend/calendar?symbol=AAPL'; DROP TABLE dividend_calendar; --"
      371 |         )
    > 372 |         .expect(501);
          |          ^
      373 |
      374 |       // Should be safely parameterized
      375 |       expect(mockQuery).toHaveBeenCalledWith(

      at Object.expect (tests/unit/routes/dividend.test.js:372:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Dividend Route - Comprehensive Unit Tests › Performance Testing › should handle concurrent requests efficiently

    expect(received).toBe(expected) // Object.is equality

    Expected: 501
    Received: 200

      390 |
      391 |       responses.forEach((response, index) => {
    > 392 |         expect(response.status).toBe(501);
          |                                 ^
      393 |         expect(response.body.symbol).toBe(`STOCK${index}`);
      394 |         expect(response.body.error).toBe("Dividend history not implemented");
      395 |       });

      at toBe (tests/unit/routes/dividend.test.js:392:33)
          at Array.forEach (<anonymous>)
      at Object.forEach (tests/unit/routes/dividend.test.js:391:17)

  ● Dividend Route - Comprehensive Unit Tests › Performance Testing › should handle large dividend datasets efficiently

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has value: undefined

      418 |       const endTime = Date.now();
      419 |
    > 420 |       expect(response.body.data.dividend_calendar).toHaveLength(1000);
          |                                                    ^
      421 |       expect(response.body.data.summary.total_events).toBe(1000);
      422 |       expect(endTime - startTime).toBeLessThan(5000); // Should complete within 5 seconds
      423 |     });

      at Object.toHaveLength (tests/unit/routes/dividend.test.js:420:52)

  ● Dividend Route - Comprehensive Unit Tests › Response Format Validation › should return consistent JSON response format

    expected 501 "Not Implemented", got 200 "OK"

      429 |       const response = await request(app)
      430 |         .get("/api/dividend/history/AAPL")
    > 431 |         .expect(501);
          |          ^
      432 |
      433 |       expect(response.headers["content-type"]).toMatch(/json/);
      434 |       expect(typeof response.body).toBe("object");

      at Object.expect (tests/unit/routes/dividend.test.js:431:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Dividend Route - Comprehensive Unit Tests › Response Format Validation › should include timestamp in ISO format

    expected 501 "Not Implemented", got 200 "OK"

      440 |       const response = await request(app)
      441 |         .get("/api/dividend/history/AAPL")
    > 442 |         .expect(501);
          |          ^
      443 |
      444 |       expect(response.body.timestamp).toBeDefined();
      445 |       expect(new Date(response.body.timestamp)).toBeInstanceOf(Date);

      at Object.expect (tests/unit/routes/dividend.test.js:442:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Dividend Route - Comprehensive Unit Tests › Response Format Validation › should maintain consistent error response format

    expect(received).toBeDefined()

    Received: undefined

      463 |       expect(response.body.error).toBeDefined();
      464 |       expect(typeof response.body.error).toBe("string");
    > 465 |       expect(response.body.message).toBeDefined();
          |                                     ^
      466 |
      467 |       // Restore console.log
      468 |       console.log = originalConsoleLog;

      at Object.toBeDefined (tests/unit/routes/dividend.test.js:465:37)

  ● Dividend Route - Comprehensive Unit Tests › Response Format Validation › should include proper metadata in calendar responses

    expect(received).toBeDefined()

    Received: undefined

      493 |       expect(response.body.data).toBeDefined();
      494 |       expect(response.body.data.filters).toBeDefined();
    > 495 |       expect(response.body.data.available_filters).toBeDefined();
          |                                                    ^
      496 |       expect(response.body.metadata).toHaveProperty("total_returned", 1);
      497 |       expect(response.body.metadata).toHaveProperty("data_source", "database");
      498 |       expect(response.body.metadata).toHaveProperty("generated_at");

      at Object.toBeDefined (tests/unit/routes/dividend.test.js:495:52)

(node:436810) PromiseRejectionHandledWarning: Promise rejection was handled asynchronously (rejection id: 3)
(Use `node --trace-warnings ...` to show where the warning was created)
(node:436810) PromiseRejectionHandledWarning: Promise rejection was handled asynchronously (rejection id: 4)
(node:436810) PromiseRejectionHandledWarning: Promise rejection was handled asynchronously (rejection id: 5)
(node:436810) PromiseRejectionHandledWarning: Promise rejection was handled asynchronously (rejection id: 6)
(node:436810) PromiseRejectionHandledWarning: Promise rejection was handled asynchronously (rejection id: 7)
(node:436810) PromiseRejectionHandledWarning: Promise rejection was handled asynchronously (rejection id: 8)
FAIL tests/unit/services/aiStrategyGeneratorStreaming.test.js
  AIStrategyGeneratorStreaming Service
    Constructor and Initialization
      ✓ should extend AIStrategyGenerator (4 ms)
      ✓ should initialize with empty active streams
    generateStreamId
      ✓ should generate unique stream IDs (1 ms)
    generateWithStreaming
      ✕ should generate strategy with streaming progress (1 ms)
      ✕ should handle concurrent stream limit (65 ms)
      ✕ should handle streaming without progress callback (1 ms)
      ✕ should handle empty symbols in streaming (1 ms)
      ✕ should clean up stream after completion (1 ms)
      ✕ should handle streaming errors gracefully
      ✕ should handle stream timeout
    processStreamingChunk
      ✓ should process chunks and call progress callback (1 ms)
      ✓ should handle null progress callback (1 ms)
      ✓ should handle empty chunks (3 ms)
      ✓ should handle very large chunks
    simulateStreamingResponse
      ✓ should simulate streaming for template fallback (455 ms)
      ✓ should handle strategy without all fields (454 ms)
      ✓ should simulate with appropriate delays (453 ms)
    stopStream
      ✕ should stop active stream
      ✓ should handle stopping non-existent stream (1 ms)
      ✓ should handle null stream ID (1 ms)
    stopAllStreams
      ✕ should stop all active streams
      ✕ should handle when no streams are active (1 ms)
    getActiveStreams
      ✓ should return active stream information (1 ms)
      ✓ should return empty array when no streams are active
      ✓ should calculate stream durations correctly (1 ms)
    getStreamingMetrics
      ✓ should return streaming metrics
      ✓ should handle zero active streams (1 ms)
    calculateAverageStreamDuration
      ✓ should calculate average duration correctly (2 ms)
      ✓ should return 0 when no streams are active (1 ms)
      ✓ should handle single stream
    Stream Configuration
      ✓ should allow updating streaming configuration (1 ms)
      ✓ should respect chunk size configuration
    Error Handling and Edge Cases
      ✓ should handle concurrent stream generation attempts
      ✕ should handle progress callback errors (1 ms)
      ✕ should handle very rapid stream start/stop cycles (1 ms)
      ✓ should handle invalid stream data
      ✓ should handle memory pressure with many streams (1 ms)
      ✕ should clean up properly on errors (1 ms)
    Integration with Base Class
      ✕ should inherit all base class functionality
      ✕ should use base class template generation (1 ms)
      ✕ should maintain correlation ID from base class (1 ms)

  ● AIStrategyGeneratorStreaming Service › generateWithStreaming › should generate strategy with streaming progress

    TypeError: Cannot read properties of undefined (reading 'error')

      93 |     } catch (error) {
      94 |       this.activeStreams.delete(streamId);
    > 95 |       this.logger.error("Streaming strategy generation failed", {
         |                   ^
      96 |         streamId,
      97 |         error: error.message,
      98 |         correlationId: this.correlationId,

      at AIStrategyGeneratorStreaming.error [as generateWithStreaming] (services/aiStrategyGeneratorStreaming.js:95:19)
      at Object.generateWithStreaming (tests/unit/services/aiStrategyGeneratorStreaming.test.js:71:47)

  ● AIStrategyGeneratorStreaming Service › generateWithStreaming › should handle concurrent stream limit

    TypeError: Cannot read properties of undefined (reading 'error')

      93 |     } catch (error) {
      94 |       this.activeStreams.delete(streamId);
    > 95 |       this.logger.error("Streaming strategy generation failed", {
         |                   ^
      96 |         streamId,
      97 |         error: error.message,
      98 |         correlationId: this.correlationId,

      at AIStrategyGeneratorStreaming.error [as generateWithStreaming] (services/aiStrategyGeneratorStreaming.js:95:19)
      at Object.generateWithStreaming (tests/unit/services/aiStrategyGeneratorStreaming.test.js:105:44)

  ● AIStrategyGeneratorStreaming Service › generateWithStreaming › should handle concurrent stream limit

    TypeError: Cannot read properties of undefined (reading 'error')

      93 |     } catch (error) {
      94 |       this.activeStreams.delete(streamId);
    > 95 |       this.logger.error("Streaming strategy generation failed", {
         |                   ^
      96 |         streamId,
      97 |         error: error.message,
      98 |         correlationId: this.correlationId,

      at AIStrategyGeneratorStreaming.error [as generateWithStreaming] (services/aiStrategyGeneratorStreaming.js:95:19)
      at Object.generateWithStreaming (tests/unit/services/aiStrategyGeneratorStreaming.test.js:105:44)

  ● AIStrategyGeneratorStreaming Service › generateWithStreaming › should handle concurrent stream limit

    TypeError: Cannot read properties of undefined (reading 'error')

      93 |     } catch (error) {
      94 |       this.activeStreams.delete(streamId);
    > 95 |       this.logger.error("Streaming strategy generation failed", {
         |                   ^
      96 |         streamId,
      97 |         error: error.message,
      98 |         correlationId: this.correlationId,

      at AIStrategyGeneratorStreaming.error [as generateWithStreaming] (services/aiStrategyGeneratorStreaming.js:95:19)
      at Object.generateWithStreaming (tests/unit/services/aiStrategyGeneratorStreaming.test.js:105:44)

  ● AIStrategyGeneratorStreaming Service › generateWithStreaming › should handle concurrent stream limit

    TypeError: Cannot read properties of undefined (reading 'error')

      93 |     } catch (error) {
      94 |       this.activeStreams.delete(streamId);
    > 95 |       this.logger.error("Streaming strategy generation failed", {
         |                   ^
      96 |         streamId,
      97 |         error: error.message,
      98 |         correlationId: this.correlationId,

      at AIStrategyGeneratorStreaming.error [as generateWithStreaming] (services/aiStrategyGeneratorStreaming.js:95:19)
      at Object.generateWithStreaming (tests/unit/services/aiStrategyGeneratorStreaming.test.js:105:44)

  ● AIStrategyGeneratorStreaming Service › generateWithStreaming › should handle concurrent stream limit

    TypeError: Cannot read properties of undefined (reading 'error')

      93 |     } catch (error) {
      94 |       this.activeStreams.delete(streamId);
    > 95 |       this.logger.error("Streaming strategy generation failed", {
         |                   ^
      96 |         streamId,
      97 |         error: error.message,
      98 |         correlationId: this.correlationId,

      at AIStrategyGeneratorStreaming.error [as generateWithStreaming] (services/aiStrategyGeneratorStreaming.js:95:19)
      at Object.generateWithStreaming (tests/unit/services/aiStrategyGeneratorStreaming.test.js:105:44)

  ● AIStrategyGeneratorStreaming Service › generateWithStreaming › should handle concurrent stream limit

    TypeError: Cannot read properties of undefined (reading 'error')

      93 |     } catch (error) {
      94 |       this.activeStreams.delete(streamId);
    > 95 |       this.logger.error("Streaming strategy generation failed", {
         |                   ^
      96 |         streamId,
      97 |         error: error.message,
      98 |         correlationId: this.correlationId,

      at AIStrategyGeneratorStreaming.error [as generateWithStreaming] (services/aiStrategyGeneratorStreaming.js:95:19)
      at Object.generateWithStreaming (tests/unit/services/aiStrategyGeneratorStreaming.test.js:105:44)

  ● AIStrategyGeneratorStreaming Service › generateWithStreaming › should handle concurrent stream limit

    expect(received).toBeDefined()

    Received: undefined

      122 |           r.value.error.includes("Maximum concurrent streams reached")
      123 |       );
    > 124 |       expect(failed).toBeDefined();
          |                      ^
      125 |     });
      126 |
      127 |     test("should handle streaming without progress callback", async () => {

      at Object.toBeDefined (tests/unit/services/aiStrategyGeneratorStreaming.test.js:124:22)

  ● AIStrategyGeneratorStreaming Service › generateWithStreaming › should handle streaming without progress callback

    TypeError: Cannot read properties of undefined (reading 'error')

      93 |     } catch (error) {
      94 |       this.activeStreams.delete(streamId);
    > 95 |       this.logger.error("Streaming strategy generation failed", {
         |                   ^
      96 |         streamId,
      97 |         error: error.message,
      98 |         correlationId: this.correlationId,

      at AIStrategyGeneratorStreaming.error [as generateWithStreaming] (services/aiStrategyGeneratorStreaming.js:95:19)
      at Object.generateWithStreaming (tests/unit/services/aiStrategyGeneratorStreaming.test.js:131:47)

  ● AIStrategyGeneratorStreaming Service › generateWithStreaming › should handle empty symbols in streaming

    TypeError: Cannot read properties of undefined (reading 'error')

      93 |     } catch (error) {
      94 |       this.activeStreams.delete(streamId);
    > 95 |       this.logger.error("Streaming strategy generation failed", {
         |                   ^
      96 |         streamId,
      97 |         error: error.message,
      98 |         correlationId: this.correlationId,

      at AIStrategyGeneratorStreaming.error [as generateWithStreaming] (services/aiStrategyGeneratorStreaming.js:95:19)
      at Object.generateWithStreaming (tests/unit/services/aiStrategyGeneratorStreaming.test.js:143:47)

  ● AIStrategyGeneratorStreaming Service › generateWithStreaming › should clean up stream after completion

    TypeError: Cannot read properties of undefined (reading 'error')

      93 |     } catch (error) {
      94 |       this.activeStreams.delete(streamId);
    > 95 |       this.logger.error("Streaming strategy generation failed", {
         |                   ^
      96 |         streamId,
      97 |         error: error.message,
      98 |         correlationId: this.correlationId,

      at AIStrategyGeneratorStreaming.error [as generateWithStreaming] (services/aiStrategyGeneratorStreaming.js:95:19)
      at Object.generateWithStreaming (tests/unit/services/aiStrategyGeneratorStreaming.test.js:156:32)

  ● AIStrategyGeneratorStreaming Service › generateWithStreaming › should handle streaming errors gracefully

    Property `buildSystemPrompt` does not exist in the provided object

      164 |       // Mock an error in the parent class method
      165 |       jest
    > 166 |         .spyOn(streamingGenerator, "buildSystemPrompt")
          |          ^
      167 |         .mockImplementation(() => {
      168 |           throw new Error("System prompt generation failed");
      169 |         });

      at ModuleMocker.spyOn (node_modules/jest-mock/build/index.js:731:13)
      at Object.spyOn (tests/unit/services/aiStrategyGeneratorStreaming.test.js:166:10)

  ● AIStrategyGeneratorStreaming Service › generateWithStreaming › should handle stream timeout

    Property `buildUserPrompt` does not exist in the provided object

      186 |       // Mock a slow operation
      187 |       jest
    > 188 |         .spyOn(streamingGenerator, "buildUserPrompt")
          |          ^
      189 |         .mockImplementation(async () => {
      190 |           await new Promise((resolve) => setTimeout(resolve, 50)); // 50ms delay
      191 |           return "prompt";

      at ModuleMocker.spyOn (node_modules/jest-mock/build/index.js:731:13)
      at Object.spyOn (tests/unit/services/aiStrategyGeneratorStreaming.test.js:188:10)

  ● AIStrategyGeneratorStreaming Service › stopStream › should stop active stream

    TypeError: Cannot read properties of undefined (reading 'info')

      593 |
      594 |     this.activeStreams.delete(streamId);
    > 595 |     this.logger.info("Stream stopped", { streamId });
          |                 ^
      596 |
      597 |     return {
      598 |       success: true,

      at AIStrategyGeneratorStreaming.info [as stopStream] (services/aiStrategyGeneratorStreaming.js:595:17)
      at Object.stopStream (tests/unit/services/aiStrategyGeneratorStreaming.test.js:316:41)

  ● AIStrategyGeneratorStreaming Service › stopAllStreams › should stop all active streams

    TypeError: Cannot read properties of undefined (reading 'info')

      608 |     this.activeStreams.clear();
      609 |
    > 610 |     this.logger.info("All streams stopped", { stoppedCount });
          |                 ^
      611 |
      612 |     return {
      613 |       success: true,

      at AIStrategyGeneratorStreaming.info [as stopAllStreams] (services/aiStrategyGeneratorStreaming.js:610:17)
      at Object.stopAllStreams (tests/unit/services/aiStrategyGeneratorStreaming.test.js:350:41)

  ● AIStrategyGeneratorStreaming Service › stopAllStreams › should handle when no streams are active

    TypeError: Cannot read properties of undefined (reading 'info')

      608 |     this.activeStreams.clear();
      609 |
    > 610 |     this.logger.info("All streams stopped", { stoppedCount });
          |                 ^
      611 |
      612 |     return {
      613 |       success: true,

      at AIStrategyGeneratorStreaming.info [as stopAllStreams] (services/aiStrategyGeneratorStreaming.js:610:17)
      at Object.stopAllStreams (tests/unit/services/aiStrategyGeneratorStreaming.test.js:364:41)

  ● AIStrategyGeneratorStreaming Service › Error Handling and Edge Cases › should handle progress callback errors

    expect(received).resolves.not.toThrow()

    Received promise rejected instead of resolved
    Rejected to value: [TypeError: Cannot read properties of undefined (reading 'warn')]

      531 |
      532 |       // Should not crash the streaming process
    > 533 |       await expect(
          |             ^
      534 |         streamingGenerator.processStreamingChunk("test chunk", faultyProgress)
      535 |       ).resolves.not.toThrow();
      536 |     });

      at expect (node_modules/expect/build/index.js:113:15)
      at Object.expect (tests/unit/services/aiStrategyGeneratorStreaming.test.js:533:13)

  ● AIStrategyGeneratorStreaming Service › Error Handling and Edge Cases › should handle very rapid stream start/stop cycles

    TypeError: Cannot read properties of undefined (reading 'info')

      593 |
      594 |     this.activeStreams.delete(streamId);
    > 595 |     this.logger.info("Stream stopped", { streamId });
          |                 ^
      596 |
      597 |     return {
      598 |       success: true,

      at AIStrategyGeneratorStreaming.info [as stopStream] (services/aiStrategyGeneratorStreaming.js:595:17)
      at Object.stopStream (tests/unit/services/aiStrategyGeneratorStreaming.test.js:546:45)

  ● AIStrategyGeneratorStreaming Service › Error Handling and Edge Cases › should clean up properly on errors

    Property `buildSystemPrompt` does not exist in the provided object

      586 |       // Force an error during streaming
      587 |       jest
    > 588 |         .spyOn(streamingGenerator, "buildSystemPrompt")
          |          ^
      589 |         .mockImplementation(() => {
      590 |           throw new Error("Forced error");
      591 |         });

      at ModuleMocker.spyOn (node_modules/jest-mock/build/index.js:731:13)
      at Object.spyOn (tests/unit/services/aiStrategyGeneratorStreaming.test.js:588:10)

  ● AIStrategyGeneratorStreaming Service › Integration with Base Class › should inherit all base class functionality

    expect(received).toBeDefined()

    Received: undefined

      602 |   describe("Integration with Base Class", () => {
      603 |     test("should inherit all base class functionality", () => {
    > 604 |       expect(streamingGenerator.assetTypePatterns).toBeDefined();
          |                                                    ^
      605 |       expect(streamingGenerator.strategyTemplates).toBeDefined();
      606 |       expect(typeof streamingGenerator.parseIntent).toBe("function");
      607 |       expect(typeof streamingGenerator.validateStrategy).toBe("function");

      at Object.toBeDefined (tests/unit/services/aiStrategyGeneratorStreaming.test.js:604:52)

  ● AIStrategyGeneratorStreaming Service › Integration with Base Class › should use base class template generation

    TypeError: Cannot read properties of undefined (reading 'error')

      93 |     } catch (error) {
      94 |       this.activeStreams.delete(streamId);
    > 95 |       this.logger.error("Streaming strategy generation failed", {
         |                   ^
      96 |         streamId,
      97 |         error: error.message,
      98 |         correlationId: this.correlationId,

      at AIStrategyGeneratorStreaming.error [as generateWithStreaming] (services/aiStrategyGeneratorStreaming.js:95:19)
      at Object.generateWithStreaming (tests/unit/services/aiStrategyGeneratorStreaming.test.js:612:47)

  ● AIStrategyGeneratorStreaming Service › Integration with Base Class › should maintain correlation ID from base class

    expect(received).toMatch(expected)

    Expected pattern: /^ai-strategy-\d+-[a-z0-9]+$/
    Received string:  "test-correlation-id"

      621 |
      622 |     test("should maintain correlation ID from base class", () => {
    > 623 |       expect(streamingGenerator.correlationId).toMatch(
          |                                                ^
      624 |         /^ai-strategy-\d+-[a-z0-9]+$/
      625 |       );
      626 |     });

      at Object.toMatch (tests/unit/services/aiStrategyGeneratorStreaming.test.js:623:48)

  console.warn
    Economic data count query returned null result, database may be unavailable

      145 |     // Add null safety check
      146 |     if (!countResult || !countResult.rows || countResult.rows.length === 0) {
    > 147 |       console.warn(
          |               ^
      148 |         "Economic data count query returned null result, database may be unavailable"
      149 |       );
      150 |       return res.status(503).json({

      at warn (routes/economic.js:147:15)

  console.error
    Economic data query failed: Database connection failed

      134 |       ]);
      135 |     } catch (error) {
    > 136 |       console.error("Economic data query failed:", error.message);
          |               ^
      137 |       return res.status(500).json({
      138 |         success: false,
      139 |         error: "Failed to fetch economic data",

      at error (routes/economic.js:136:15)

  console.warn
    Economic data count query returned null result, database may be unavailable

      145 |     // Add null safety check
      146 |     if (!countResult || !countResult.rows || countResult.rows.length === 0) {
    > 147 |       console.warn(
          |               ^
      148 |         "Economic data count query returned null result, database may be unavailable"
      149 |       );
      150 |       return res.status(503).json({

      at warn (routes/economic.js:147:15)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 100

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 10

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.error
    Error fetching economic data: Error: Query timeout
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/economic.test.js:326:35)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      247 |     });
      248 |   } catch (error) {
    > 249 |     console.error("Error fetching economic data:", error);
          |             ^
      250 |     // Return 200 with empty data instead of 500
      251 |     res.json({
      252 |       success: true,

      at error (routes/economic.js:249:13)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.error
    Economic data query failed: Test error

      134 |       ]);
      135 |     } catch (error) {
    > 136 |       console.error("Economic data query failed:", error.message);
          |               ^
      137 |       return res.status(500).json({
      138 |         success: false,
      139 |         error: "Failed to fetch economic data",

      at error (routes/economic.js:136:15)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 100

      at log (routes/economic.js:224:13)

FAIL tests/unit/routes/economic.test.js
  Economic Routes Unit Tests
    GET /economic
      ✓ should return economic data with pagination (15 ms)
      ✓ should handle pagination parameters (8 ms)
      ✓ should filter by series parameter (4 ms)
      ✓ should handle database unavailable gracefully (5 ms)
      ✓ should return 404 when no economic data found (6 ms)
      ✓ should return 404 when null economic data result (4 ms)
      ✕ should handle database errors (5 ms)
      ✓ should handle count query returning empty result (7 ms)
    GET /economic/data
      ✓ should return economic data for DataValidation page (5 ms)
      ✓ should handle limit parameter with maximum cap (5 ms)
      ✓ should handle small limit parameter (6 ms)
      ✓ should use default limit when not provided (5 ms)
      ✓ should return 404 when no data found (4 ms)
      ✓ should return 404 when null result (6 ms)
      ✓ should return 404 when undefined rows (5 ms)
      ✕ should handle database errors (6 ms)
      ✓ should include timestamp in ISO format (6 ms)
    Edge cases and error handling
      ✕ should handle invalid page numbers (3 ms)
      ✕ should handle negative page and limit (4 ms)
      ✓ should handle very large page numbers (5 ms)
      ✓ should handle special characters in series parameter (4 ms)
      ✕ should handle empty series parameter (4 ms)
      ✓ should handle invalid limit in data endpoint (5 ms)
    Response format validation
      ✓ should return consistent JSON response format (4 ms)
      ✓ should maintain consistent error response format (4 ms)
      ✓ should return proper data structure (5 ms)
    Data integrity tests
      ✓ should preserve numeric values correctly (5 ms)
      ✓ should handle large datasets (4 ms)
      ✓ should calculate pagination correctly (5 ms)

  ● Economic Routes Unit Tests › GET /economic › should handle database errors

    expect(received).toHaveProperty(path, value)

    Expected path: "error"

    Expected value: "Database error"
    Received value: "Failed to fetch economic data"

      189 |       expect([200, 404, 500]).toContain(response.status);
      190 |       expect([true, false]).toContain(response.body.success);
    > 191 |       expect(response.body).toHaveProperty("error", "Database error");
          |                             ^
      192 |       expect(response.body).toHaveProperty(
      193 |         "message",
      194 |         "Database connection failed"

      at Object.toHaveProperty (tests/unit/routes/economic.test.js:191:29)

  ● Economic Routes Unit Tests › GET /economic/data › should handle database errors

    expect(received).toHaveProperty(path, value)

    Expected path: "error"
    Received path: []

    Expected value: "Database error"
    Received value: {"count": 0, "data": [], "limit": 25, "message": "Economic data temporarily unavailable", "success": true, "timestamp": "2025-09-27T07:55:41.475Z"}

      330 |       expect([200, 404, 500]).toContain(response.status);
      331 |       expect([true, false]).toContain(response.body.success);
    > 332 |       expect(response.body).toHaveProperty("error", "Database error");
          |                             ^
      333 |       expect(response.body).toHaveProperty("message", "Query timeout");
      334 |     });
      335 |

      at Object.toHaveProperty (tests/unit/routes/economic.test.js:332:29)

  ● Economic Routes Unit Tests › Edge cases and error handling › should handle invalid page numbers

    TypeError: Cannot read properties of undefined (reading 'limit')

      367 |
      368 |       expect(response.body.pagination?.page || 1).toBe(1); // Default page
    > 369 |       expect(response.body.pagination.limit).toBe(25); // Default limit
          |                                       ^
      370 |     });
      371 |
      372 |     test("should handle negative page and limit", async () => {

      at Object.limit (tests/unit/routes/economic.test.js:369:39)

  ● Economic Routes Unit Tests › Edge cases and error handling › should handle negative page and limit

    TypeError: Cannot read properties of undefined (reading 'limit')

      383 |
      384 |       expect(response.body.pagination?.page || 1).toBe(1); // Defaults to 1
    > 385 |       expect(response.body.pagination.limit).toBe(25); // Defaults to 25
          |                                       ^
      386 |     });
      387 |
      388 |     test("should handle very large page numbers", async () => {

      at Object.limit (tests/unit/routes/economic.test.js:385:39)

  ● Economic Routes Unit Tests › Edge cases and error handling › should handle empty series parameter

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "WHERE series_id = $1", ["", 25, 0]
    Received
           1
              "
          SELECT·
            series_id,
            date,
            value
          FROM economic_data·······
          ORDER BY series_id, date DESC
          LIMIT $1 OFFSET $2
        ",
              Array [
            -   "",
                25,
                0,
              ],
           2
              "
          SELECT COUNT(*) as total FROM economic_data·
        ",
            - Array [
            -   "",
            -   25,
            -   0,
            - ]
            + Array [],

    Number of calls: 2

      443 |       const response = await request(app).get("/economic?series=");
      444 |
    > 445 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      446 |         expect.stringContaining("WHERE series_id = $1"),
      447 |         ["", 25, 0]
      448 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/economic.test.js:445:25)

  console.log
    AI strategy generation request { userId: 'test-user-123', prompt: 'short', symbolCount: 2 }

      at log (routes/strategyBuilder.js:167:13)

  console.log
    AI strategy generation request {
      userId: 'test-user-123',
      prompt: 'Create a momentum strategy for AAPL',
      symbolCount: 0
    }

      at log (routes/strategyBuilder.js:167:13)

  console.log
    AI strategy generation request { userId: 'test-user-123', prompt: '', symbolCount: 2 }

      at log (routes/strategyBuilder.js:167:13)

  console.log
    AI strategy generation request {
      userId: 'test-user-123',
      prompt: 'Create a momentum strategy',
      symbolCount: 0
    }

      at log (routes/strategyBuilder.js:167:13)

  console.log
    AI strategy generation request { userId: 'test-user-123', prompt: 'Test strategy', symbolCount: 1 }

      at log (routes/strategyBuilder.js:167:13)

  console.error
    AI strategy generation error {
      userId: 'test-user-123',
      error: "Cannot read properties of undefined (reading 'success')"
    }

      219 |     }
      220 |   } catch (err) {
    > 221 |     console.error("AI strategy generation error", {
          |             ^
      222 |       userId: req.user?.id,
      223 |       error: err.message,
      224 |     });

      at error (routes/strategyBuilder.js:221:13)

  console.log
    AI strategy generation request { userId: 'test-user-123', prompt: 'short', symbolCount: 0 }

      at log (routes/strategyBuilder.js:167:13)

FAIL tests/unit/routes/strategyBuilder.test.js
  Strategy Builder Routes
    POST /api/strategies/ai-generate
      ✓ should return 400 for short prompt (24 ms)
      ✓ should return error when no symbols provided (5 ms)
      ✓ should handle empty prompt (7 ms)
      ✓ should use default symbols array when not provided (5 ms)
      ○ skipped should generate strategy successfully (skipped - AI service mock hanging)
      ○ skipped should handle AI generation failure (skipped - AI service mock hanging)
      ○ skipped should handle AI generation service error (skipped - AI service mock hanging)
    POST /api/strategies/validate
      ✕ should validate strategy successfully (1 ms)
      ✓ should return 400 when strategy is missing (5 ms)
      ✓ should return 400 when strategy code is missing (4 ms)
      ✕ should handle validation service error (1 ms)
      ✕ should handle validation with errors and warnings (1 ms)
    POST /api/strategies/run-ai-strategy
      ✕ should return 501 for backtest (not implemented) (5 ms)
      ✓ should return 400 when strategy is missing (5 ms)
      ✓ should return 400 when strategy code is missing (4 ms)
      ✓ should handle missing symbols (5 ms)
    POST /api/strategies/deploy-hft
      ✕ should return 501 for HFT deployment (not implemented) (6 ms)
      ✓ should return 400 when strategy is missing (4 ms)
      ✓ should return 400 when backtest results are missing (4 ms)
      ✓ should reject strategy that doesn't meet HFT requirements (5 ms)
      ✓ should format requirement failures correctly (5 ms)
    GET /api/strategies/available-symbols
      ✕ should return available symbols successfully (4 ms)
      ✕ should handle database error (6 ms)
      ✕ should handle null database result (4 ms)
      ✓ should handle empty symbol result (3 ms)
    GET /api/strategies/list
      ✕ should return 501 for user strategies list (not implemented) (5 ms)
      ✕ should handle query parameters (4 ms)
    GET /api/strategies/templates
      ✓ should return strategy templates successfully (4 ms)
      ✕ should handle missing strategy templates (5 ms)
    Error handling and middleware
      ✓ should handle authentication errors gracefully (6 ms)
      ✓ should handle malformed JSON gracefully (5 ms)
      ✕ should log user actions properly (1 ms)
    Response format consistency
      ✓ should maintain consistent success response format (5 ms)
      ✓ should maintain consistent error response format (5 ms)
      ✕ should handle all route parameter combinations (3 ms)

  ● Strategy Builder Routes › POST /api/strategies/validate › should validate strategy successfully

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      210 |       };
      211 |
    > 212 |       mockAiGenerator.validateStrategy.mockResolvedValue(mockValidation);
          |                                        ^
      213 |
      214 |       const response = await request(app)
      215 |         .post("/api/strategies/validate")

      at Object.mockResolvedValue (tests/unit/routes/strategyBuilder.test.js:212:40)

  ● Strategy Builder Routes › POST /api/strategies/validate › should handle validation service error

    TypeError: Cannot read properties of undefined (reading 'mockRejectedValue')

      259 |
      260 |     it("should handle validation service error", async () => {
    > 261 |       mockAiGenerator.validateStrategy.mockRejectedValue(
          |                                        ^
      262 |         new Error("Validation service error")
      263 |       );
      264 |

      at Object.mockRejectedValue (tests/unit/routes/strategyBuilder.test.js:261:40)

  ● Strategy Builder Routes › POST /api/strategies/validate › should handle validation with errors and warnings

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      282 |       };
      283 |
    > 284 |       mockAiGenerator.validateStrategy.mockResolvedValue(mockValidation);
          |                                        ^
      285 |
      286 |       const response = await request(app)
      287 |         .post("/api/strategies/validate")

      at Object.mockResolvedValue (tests/unit/routes/strategyBuilder.test.js:284:40)

  ● Strategy Builder Routes › POST /api/strategies/run-ai-strategy › should return 501 for backtest (not implemented)

    expected 501 "Not Implemented", got 500 "Internal Server Error"

      320 |         .post("/api/strategies/run-ai-strategy")
      321 |         .send(validBacktestRequest)
    > 322 |         .expect(501);
          |          ^
      323 |
      324 |       expect(response.body.success).toBe(false);
      325 |       expect(response.body.error).toBe(

      at Object.expect (tests/unit/routes/strategyBuilder.test.js:322:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Strategy Builder Routes › POST /api/strategies/deploy-hft › should return 501 for HFT deployment (not implemented)

    expect(received).toBe(expected) // Object.is equality

    Expected: "HFT deployment not implemented not found"
    Received: "HFT deployment is not implemented"

      400 |
      401 |       expect(response.body.success).toBe(false);
    > 402 |       expect(response.body.error).toBe(
          |                                   ^
      403 |         "HFT deployment not implemented not found"
      404 |       );
      405 |     });

      at Object.toBe (tests/unit/routes/strategyBuilder.test.js:402:35)

  ● Strategy Builder Routes › GET /api/strategies/available-symbols › should return available symbols successfully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "SELECT DISTINCT symbol FROM stock_symbols WHERE is_active = true ORDER BY symbol LIMIT 100"
    Received: "SELECT DISTINCT symbol FROM stocks WHERE market_cap > 0 ORDER BY symbol LIMIT 100"

    Number of calls: 1

      507 |       });
      508 |
    > 509 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      510 |         "SELECT DISTINCT symbol FROM stock_symbols WHERE is_active = true ORDER BY symbol LIMIT 100"
      511 |       );
      512 |     });

      at Object.toHaveBeenCalledWith (tests/unit/routes/strategyBuilder.test.js:509:25)

  ● Strategy Builder Routes › GET /api/strategies/available-symbols › should handle database error

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 3

      Object {
    -   "error": "Failed to retrieve available symbols",
    +   "details": "Database connection failed",
    +   "error": "Available symbols query failed",
        "success": false,
    +   "timestamp": "2025-09-27T07:55:41.690Z",
      }

      519 |         .expect(500);
      520 |
    > 521 |       expect(response.body).toEqual({
          |                             ^
      522 |         success: false,
      523 |         error: "Failed to retrieve available symbols",
      524 |       });

      at Object.toEqual (tests/unit/routes/strategyBuilder.test.js:521:29)

  ● Strategy Builder Routes › GET /api/strategies/available-symbols › should handle null database result

    expected 503 "Service Unavailable", got 500 "Internal Server Error"

      530 |       const response = await request(app)
      531 |         .get("/api/strategies/available-symbols")
    > 532 |         .expect(503);
          |          ^
      533 |
      534 |       expect(response.body.success).toBe(false);
      535 |       expect(response.body.error).toBe(

      at Object.expect (tests/unit/routes/strategyBuilder.test.js:532:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Strategy Builder Routes › GET /api/strategies/list › should return 501 for user strategies list (not implemented)

    expected 501 "Not Implemented", got 500 "Internal Server Error"

      557 |       const response = await request(app)
      558 |         .get("/api/strategies/list")
    > 559 |         .expect(501);
          |          ^
      560 |
      561 |       expect(response.body.success).toBe(false);
      562 |       expect(response.body.error).toBe(

      at Object.expect (tests/unit/routes/strategyBuilder.test.js:559:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Strategy Builder Routes › GET /api/strategies/list › should handle query parameters

    expected 501 "Not Implemented", got 500 "Internal Server Error"

      570 |           "/api/strategies/list?includeBacktests=true&includeDeployments=true"
      571 |         )
    > 572 |         .expect(501);
          |          ^
      573 |
      574 |       expect(response.body.success).toBe(false);
      575 |     });

      at Object.expect (tests/unit/routes/strategyBuilder.test.js:572:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Strategy Builder Routes › GET /api/strategies/templates › should handle missing strategy templates

    expect(received).toEqual(expected) // deep equality

    - Expected  -  1
    + Received  + 26

    - Array []
    + Array [
    +   Object {
    +     "aiEnhanced": true,
    +     "complexity": "medium",
    +     "description": "Mean reversion strategy",
    +     "id": "meanReversion",
    +     "name": "Mean reversion strategy",
    +     "parameters": Array [
    +       "period",
    +       "threshold",
    +     ],
    +     "type": "meanReversion",
    +   },
    +   Object {
    +     "aiEnhanced": true,
    +     "complexity": "high",
    +     "description": "Momentum strategy",
    +     "id": "momentum",
    +     "name": "Momentum strategy",
    +     "parameters": Array [
    +       "window",
    +       "signal",
    +     ],
    +     "type": "momentum",
    +   },
    + ]

      612 |
      613 |       expect(response.body.success).toBe(true);
    > 614 |       expect(response.body.templates).toEqual([]);
          |                                       ^
      615 |       expect(response.body.count).toBe(0);
      616 |     });
      617 |   });

      at Object.toEqual (tests/unit/routes/strategyBuilder.test.js:614:39)

  ● Strategy Builder Routes › Error handling and middleware › should log user actions properly

    TypeError: Cannot read properties of undefined (reading 'mockResolvedValue')

      649 |       };
      650 |
    > 651 |       mockAiGenerator.generateFromNaturalLanguage.mockResolvedValue({
          |                                                   ^
      652 |         success: true,
      653 |         strategy: { name: "Test", strategyType: "test" },
      654 |       });

      at Object.mockResolvedValue (tests/unit/routes/strategyBuilder.test.js:651:51)

  ● Strategy Builder Routes › Response format consistency › should handle all route parameter combinations

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      694 |       for (const route of routes) {
      695 |         const response = await request(app)[route.method](route.path);
    > 696 |         expect(response.status).toBe(200);
          |                                 ^
      697 |         expect(response.body).toHaveProperty("success");
      698 |       }
      699 |     });

      at Object.toBe (tests/unit/routes/strategyBuilder.test.js:696:33)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'SELECT NOW() as current_time',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:52:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:52:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'INSERT INTO stock_symbols (symbol, name, market_category) VALUES ($1, $2, $3) ON CONFLICT (symbol) D...',
      params: '3 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:62:7)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:62:7)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'SELECT * FROM stock_symbols WHERE symbol = $1',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:83:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:83:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'SELECT * FROM non_existent_table_12345',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:100:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:100:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'INVALID SQL SYNTAX HERE',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:106:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:106:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'INSERT INTO market_data (symbol, name, date, price, volume) VALUES ($1, $2, $3, $4, $5) ON CONFLICT ...',
      params: '5 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:114:7)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:114:7)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'INSERT INTO market_data (symbol, name, date, price, volume) VALUES ($1, $2, $3, $4, $5) ON CONFLICT ...',
      params: '5 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:145:9)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:145:9)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '        SELECT \n' +
        '          NOW() as current_time,\n' +
        "          NOW() - INTERVAL '1 day' as yesterday,\n" +
        ' ...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:176:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:176:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'SELECT NOW() as timestamp, version() as db_version',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at healthCheck (utils/database.js:1479:20)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:210:28)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at healthCheck (utils/database.js:1479:20)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:210:28)

  console.log
    Initializing database schema...

      at log (utils/database.js:311:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS stock_symbols (\n' +
        '          symbol            VARCHAR(50),\n' +
        '          exchan...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table stock_symbols: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS company_profile (\n' +
        '          ticker VARCHAR(10) PRIMARY KEY,\n' +
        '          sho...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table company_profile: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS market_data (\n' +
        '          ticker VARCHAR(10) PRIMARY KEY REFERENCES company...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table market_data: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS technical_data_daily (\n' +
        '          symbol          VARCHAR(50),\n' +
        '          d...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table technical_data_daily: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS technical_data_weekly (\n' +
        '          symbol          VARCHAR(50),\n' +
        '          ...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table technical_data_weekly: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS technical_data_monthly (\n' +
        '          symbol          VARCHAR(50),\n' +
        '         ...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table technical_data_monthly: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS stocks (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          symbol VARCHAR(10) NO...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table stocks: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS price_daily (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          symbol VARCHAR(1...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table price_daily: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS portfolio_holdings (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          user_id V...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table portfolio_holdings: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS portfolio_performance (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          user_i...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table portfolio_performance: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS buy_sell_daily (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          symbol VARCHA...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table buy_sell_daily: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS buy_sell_weekly (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          symbol VARCH...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table buy_sell_weekly: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS buy_sell_monthly (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          symbol VARC...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table buy_sell_monthly: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS portfolio_transactions (\n' +
        '          transaction_id SERIAL PRIMARY KEY,\n' +
        '   ...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table portfolio_transactions: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS technical_indicators (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          symbol ...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table technical_indicators: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS market_sentiment (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          value DOUBL...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table market_sentiment: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS price_alerts (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          user_id VARCHAR...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table price_alerts: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS risk_alerts (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          user_id VARCHAR(...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table risk_alerts: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS alert_settings (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          user_id VARCH...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table alert_settings: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS alert_rules (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          user_id VARCHAR(...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table alert_rules: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS stock_scores (\n' +
        '          symbol VARCHAR(50) PRIMARY KEY,\n' +
        '          compos...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table stock_scores: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS key_metrics (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          ticker VARCHAR(1...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table key_metrics: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS dividend_calendar (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          symbol VAR...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table dividend_calendar: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS trading_strategies (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          user_id V...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table trading_strategies: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS user_risk_limits (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          user_id VAR...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table user_risk_limits: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS trade_history (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          user_id VARCHA...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table trade_history: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS portfolio_summary (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          user_id VA...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table portfolio_summary: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS user_dashboard_settings (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          user...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table user_dashboard_settings: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS portfolio_metadata (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          user_id V...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table portfolio_metadata: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS swing_trading_signals (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          symbol...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table swing_trading_signals: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'CREATE TABLE IF NOT EXISTS economic_data (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '          series_id VARC...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at initializeSchema (utils/database.js:1071:9)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    ⚠️  Warning creating table economic_data: Database connection failed: Database connection failed - no fallback available

      1072 |         console.log(`✅ Created/verified table: ${table.name}`);
      1073 |       } catch (error) {
    > 1074 |         console.warn(
           |                 ^
      1075 |           `⚠️  Warning creating table ${table.name}:`,
      1076 |           error.message
      1077 |         );

      at warn (utils/database.js:1074:17)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'SELECT COUNT(*) as count FROM stock_symbols',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at insertInitialData (utils/database.js:1099:25)
      at initializeSchema (utils/database.js:1082:5)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at insertInitialData (utils/database.js:1099:25)
      at initializeSchema (utils/database.js:1082:5)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.warn
    Warning inserting initial data: Database connection failed: Database connection failed - no fallback available

      1257 |     }
      1258 |   } catch (error) {
    > 1259 |     console.warn("Warning inserting initial data:", error.message);
           |             ^
      1260 |     // Don't throw - let the application continue
      1261 |   }
      1262 | }

      at warn (utils/database.js:1259:13)
      at initializeSchema (utils/database.js:1082:5)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:243:22)

  console.log
    ✅ Database schema initialization completed

      at log (utils/database.js:1084:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'SELECT COUNT(*) FROM stock_symbols LIMIT 1',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:248:33)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:248:33)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '        CREATE TEMPORARY TABLE temp_test_1758959741887 (\n' +
        '          id SERIAL PRIMARY KEY,\n' +
        '         ...',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:263:28)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:263:28)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'INSERT INTO stock_symbols (symbol, name) VALUES ($1, $2) RETURNING symbol',
      params: '2 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:287:27)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:287:27)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'SELECT NOW() as reconnect_time',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:331:22)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:331:22)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'SELECT NOW() as timestamp, version() as db_version',
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at healthCheck (utils/database.js:1479:20)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:336:25)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at healthCheck (utils/database.js:1479:20)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:336:25)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'SELECT $1 as test_id',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
          at async Promise.all (index 0)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:357:23)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
          at async Promise.all (index 0)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:357:23)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'SELECT $1 as test_id',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
          at async Promise.all (index 1)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:357:23)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
          at async Promise.all (index 1)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:357:23)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'SELECT $1 as test_id',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
          at async Promise.all (index 2)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:357:23)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
          at async Promise.all (index 2)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:357:23)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'SELECT $1 as test_id',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
          at async Promise.all (index 3)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:357:23)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
          at async Promise.all (index 3)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:357:23)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'SELECT $1 as test_id',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
          at async Promise.all (index 4)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:357:23)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
          at async Promise.all (index 4)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:357:23)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'SELECT * FROM market_data WHERE symbol = $1',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:438:29)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:438:29)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'INSERT INTO stock_symbols (symbol, name, market_category) VALUES ($1, $2, $3) ON CONFLICT (symbol) D...',
      params: '3 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:502:7)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:502:7)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'INSERT INTO stock_symbols (symbol, name, market_category) VALUES ($1, $2, $3) ON CONFLICT (symbol) D...',
      params: '3 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:552:7)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:552:7)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'INSERT INTO stock_symbols (symbol, name) VALUES ($1, $2) ON CONFLICT (symbol) DO UPDATE SET name = $...',
      params: '2 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:624:7)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:624:7)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'INSERT INTO stock_symbols (symbol, name) VALUES ($1, $2) ON CONFLICT (symbol) DO UPDATE SET name = $...',
      params: '2 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:746:7)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:746:7)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: 'INSERT INTO stock_symbols (symbol, name, market_category) VALUES ($1, $2, $3) ON CONFLICT (symbol) D...',
      params: '3 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:821:7)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:821:7)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: "DELETE FROM market_data WHERE ticker LIKE 'T%' OR ticker LIKE 'U%' OR ticker LIKE 'A%' OR ticker LIK...",
      params: 'no parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:37:7)

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:37:7)

  console.warn
    Cleanup warning: Database connection failed: Database connection failed - no fallback available

      42 |       );
      43 |     } catch (error) {
    > 44 |       console.warn("Cleanup warning:", error.message);
         |               ^
      45 |     }
      46 |
      47 |     await closeDatabase();

      at Object.warn (tests/integration/utils/database.integration.test.js:44:15)

FAIL tests/integration/utils/database.integration.test.js
  Database Real Site Functionality Tests
    Real Database Query Operations
      ✕ should execute basic SELECT queries against real database (4 ms)
      ✕ should handle parameterized queries correctly (2 ms)
      ✕ should prevent SQL injection attacks with parameterized queries (2 ms)
      ✕ should handle database errors gracefully (3 ms)
      ✕ should handle syntax errors gracefully (1 ms)
      ✕ should work with complex JOIN queries on real tables (2 ms)
      ✕ should handle aggregate functions and calculations (2 ms)
      ✕ should handle date/time operations (2 ms)
    Database Initialization and Schema
      ✕ should initialize database and create required tables (1 ms)
      ✕ should verify database connection and schema integrity (3 ms)
      ✕ should handle database configuration from environment variables
    Real Database Schema Operations
      ✕ should initialize and verify schema tables (65 ms)
      ✕ should handle table creation and constraints (2 ms)
      ✕ should handle unique constraints properly (2 ms)
    Connection Pool Management
      ✕ should provide working connection pool
      ✕ should manage connection lifecycle properly (2 ms)
      ✕ should perform accurate health checks (3 ms)
      ✕ should handle concurrent connections properly (6 ms)
      ✕ should handle connection pool stats
    Transaction Support
      ✕ should execute transactions with commit
      ✕ should rollback transactions on error (2 ms)
      ✕ should handle nested transaction operations (1 ms)
    Real-World Data Operations
      ✕ should handle bulk data insertions efficiently (1 ms)
      ✕ should handle complex analytical queries (1 ms)
      ✕ should handle time-based queries with proper indexing performance (2 ms)
    Advanced Transaction Integration Scenarios
      ✕ should handle concurrent transactions without conflicts
      ✕ should handle transaction rollback with concurrent access (2 ms)
      ✕ should handle cross-table transaction consistency
      ✕ should handle transaction isolation levels (2 ms)
      ✕ should handle large transaction data volumes

  ● Database Real Site Functionality Tests › Real Database Query Operations › should execute basic SELECT queries against real database

    Database connection failed: Database connection failed - no fallback available

      1287 |       if (!result || !pool) {
      1288 |         // Database is not available - throw error instead of fallback
    > 1289 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1290 |         error.code = "DB_CONNECTION_FAILED";
      1291 |         throw error;
      1292 |       }

      at query (utils/database.js:1289:23)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:52:22)

  ● Database Real Site Functionality Tests › Real Database Query Operations › should handle parameterized queries correctly

    Database connection failed: Database connection failed - no fallback available

      1287 |       if (!result || !pool) {
      1288 |         // Database is not available - throw error instead of fallback
    > 1289 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1290 |         error.code = "DB_CONNECTION_FAILED";
      1291 |         throw error;
      1292 |       }

      at query (utils/database.js:1289:23)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:62:7)

  ● Database Real Site Functionality Tests › Real Database Query Operations › should prevent SQL injection attacks with parameterized queries

    Database connection failed: Database connection failed - no fallback available

      1287 |       if (!result || !pool) {
      1288 |         // Database is not available - throw error instead of fallback
    > 1289 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1290 |         error.code = "DB_CONNECTION_FAILED";
      1291 |         throw error;
      1292 |       }

      at query (utils/database.js:1289:23)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:83:22)

  ● Database Real Site Functionality Tests › Real Database Query Operations › should handle database errors gracefully

    Database connection failed: Database connection failed - no fallback available

      1287 |       if (!result || !pool) {
      1288 |         // Database is not available - throw error instead of fallback
    > 1289 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1290 |         error.code = "DB_CONNECTION_FAILED";
      1291 |         throw error;
      1292 |       }

      at query (utils/database.js:1289:23)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:100:22)

  ● Database Real Site Functionality Tests › Real Database Query Operations › should handle syntax errors gracefully

    Database connection failed: Database connection failed - no fallback available

      1287 |       if (!result || !pool) {
      1288 |         // Database is not available - throw error instead of fallback
    > 1289 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1290 |         error.code = "DB_CONNECTION_FAILED";
      1291 |         throw error;
      1292 |       }

      at query (utils/database.js:1289:23)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:106:22)

  ● Database Real Site Functionality Tests › Real Database Query Operations › should work with complex JOIN queries on real tables

    Database connection failed: Database connection failed - no fallback available

      1287 |       if (!result || !pool) {
      1288 |         // Database is not available - throw error instead of fallback
    > 1289 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1290 |         error.code = "DB_CONNECTION_FAILED";
      1291 |         throw error;
      1292 |       }

      at query (utils/database.js:1289:23)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:114:7)

  ● Database Real Site Functionality Tests › Real Database Query Operations › should handle aggregate functions and calculations

    Database connection failed: Database connection failed - no fallback available

      1287 |       if (!result || !pool) {
      1288 |         // Database is not available - throw error instead of fallback
    > 1289 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1290 |         error.code = "DB_CONNECTION_FAILED";
      1291 |         throw error;
      1292 |       }

      at query (utils/database.js:1289:23)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:145:9)

  ● Database Real Site Functionality Tests › Real Database Query Operations › should handle date/time operations

    Database connection failed: Database connection failed - no fallback available

      1287 |       if (!result || !pool) {
      1288 |         // Database is not available - throw error instead of fallback
    > 1289 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1290 |         error.code = "DB_CONNECTION_FAILED";
      1291 |         throw error;
      1292 |       }

      at query (utils/database.js:1289:23)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:176:22)

  ● Database Real Site Functionality Tests › Database Initialization and Schema › should initialize database and create required tables

    expect(received).not.toBeNull()

    Received: null

      194 |       const pool = await initializeDatabase();
      195 |
    > 196 |       expect(pool).not.toBeNull();
          |                        ^
      197 |
      198 |       // Verify essential tables exist
      199 |       const tablesResult = await query(`

      at Object.toBeNull (tests/integration/utils/database.integration.test.js:196:24)

  ● Database Real Site Functionality Tests › Database Initialization and Schema › should verify database connection and schema integrity

    expect(received).toBe(expected) // Object.is equality

    Expected: "healthy"
    Received: "unhealthy"

      210 |       const healthResult = await healthCheck();
      211 |
    > 212 |       expect(healthResult.status).toBe("healthy");
          |                                   ^
      213 |
      214 |       // Test actual schema by checking table structure
      215 |       const columnsResult = await query(`

      at Object.toBe (tests/integration/utils/database.integration.test.js:212:35)

  ● Database Real Site Functionality Tests › Database Initialization and Schema › should handle database configuration from environment variables

    TypeError: Cannot read properties of null (reading 'host')

      232 |
      233 |       expect(config).toBeDefined();
    > 234 |       expect(config.host).toBe("localhost");
          |                     ^
      235 |       expect(config.port).toBe(5432);
      236 |       expect(config.database).toBe("stocks");
      237 |       expect(config.user).toBe("postgres");

      at Object.host (tests/integration/utils/database.integration.test.js:234:21)

  ● Database Real Site Functionality Tests › Real Database Schema Operations › should initialize and verify schema tables

    Database connection failed: Database connection failed - no fallback available

      1287 |       if (!result || !pool) {
      1288 |         // Database is not available - throw error instead of fallback
    > 1289 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1290 |         error.code = "DB_CONNECTION_FAILED";
      1291 |         throw error;
      1292 |       }

      at query (utils/database.js:1289:23)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:248:33)

  ● Database Real Site Functionality Tests › Real Database Schema Operations › should handle table creation and constraints

    Database connection failed: Database connection failed - no fallback available

      1287 |       if (!result || !pool) {
      1288 |         // Database is not available - throw error instead of fallback
    > 1289 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1290 |         error.code = "DB_CONNECTION_FAILED";
      1291 |         throw error;
      1292 |       }

      at query (utils/database.js:1289:23)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:263:28)

  ● Database Real Site Functionality Tests › Real Database Schema Operations › should handle unique constraints properly

    Database connection failed: Database connection failed - no fallback available

      1287 |       if (!result || !pool) {
      1288 |         // Database is not available - throw error instead of fallback
    > 1289 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1290 |         error.code = "DB_CONNECTION_FAILED";
      1291 |         throw error;
      1292 |       }

      at query (utils/database.js:1289:23)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:287:27)

  ● Database Real Site Functionality Tests › Connection Pool Management › should provide working connection pool

    Database not initialized. Call initializeDatabase() first.

      1267 | function getPool() {
      1268 |   if (!pool || !dbInitialized) {
    > 1269 |     throw new Error(
           |           ^
      1270 |       "Database not initialized. Call initializeDatabase() first."
      1271 |     );
      1272 |   }

      at getPool (utils/database.js:1269:11)
      at Object.getPool (tests/integration/utils/database.integration.test.js:315:20)

  ● Database Real Site Functionality Tests › Connection Pool Management › should manage connection lifecycle properly

    Database connection failed: Database connection failed - no fallback available

      1287 |       if (!result || !pool) {
      1288 |         // Database is not available - throw error instead of fallback
    > 1289 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1290 |         error.code = "DB_CONNECTION_FAILED";
      1291 |         throw error;
      1292 |       }

      at query (utils/database.js:1289:23)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:331:22)

  ● Database Real Site Functionality Tests › Connection Pool Management › should perform accurate health checks

    expect(received).toBe(expected) // Object.is equality

    Expected: "healthy"
    Received: "unhealthy"

      336 |       const isHealthy = await healthCheck();
      337 |
    > 338 |       expect(isHealthy.status).toBe("healthy");
          |                                ^
      339 |
      340 |       // Verify health check actually tests database responsiveness
      341 |       const startTime = Date.now();

      at Object.toBe (tests/integration/utils/database.integration.test.js:338:32)

  ● Database Real Site Functionality Tests › Connection Pool Management › should handle concurrent connections properly

    Database connection failed: Database connection failed - no fallback available

      1287 |       if (!result || !pool) {
      1288 |         // Database is not available - throw error instead of fallback
    > 1289 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1290 |         error.code = "DB_CONNECTION_FAILED";
      1291 |         throw error;
      1292 |       }

      at query (utils/database.js:1289:23)
          at async Promise.all (index 0)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:357:23)

  ● Database Real Site Functionality Tests › Connection Pool Management › should handle connection pool stats

    Database not initialized. Call initializeDatabase() first.

      1267 | function getPool() {
      1268 |   if (!pool || !dbInitialized) {
    > 1269 |     throw new Error(
           |           ^
      1270 |       "Database not initialized. Call initializeDatabase() first."
      1271 |     );
      1272 |   }

      at getPool (utils/database.js:1269:11)
      at Object.getPool (tests/integration/utils/database.integration.test.js:366:20)

  ● Database Real Site Functionality Tests › Transaction Support › should execute transactions with commit

    Database not initialized. Call initializeDatabase() first.

      1267 | function getPool() {
      1268 |   if (!pool || !dbInitialized) {
    > 1269 |     throw new Error(
           |           ^
      1270 |       "Database not initialized. Call initializeDatabase() first."
      1271 |     );
      1272 |   }

      at getPool (utils/database.js:1269:11)
      at getPool (utils/database.js:1440:24)
      at Object.transaction (tests/integration/utils/database.integration.test.js:382:28)

  ● Database Real Site Functionality Tests › Transaction Support › should rollback transactions on error

    Database connection failed: Database connection failed - no fallback available

      1287 |       if (!result || !pool) {
      1288 |         // Database is not available - throw error instead of fallback
    > 1289 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1290 |         error.code = "DB_CONNECTION_FAILED";
      1291 |         throw error;
      1292 |       }

      at query (utils/database.js:1289:23)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:438:29)

  ● Database Real Site Functionality Tests › Transaction Support › should handle nested transaction operations

    Database not initialized. Call initializeDatabase() first.

      1267 | function getPool() {
      1268 |   if (!pool || !dbInitialized) {
    > 1269 |     throw new Error(
           |           ^
      1270 |       "Database not initialized. Call initializeDatabase() first."
      1271 |     );
      1272 |   }

      at getPool (utils/database.js:1269:11)
      at getPool (utils/database.js:1440:24)
      at Object.transaction (tests/integration/utils/database.integration.test.js:449:28)

  ● Database Real Site Functionality Tests › Real-World Data Operations › should handle bulk data insertions efficiently

    Database connection failed: Database connection failed - no fallback available

      1287 |       if (!result || !pool) {
      1288 |         // Database is not available - throw error instead of fallback
    > 1289 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1290 |         error.code = "DB_CONNECTION_FAILED";
      1291 |         throw error;
      1292 |       }

      at query (utils/database.js:1289:23)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:502:7)

  ● Database Real Site Functionality Tests › Real-World Data Operations › should handle complex analytical queries

    Database connection failed: Database connection failed - no fallback available

      1287 |       if (!result || !pool) {
      1288 |         // Database is not available - throw error instead of fallback
    > 1289 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1290 |         error.code = "DB_CONNECTION_FAILED";
      1291 |         throw error;
      1292 |       }

      at query (utils/database.js:1289:23)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:552:7)

  ● Database Real Site Functionality Tests › Real-World Data Operations › should handle time-based queries with proper indexing performance

    Database connection failed: Database connection failed - no fallback available

      1287 |       if (!result || !pool) {
      1288 |         // Database is not available - throw error instead of fallback
    > 1289 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1290 |         error.code = "DB_CONNECTION_FAILED";
      1291 |         throw error;
      1292 |       }

      at query (utils/database.js:1289:23)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:624:7)

  ● Database Real Site Functionality Tests › Advanced Transaction Integration Scenarios › should handle concurrent transactions without conflicts

    Database not initialized. Call initializeDatabase() first.

      1267 | function getPool() {
      1268 |   if (!pool || !dbInitialized) {
    > 1269 |     throw new Error(
           |           ^
      1270 |       "Database not initialized. Call initializeDatabase() first."
      1271 |     );
      1272 |   }

      at getPool (utils/database.js:1269:11)
      at getPool (utils/database.js:1440:24)
      at Object.transaction (tests/integration/utils/database.integration.test.js:692:36)

  ● Database Real Site Functionality Tests › Advanced Transaction Integration Scenarios › should handle transaction rollback with concurrent access

    Database connection failed: Database connection failed - no fallback available

      1287 |       if (!result || !pool) {
      1288 |         // Database is not available - throw error instead of fallback
    > 1289 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1290 |         error.code = "DB_CONNECTION_FAILED";
      1291 |         throw error;
      1292 |       }

      at query (utils/database.js:1289:23)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:746:7)

  ● Database Real Site Functionality Tests › Advanced Transaction Integration Scenarios › should handle cross-table transaction consistency

    Database not initialized. Call initializeDatabase() first.

      1267 | function getPool() {
      1268 |   if (!pool || !dbInitialized) {
    > 1269 |     throw new Error(
           |           ^
      1270 |       "Database not initialized. Call initializeDatabase() first."
      1271 |     );
      1272 |   }

      at getPool (utils/database.js:1269:11)
      at getPool (utils/database.js:1440:24)
      at Object.transaction (tests/integration/utils/database.integration.test.js:782:28)

  ● Database Real Site Functionality Tests › Advanced Transaction Integration Scenarios › should handle transaction isolation levels

    Database connection failed: Database connection failed - no fallback available

      1287 |       if (!result || !pool) {
      1288 |         // Database is not available - throw error instead of fallback
    > 1289 |         const error = new Error("Database connection failed - no fallback available");
           |                       ^
      1290 |         error.code = "DB_CONNECTION_FAILED";
      1291 |         throw error;
      1292 |       }

      at query (utils/database.js:1289:23)
      at Object.<anonymous> (tests/integration/utils/database.integration.test.js:821:7)

  ● Database Real Site Functionality Tests › Advanced Transaction Integration Scenarios › should handle large transaction data volumes

    Database not initialized. Call initializeDatabase() first.

      1267 | function getPool() {
      1268 |   if (!pool || !dbInitialized) {
    > 1269 |     throw new Error(
           |           ^
      1270 |       "Database not initialized. Call initializeDatabase() first."
      1271 |     );
      1272 |   }

      at getPool (utils/database.js:1269:11)
      at getPool (utils/database.js:1440:24)
      at Object.transaction (tests/integration/utils/database.integration.test.js:888:28)

  console.log
    JWT verifier initialized successfully (test mode)

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:100:17)

  console.log
    Stocks main endpoint called with params: {}

      at log (routes/stocks.js:801:13)

  console.log
    Triggering workflow deploy

      at log (routes/stocks.js:802:13)

  console.log
    Query params: { whereClause: 'WHERE 1=1', params: [], limit: 50, offset: 0 }

      at log (routes/stocks.js:850:13)

  console.log
    Executing FAST queries with schema validation...

      at log (routes/stocks.js:935:13)

  console.log
    Executing comprehensive stocks query with timeout protection...

      at log (routes/stocks.js:938:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT DISTINCT ON (cp.ticker)\n' +
        '        cp.ticker as symbol,\n' +
        '        COALESCE(cp.short_name, c...',
      params: '2 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/stocks.js:946:22

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at routes/stocks.js:946:22

  console.error
    Stocks query error: Database connection failed: Database connection failed - no fallback available

      954 |       ]);
      955 |     } catch (dbError) {
    > 956 |       console.error('Stocks query error:', dbError.message);
          |               ^
      957 |       return res.status(500).json({
      958 |         success: false,
      959 |         error: "Failed to fetch stocks data from stocks table",

      at error (routes/stocks.js:956:15)

  console.log
    🔍 Stock search requested for: AAPL

      at log (routes/stocks.js:1686:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT\n' +
        '        cp.ticker as symbol,\n' +
        '        COALESCE(cp.short_name, cp.long_name, cp.ticker) ...',
      params: '7 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/stocks.js:1724:20

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at routes/stocks.js:1724:20

  console.error
    Stock search error: Error: Database connection failed: Database connection failed - no fallback available
        at query (/home/stocks/algo/webapp/lambda/utils/database.js:1289:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/stocks.js:1724:20 {
      code: 'DB_CONNECTION_FAILED'
    }

      1782 |     });
      1783 |   } catch (error) {
    > 1784 |     console.error("Stock search error:", error);
           |             ^
      1785 |     res.status(500).json({
      1786 |       success: false,
      1787 |       error: "Search failed",

      at error (routes/stocks.js:1784:13)

  console.log
    📋 Stock list endpoint called

      at log (routes/stocks.js:368:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT EXISTS (\n' +
        '        SELECT FROM information_schema.tables\n' +
        '        WHERE table_name = $1\n' +
        ' ...',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at tableExists (routes/stocks.js:20:20)
      at routes/stocks.js:372:11

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at tableExists (routes/stocks.js:20:20)
      at routes/stocks.js:372:11

  console.warn
    Error checking table existence for company_profile: Error: Database connection failed: Database connection failed - no fallback available
        at query (/home/stocks/algo/webapp/lambda/utils/database.js:1289:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at tableExists (/home/stocks/algo/webapp/lambda/routes/stocks.js:20:20)
        at /home/stocks/algo/webapp/lambda/routes/stocks.js:372:11 {
      code: 'DB_CONNECTION_FAILED'
    }

      25 |     return result.rows[0].exists;
      26 |   } catch (error) {
    > 27 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      28 |     return false;
      29 |   }
      30 | }

      at warn (routes/stocks.js:27:13)
      at routes/stocks.js:372:11

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT EXISTS (\n' +
        '        SELECT FROM information_schema.tables\n' +
        '        WHERE table_name = $1\n' +
        ' ...',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at tableExists (routes/stocks.js:20:20)
      at routes/stocks.js:39:11

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at tableExists (routes/stocks.js:20:20)
      at routes/stocks.js:39:11

  console.warn
    Error checking table existence for company_profile: Error: Database connection failed: Database connection failed - no fallback available
        at query (/home/stocks/algo/webapp/lambda/utils/database.js:1289:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at tableExists (/home/stocks/algo/webapp/lambda/routes/stocks.js:20:20)
        at /home/stocks/algo/webapp/lambda/routes/stocks.js:39:11 {
      code: 'DB_CONNECTION_FAILED'
    }

      25 |     return result.rows[0].exists;
      26 |   } catch (error) {
    > 27 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      28 |     return false;
      29 |   }
      30 | }

      at warn (routes/stocks.js:27:13)
      at routes/stocks.js:39:11

  console.log
    Individual stock request for AAPL

      at log (routes/stocks.js:651:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT EXISTS (\n' +
        '        SELECT FROM information_schema.tables\n' +
        '        WHERE table_name = $1\n' +
        ' ...',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at tableExists (routes/stocks.js:20:20)
      at routes/stocks.js:654:11

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at tableExists (routes/stocks.js:20:20)
      at routes/stocks.js:654:11

  console.warn
    Error checking table existence for company_profile: Error: Database connection failed: Database connection failed - no fallback available
        at query (/home/stocks/algo/webapp/lambda/utils/database.js:1289:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at tableExists (/home/stocks/algo/webapp/lambda/routes/stocks.js:20:20)
        at /home/stocks/algo/webapp/lambda/routes/stocks.js:654:11 {
      code: 'DB_CONNECTION_FAILED'
    }

      25 |     return result.rows[0].exists;
      26 |   } catch (error) {
    > 27 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      28 |     return false;
      29 |   }
      30 | }

      at warn (routes/stocks.js:27:13)
      at routes/stocks.js:654:11

  console.log
    🔍 Stock search requested for: AAPL

      at log (routes/stocks.js:1686:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT\n' +
        '        cp.ticker as symbol,\n' +
        '        COALESCE(cp.short_name, cp.long_name, cp.ticker) ...',
      params: '7 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/stocks.js:1724:20

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at routes/stocks.js:1724:20

  console.error
    Stock search error: Error: Database connection failed: Database connection failed - no fallback available
        at query (/home/stocks/algo/webapp/lambda/utils/database.js:1289:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/stocks.js:1724:20 {
      code: 'DB_CONNECTION_FAILED'
    }

      1782 |     });
      1783 |   } catch (error) {
    > 1784 |     console.error("Stock search error:", error);
           |             ^
      1785 |     res.status(500).json({
      1786 |       success: false,
      1787 |       error: "Search failed",

      at error (routes/stocks.js:1784:13)

  console.log
    🔍 Stock search requested for: A

      at log (routes/stocks.js:1686:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT\n' +
        '        cp.ticker as symbol,\n' +
        '        COALESCE(cp.short_name, cp.long_name, cp.ticker) ...',
      params: '7 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/stocks.js:1724:20

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at routes/stocks.js:1724:20

  console.error
    Stock search error: Error: Database connection failed: Database connection failed - no fallback available
        at query (/home/stocks/algo/webapp/lambda/utils/database.js:1289:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/stocks.js:1724:20 {
      code: 'DB_CONNECTION_FAILED'
    }

      1782 |     });
      1783 |   } catch (error) {
    > 1784 |     console.error("Stock search error:", error);
           |             ^
      1785 |     res.status(500).json({
      1786 |       success: false,
      1787 |       error: "Search failed",

      at error (routes/stocks.js:1784:13)

  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT\n' +
        '        pd.symbol,\n' +
        '        NULL as name,\n' +
        '        pd.close as current_price,\n' +
        '        pd...',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/stocks.js:2174:20

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at routes/stocks.js:2174:20

  console.error
    Trending stocks error: Database connection failed: Database connection failed - no fallback available

      2183 |     });
      2184 |   } catch (error) {
    > 2185 |     console.error("Trending stocks error:", error.message);
           |             ^
      2186 |     res.status(500).json({
      2187 |       success: false,
      2188 |       error: "Failed to fetch trending stocks",

      at error (routes/stocks.js:2185:13)

  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT\n' +
        '        pd.symbol,\n' +
        '        NULL as name,\n' +
        '        pd.close as current_price,\n' +
        '        pd...',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/stocks.js:2174:20

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at routes/stocks.js:2174:20

  console.error
    Trending stocks error: Database connection failed: Database connection failed - no fallback available

      2183 |     });
      2184 |   } catch (error) {
    > 2185 |     console.error("Trending stocks error:", error.message);
           |             ^
      2186 |     res.status(500).json({
      2187 |       success: false,
      2188 |       error: "Failed to fetch trending stocks",

      at error (routes/stocks.js:2185:13)

  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT\n' +
        '        pd.symbol,\n' +
        '        NULL as name,\n' +
        '        pd.close as current_price,\n' +
        '        pd...',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/stocks.js:2174:20

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at routes/stocks.js:2174:20

  console.error
    Trending stocks error: Database connection failed: Database connection failed - no fallback available

      2183 |     });
      2184 |   } catch (error) {
    > 2185 |     console.error("Trending stocks error:", error.message);
           |             ^
      2186 |     res.status(500).json({
      2187 |       success: false,
      2188 |       error: "Failed to fetch trending stocks",

      at error (routes/stocks.js:2185:13)

  console.log
    Stock details requested for AAPL

      at log (routes/stocks.js:2591:13)

  console.log
    Stock details requested for INVALID123

      at log (routes/stocks.js:2591:13)

  console.log
    Stock details requested for AAPL

      at log (routes/stocks.js:2591:13)

  console.log
    Stock price requested for AAPL, timeframe: 1d, historical: false

      at log (routes/stocks.js:2820:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT symbol, date, open, high, low, close, adj_close, volume\n' +
        '      FROM price_daily\n' +
        '      W...',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/stocks.js:2836:20

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at routes/stocks.js:2836:20

  console.error
    Stock price error: Error: Database connection failed: Database connection failed - no fallback available
        at query (/home/stocks/algo/webapp/lambda/utils/database.js:1289:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/stocks.js:2836:20 {
      code: 'DB_CONNECTION_FAILED'
    }

      2880 |     });
      2881 |   } catch (error) {
    > 2882 |     console.error("Stock price error:", error);
           |             ^
      2883 |     res.status(500).json({
      2884 |       success: false,
      2885 |       error: "Failed to fetch stock price",

      at error (routes/stocks.js:2882:13)

  console.log
    Stock price requested for AAPL, timeframe: 1d, historical: false

      at log (routes/stocks.js:2820:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT symbol, date, open, high, low, close, adj_close, volume\n' +
        '      FROM price_daily\n' +
        '      W...',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/stocks.js:2836:20

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at routes/stocks.js:2836:20

  console.error
    Stock price error: Error: Database connection failed: Database connection failed - no fallback available
        at query (/home/stocks/algo/webapp/lambda/utils/database.js:1289:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/stocks.js:2836:20 {
      code: 'DB_CONNECTION_FAILED'
    }

      2880 |     });
      2881 |   } catch (error) {
    > 2882 |     console.error("Stock price error:", error);
           |             ^
      2883 |     res.status(500).json({
      2884 |       success: false,
      2885 |       error: "Failed to fetch stock price",

      at error (routes/stocks.js:2882:13)

  console.log
    Stock price requested for AAPL, timeframe: 1d, historical: true

      at log (routes/stocks.js:2820:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT symbol, date, open, high, low, close, adj_close, volume\n' +
        '      FROM price_daily\n' +
        '      W...',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/stocks.js:2836:20

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at routes/stocks.js:2836:20

  console.error
    Stock price error: Error: Database connection failed: Database connection failed - no fallback available
        at query (/home/stocks/algo/webapp/lambda/utils/database.js:1289:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/stocks.js:2836:20 {
      code: 'DB_CONNECTION_FAILED'
    }

      2880 |     });
      2881 |   } catch (error) {
    > 2882 |     console.error("Stock price error:", error);
           |             ^
      2883 |     res.status(500).json({
      2884 |       success: false,
      2885 |       error: "Failed to fetch stock price",

      at error (routes/stocks.js:2882:13)

  console.log
    Fetching gainers movers for timeframe 1d

      at log (routes/stocks.js:441:13)

  console.log
    Fetching gainers movers for timeframe 1d

      at log (routes/stocks.js:441:13)

  console.log
    Fetching gainers movers for timeframe 1d

      at log (routes/stocks.js:441:13)

  console.log
    Stock recommendations requested for AAPL, criteria: all

      at log (routes/stocks.js:2768:13)

  console.log
    Stock recommendations requested for AAPL, criteria: technical

      at log (routes/stocks.js:2768:13)

  console.log
    Comparing stocks: AAPL, MSFT, GOOGL

      at log (routes/stocks.js:588:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT\n' +
        '        cp.ticker as symbol,\n' +
        '        cp.short_name as name,\n' +
        '        cp.sector,\n' +
        '       ...',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/stocks.js:610:20

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at routes/stocks.js:610:20

  console.error
    Compare endpoint error: Error: Database connection failed: Database connection failed - no fallback available
        at query (/home/stocks/algo/webapp/lambda/utils/database.js:1289:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/stocks.js:610:20 {
      code: 'DB_CONNECTION_FAILED'
    }

      629 |     });
      630 |   } catch (error) {
    > 631 |     console.error("Compare endpoint error:", error);
          |             ^
      632 |     res.status(500).json({
      633 |       success: false,
      634 |       error: "Failed to compare stocks",

      at error (routes/stocks.js:631:13)

  console.log
    Response status: 500

      at Object.log (tests/unit/routes/stocks.test.js:361:15)

  console.log
    Response body: {
      "success": false,
      "error": "Failed to compare stocks",
      "message": "Database connection failed: Database connection failed - no fallback available"
    }

      at Object.log (tests/unit/routes/stocks.test.js:362:15)

  console.log
    Comparing stocks: AAPL, MSFT

      at log (routes/stocks.js:588:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT\n' +
        '        cp.ticker as symbol,\n' +
        '        cp.short_name as name,\n' +
        '        cp.sector,\n' +
        '       ...',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/stocks.js:610:20

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at routes/stocks.js:610:20

  console.error
    Compare endpoint error: Error: Database connection failed: Database connection failed - no fallback available
        at query (/home/stocks/algo/webapp/lambda/utils/database.js:1289:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/stocks.js:610:20 {
      code: 'DB_CONNECTION_FAILED'
    }

      629 |     });
      630 |   } catch (error) {
    > 631 |     console.error("Compare endpoint error:", error);
          |             ^
      632 |     res.status(500).json({
      633 |       success: false,
      634 |       error: "Failed to compare stocks",

      at error (routes/stocks.js:631:13)

  console.log
    Comparing stocks: STOCK0, STOCK1, STOCK2, STOCK3, STOCK4

      at log (routes/stocks.js:588:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT\n' +
        '        cp.ticker as symbol,\n' +
        '        cp.short_name as name,\n' +
        '        cp.sector,\n' +
        '       ...',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/stocks.js:610:20

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at routes/stocks.js:610:20

  console.error
    Compare endpoint error: Error: Database connection failed: Database connection failed - no fallback available
        at query (/home/stocks/algo/webapp/lambda/utils/database.js:1289:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/stocks.js:610:20 {
      code: 'DB_CONNECTION_FAILED'
    }

      629 |     });
      630 |   } catch (error) {
    > 631 |     console.error("Compare endpoint error:", error);
          |             ^
      632 |     res.status(500).json({
      633 |       success: false,
      634 |       error: "Failed to compare stocks",

      at error (routes/stocks.js:631:13)

  console.log
    Fetching market statistics

      at log (routes/stocks.js:510:13)

  console.log
    Fetching market statistics

      at log (routes/stocks.js:510:13)

  console.log
    Individual stock request for details

      at log (routes/stocks.js:651:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT EXISTS (\n' +
        '        SELECT FROM information_schema.tables\n' +
        '        WHERE table_name = $1\n' +
        ' ...',
      params: '1 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at tableExists (routes/stocks.js:20:20)
      at routes/stocks.js:654:11

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at tableExists (routes/stocks.js:20:20)
      at routes/stocks.js:654:11

  console.warn
    Error checking table existence for company_profile: Error: Database connection failed: Database connection failed - no fallback available
        at query (/home/stocks/algo/webapp/lambda/utils/database.js:1289:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at tableExists (/home/stocks/algo/webapp/lambda/routes/stocks.js:20:20)
        at /home/stocks/algo/webapp/lambda/routes/stocks.js:654:11 {
      code: 'DB_CONNECTION_FAILED'
    }

      25 |     return result.rows[0].exists;
      26 |   } catch (error) {
    > 27 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      28 |     return false;
      29 |   }
      30 | }

      at warn (routes/stocks.js:27:13)
      at routes/stocks.js:654:11

FAIL tests/unit/routes/stocks.test.js
  Stocks Routes Unit Tests
    GET /stocks/
      ✕ should return stocks data with correct loader table structure (22 ms)
    GET /stocks/search
      ✕ should return search results (35 ms)
      ✕ should search stocks by query (7 ms)
      ✓ should handle empty search query (4 ms)
      ✕ should limit search results (8 ms)
    GET /stocks/list
      ✓ should return stock list with correct loader table structure (10 ms)
    GET /stocks/sectors
      ✓ should return sector data from stocks table (7 ms)
    GET /stocks/AAPL
      ✕ should return stock details (10 ms)
    GET /stocks/trending
      ✕ should return trending stocks (6 ms)
      ✕ should handle trending with timeframe (8 ms)
      ✕ should handle trending with different categories (7 ms)
    GET /stocks/details/:symbol
      ✓ should return stock details for valid symbol (6 ms)
      ✓ should handle invalid stock symbol (5 ms)
      ✓ should include comprehensive stock data (6 ms)
    GET /stocks/price/:symbol
      ✓ should return price data for symbol (8 ms)
      ✓ should handle price with different timeframes (6 ms)
      ✓ should handle price with historical data (8 ms)
    GET /stocks/movers
      ✓ should return market movers (5 ms)
      ✓ should handle movers by category (5 ms)
      ✓ should limit movers results (6 ms)
    GET /stocks/recommendations/:symbol
      ✓ should return stock recommendations (5 ms)
      ✓ should handle recommendations with different criteria (5 ms)
    GET /stocks/compare
      ✕ should compare multiple stocks (9 ms)
      ✕ should handle comparison with metrics (7 ms)
      ✕ should limit comparison to reasonable number of stocks (8 ms)
    GET /stocks/stats
      ✓ should return stock statistics (6 ms)
      ✓ should handle stats with filters (5 ms)
    Stocks Error Handling
      ✓ should handle malformed symbol requests (8 ms)
      ✓ should handle invalid query parameters gracefully (4 ms)
      ✓ should handle missing required parameters (4 ms)

  ● Stocks Routes Unit Tests › GET /stocks/ › should return stocks data with correct loader table structure

    expected 200 "OK", got 500 "Internal Server Error"

      57 |         .get("/stocks/")
      58 |         .set("Authorization", "Bearer dev-bypass-token")
    > 59 |         .expect(200);
         |          ^
      60 |
      61 |       expect(response.body).toHaveProperty("success", true);
      62 |       expect(response.body).toHaveProperty("data");

      at Object.expect (tests/unit/routes/stocks.test.js:59:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Stocks Routes Unit Tests › GET /stocks/search › should return search results

    expected 200 "OK", got 500 "Internal Server Error"

       99 |         .get("/stocks/search?q=AAPL")
      100 |         .set("Authorization", "Bearer dev-bypass-token")
    > 101 |         .expect(200);
          |          ^
      102 |
      103 |       expect(response.body).toHaveProperty("success");
      104 |       expect(response.body).toHaveProperty("data");

      at Object.expect (tests/unit/routes/stocks.test.js:101:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Stocks Routes Unit Tests › GET /stocks/AAPL › should return stock details

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [200, 500]

      156 |         expect(response.body).toHaveProperty("success", true);
      157 |       } else {
    > 158 |         expect([200, 500]).toContain(response.status);
          |                            ^
      159 |         expect(response.body).toHaveProperty("success", false);
      160 |       }
      161 |       expect(response.body).toHaveProperty("data");

      at Object.toContain (tests/unit/routes/stocks.test.js:158:28)

  ● Stocks Routes Unit Tests › GET /stocks/search › should search stocks by query

    expected 200 "OK", got 500 "Internal Server Error"

      179 |       const response = await request(app)
      180 |         .get("/stocks/search?query=AAPL")
    > 181 |         .expect(200);
          |          ^
      182 |
      183 |       expect(response.body).toHaveProperty("success", true);
      184 |       expect(response.body).toHaveProperty("data");

      at Object.expect (tests/unit/routes/stocks.test.js:181:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Stocks Routes Unit Tests › GET /stocks/search › should limit search results

    expected 200 "OK", got 500 "Internal Server Error"

      196 |       const response = await request(app)
      197 |         .get("/stocks/search?query=A&limit=5")
    > 198 |         .expect(200);
          |          ^
      199 |
      200 |       expect(response.body).toHaveProperty("success", true);
      201 |       if (response.body.data && response.body.data.results) {

      at Object.expect (tests/unit/routes/stocks.test.js:198:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Stocks Routes Unit Tests › GET /stocks/trending › should return trending stocks

    expected 200 "OK", got 500 "Internal Server Error"

      210 |         .get("/stocks/trending")
      211 |         .set("Authorization", "Bearer dev-bypass-token")
    > 212 |         .expect(200);
          |          ^
      213 |
      214 |       expect(response.body).toHaveProperty("success", true);
      215 |       expect(response.body).toHaveProperty("data");

      at Object.expect (tests/unit/routes/stocks.test.js:212:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Stocks Routes Unit Tests › GET /stocks/trending › should handle trending with timeframe

    expected 200 "OK", got 500 "Internal Server Error"

      220 |         .get("/stocks/trending?timeframe=1d")
      221 |         .set("Authorization", "Bearer dev-bypass-token")
    > 222 |         .expect(200);
          |          ^
      223 |
      224 |       expect(response.body).toHaveProperty("success", true);
      225 |     });

      at Object.expect (tests/unit/routes/stocks.test.js:222:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Stocks Routes Unit Tests › GET /stocks/trending › should handle trending with different categories

    expected 200 "OK", got 500 "Internal Server Error"

      229 |         .get("/stocks/trending?category=gainers")
      230 |         .set("Authorization", "Bearer dev-bypass-token")
    > 231 |         .expect(200);
          |          ^
      232 |
      233 |       expect(response.body).toHaveProperty("success", true);
      234 |     });

      at Object.expect (tests/unit/routes/stocks.test.js:231:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Stocks Routes Unit Tests › GET /stocks/compare › should compare multiple stocks

    expected 500 to be one of 200,404

      374 |       } else {
      375 |         // Should not reach here - test expects 200 or 404 only
    > 376 |         expect(response.status).toBeOneOf([200, 404]);
          |                                 ^
      377 |       }
      378 |     });
      379 |

      at Object.toBeOneOf (tests/unit/routes/stocks.test.js:376:33)

  ● Stocks Routes Unit Tests › GET /stocks/compare › should handle comparison with metrics

    expected 500 to be one of 200,404

      392 |       } else {
      393 |         // Should not reach here - test expects 200 or 404 only
    > 394 |         expect(response.status).toBeOneOf([200, 404]);
          |                                 ^
      395 |       }
      396 |     });
      397 |

      at Object.toBeOneOf (tests/unit/routes/stocks.test.js:394:33)

  ● Stocks Routes Unit Tests › GET /stocks/compare › should limit comparison to reasonable number of stocks

    expected 500 to be one of 200,404

      415 |       } else {
      416 |         // Should not reach here - test expects 200 or 404 only
    > 417 |         expect(response.status).toBeOneOf([200, 404]);
          |                                 ^
      418 |       }
      419 |     });
      420 |   });

      at Object.toBeOneOf (tests/unit/routes/stocks.test.js:417:33)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT\n' +
        '        id,\n' +
        '        title,\n' +
        '        title as summary,\n' +
        '        publisher as source,\n' +
        '    ...',
      params: '2 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/commodities.js:761:20

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at routes/commodities.js:761:20

  console.error
    Commodities news error: Error: Database connection failed: Database connection failed - no fallback available
        at query (/home/stocks/algo/webapp/lambda/utils/database.js:1289:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/commodities.js:761:20 {
      code: 'DB_CONNECTION_FAILED'
    }

      790 |     });
      791 |   } catch (error) {
    > 792 |     console.error("Commodities news error:", error);
          |             ^
      793 |     res.status(500).json({
      794 |       success: false,
      795 |       error: "Failed to fetch commodities news",

      at error (routes/commodities.js:792:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT\n' +
        '        id,\n' +
        '        title,\n' +
        '        title as summary,\n' +
        '        publisher as source,\n' +
        '    ...',
      params: '2 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/commodities.js:761:20

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at routes/commodities.js:761:20

  console.error
    Commodities news error: Error: Database connection failed: Database connection failed - no fallback available
        at query (/home/stocks/algo/webapp/lambda/utils/database.js:1289:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/commodities.js:761:20 {
      code: 'DB_CONNECTION_FAILED'
    }

      790 |     });
      791 |   } catch (error) {
    > 792 |     console.error("Commodities news error:", error);
          |             ^
      793 |     res.status(500).json({
      794 |       success: false,
      795 |       error: "Failed to fetch commodities news",

      at error (routes/commodities.js:792:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT\n' +
        '        id,\n' +
        '        title,\n' +
        '        title as summary,\n' +
        '        publisher as source,\n' +
        '    ...',
      params: '2 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/commodities.js:761:20

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at routes/commodities.js:761:20

  console.error
    Commodities news error: Error: Database connection failed: Database connection failed - no fallback available
        at query (/home/stocks/algo/webapp/lambda/utils/database.js:1289:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/commodities.js:761:20 {
      code: 'DB_CONNECTION_FAILED'
    }

      790 |     });
      791 |   } catch (error) {
    > 792 |     console.error("Commodities news error:", error);
          |             ^
      793 |     res.status(500).json({
      794 |       success: false,
      795 |       error: "Failed to fetch commodities news",

      at error (routes/commodities.js:792:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT\n' +
        '        id,\n' +
        '        title,\n' +
        '        title as summary,\n' +
        '        publisher as source,\n' +
        '    ...',
      params: '2 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/commodities.js:761:20

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at routes/commodities.js:761:20

  console.error
    Commodities news error: Error: Database connection failed: Database connection failed - no fallback available
        at query (/home/stocks/algo/webapp/lambda/utils/database.js:1289:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/commodities.js:761:20 {
      code: 'DB_CONNECTION_FAILED'
    }

      790 |     });
      791 |   } catch (error) {
    > 792 |     console.error("Commodities news error:", error);
          |             ^
      793 |     res.status(500).json({
      794 |       success: false,
      795 |       error: "Failed to fetch commodities news",

      at error (routes/commodities.js:792:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT\n' +
        '        id,\n' +
        '        title,\n' +
        '        title as summary,\n' +
        '        publisher as source,\n' +
        '    ...',
      params: '2 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/commodities.js:761:20

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at routes/commodities.js:761:20

  console.error
    Commodities news error: Error: Database connection failed: Database connection failed - no fallback available
        at query (/home/stocks/algo/webapp/lambda/utils/database.js:1289:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/commodities.js:761:20 {
      code: 'DB_CONNECTION_FAILED'
    }

      790 |     });
      791 |   } catch (error) {
    > 792 |     console.error("Commodities news error:", error);
          |             ^
      793 |     res.status(500).json({
      794 |       success: false,
      795 |       error: "Failed to fetch commodities news",

      at error (routes/commodities.js:792:13)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.error
    Database query error: {
      error: 'Database connection failed - no fallback available',
      query: '\n' +
        '      SELECT\n' +
        '        id,\n' +
        '        title,\n' +
        '        title as summary,\n' +
        '        publisher as source,\n' +
        '    ...',
      params: '2 parameters',
      code: 'DB_CONNECTION_FAILED'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/commodities.js:761:20

  console.error
    Database connection error - no fallback available

      1360 |       error.code === "ECONNABORTED"
      1361 |     ) {
    > 1362 |       console.error("Database connection error - no fallback available");
           |               ^
      1363 |       error.message = `Database connection failed: ${error.message}`;
      1364 |       throw error;
      1365 |     }

      at error (utils/database.js:1362:15)
      at routes/commodities.js:761:20

  console.error
    Commodities news error: Error: Database connection failed: Database connection failed - no fallback available
        at query (/home/stocks/algo/webapp/lambda/utils/database.js:1289:23)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/commodities.js:761:20 {
      code: 'DB_CONNECTION_FAILED'
    }

      790 |     });
      791 |   } catch (error) {
    > 792 |     console.error("Commodities news error:", error);
          |             ^
      793 |     res.status(500).json({
      794 |       success: false,
      795 |       error: "Failed to fetch commodities news",

      at error (routes/commodities.js:792:13)

FAIL tests/unit/routes/commodities.test.js
  Commodities Routes
    GET /api/commodities/health
      ✓ should return health status (20 ms)
      ✓ should not require authentication (7 ms)
    GET /api/commodities/
      ✕ should return commodities API overview (4 ms)
      ✓ should return all expected endpoints (4 ms)
    GET /api/commodities/categories
      ✓ should return commodity categories (10 ms)
      ✓ should include energy category with correct structure (13 ms)
      ✓ should include precious metals category (5 ms)
      ✓ should include base metals category (4 ms)
      ✓ should include agriculture category (4 ms)
      ✓ should calculate total weight correctly (6 ms)
      ✓ should include performance data for all time periods (5 ms)
    GET /api/commodities/prices
      ✓ should return current commodity prices (5 ms)
      ✓ should include major commodities (4 ms)
      ✓ should include required price fields (4 ms)
      ✓ should filter by category when provided (5 ms)
      ✓ should handle invalid category filter (4 ms)
      ✓ should limit results when limit parameter provided (4 ms)
    GET /api/commodities/market-summary
      ✓ should return market summary (5 ms)
      ✓ should include market overview metrics (4 ms)
      ✓ should include top gainers and losers (4 ms)
      ✓ should include market sentiment (4 ms)
    GET /api/commodities/correlations
      ✓ should return price correlations (4 ms)
      ✓ should include correlation matrix (4 ms)
      ✓ should include correlation insights (5 ms)
      ✓ should filter correlations by minimum threshold (3 ms)
    GET /api/commodities/news
      ✕ should return commodity news (17 ms)
      ✕ should include required news fields (5 ms)
      ✕ should filter by category when provided (5 ms)
      ✕ should respect limit parameter (6 ms)
    Response Format Validation
      ✕ should return consistent JSON response format (26 ms)
      ✓ should include timestamps in ISO format where applicable (14 ms)
      ✓ should use consistent success field for API responses (13 ms)
    Edge Cases and Error Handling
      ✓ should handle malformed query parameters gracefully (4 ms)
      ✓ should handle very large limit values (4 ms)
      ✕ should handle negative limit values (6 ms)
    Performance and Caching
      ✓ should respond quickly to health checks (4 ms)
      ✓ should handle concurrent requests (17 ms)

  ● Commodities Routes › GET /api/commodities/ › should return commodities API overview

    expect(received).toEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 1

    @@ -10,6 +10,7 @@
          "status": "operational",
          "system": "Commodities API",
          "timestamp": Any<String>,
          "version": "1.0.0",
        },
    +   "success": true,
      }

      50 |       const response = await request(app).get("/api/commodities/").expect(200);
      51 |
    > 52 |       expect(response.body).toEqual({
         |                             ^
      53 |         data: {
      54 |           system: "Commodities API",
      55 |           version: "1.0.0",

      at Object.toEqual (tests/unit/routes/commodities.test.js:52:29)

  ● Commodities Routes › GET /api/commodities/news › should return commodity news

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      422 |       const response = await request(app).get("/api/commodities/news");
      423 |
    > 424 |       expect(response.status).toBe(200);
          |                               ^
      425 |
      426 |       if (response.status === 200) {
      427 |         expect(response.body).toHaveProperty("data");

      at Object.toBe (tests/unit/routes/commodities.test.js:424:31)

  ● Commodities Routes › GET /api/commodities/news › should include required news fields

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      433 |       const response = await request(app).get("/api/commodities/news");
      434 |
    > 435 |       expect(response.status).toBe(200);
          |                               ^
      436 |
      437 |       if (response.status === 200 && response.body.data?.length > 0) {
      438 |         const newsItem = response.body.data[0];

      at Object.toBe (tests/unit/routes/commodities.test.js:435:31)

  ● Commodities Routes › GET /api/commodities/news › should filter by category when provided

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      447 |       );
      448 |
    > 449 |       expect(response.status).toBe(200);
          |                               ^
      450 |
      451 |       if (response.status === 200 && response.body.data?.length > 0) {
      452 |         response.body.data.forEach((item) => {

      at Object.toBe (tests/unit/routes/commodities.test.js:449:31)

  ● Commodities Routes › GET /api/commodities/news › should respect limit parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      459 |       const response = await request(app).get("/api/commodities/news?limit=5");
      460 |
    > 461 |       expect(response.status).toBe(200);
          |                               ^
      462 |
      463 |       if (response.status === 200) {
      464 |         if (response.body.data) {

      at Object.toBe (tests/unit/routes/commodities.test.js:461:31)

  ● Commodities Routes › Response Format Validation › should return consistent JSON response format

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      485 |
      486 |         // Handle different possible status codes
    > 487 |         expect(response.status).toBe(200);
          |                                 ^
      488 |
      489 |         if (response.status === 200) {
      490 |           expect(response.headers["content-type"]).toMatch(/json/);

      at Object.toBe (tests/unit/routes/commodities.test.js:487:33)

  ● Commodities Routes › Edge Cases and Error Handling › should handle negative limit values

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      570 |
      571 |       // Handle different possible status codes
    > 572 |       expect(response.status).toBe(200);
          |                               ^
      573 |
      574 |       if (response.status === 200) {
      575 |         // Should use default limit

      at Object.toBe (tests/unit/routes/commodities.test.js:572:31)

  console.warn
    Table check returned invalid result for analyst_upgrade_downgrade: undefined

      18 |     // Add safety check for undefined result
      19 |     if (!result || !result.rows || result.rows.length === 0) {
    > 20 |       console.warn(`Table check returned invalid result for ${tableName}:`, result);
         |               ^
      21 |       return false;
      22 |     }
      23 |

      at warn (routes/analysts.js:20:15)
      at routes/analysts.js:71:11

  console.warn
    Table check returned invalid result for analyst_upgrade_downgrade: undefined

      18 |     // Add safety check for undefined result
      19 |     if (!result || !result.rows || result.rows.length === 0) {
    > 20 |       console.warn(`Table check returned invalid result for ${tableName}:`, result);
         |               ^
      21 |       return false;
      22 |     }
      23 |

      at warn (routes/analysts.js:20:15)
      at routes/analysts.js:71:11

  console.warn
    Table check returned invalid result for earnings_estimates: undefined

      18 |     // Add safety check for undefined result
      19 |     if (!result || !result.rows || result.rows.length === 0) {
    > 20 |       console.warn(`Table check returned invalid result for ${tableName}:`, result);
         |               ^
      21 |       return false;
      22 |     }
      23 |

      at warn (routes/analysts.js:20:15)
      at routes/analysts.js:135:11

  console.warn
    Table check returned invalid result for earnings_estimates: undefined

      18 |     // Add safety check for undefined result
      19 |     if (!result || !result.rows || result.rows.length === 0) {
    > 20 |       console.warn(`Table check returned invalid result for ${tableName}:`, result);
         |               ^
      21 |       return false;
      22 |     }
      23 |

      at warn (routes/analysts.js:20:15)
      at routes/analysts.js:135:11

  console.warn
    Error checking table existence for sentiment_analysis: Error: Database connection failed
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/analysts.test.js:219:35)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      24 |     return result.rows[0].exists;
      25 |   } catch (error) {
    > 26 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      27 |     return false;
      28 |   }
      29 | }

      at warn (routes/analysts.js:26:13)
      at routes/analysts.js:258:11

  console.log
    📈 [GROWTH] Calculating growth estimates for AAPL

      at log (routes/analysts.js:356:13)

  console.log
    ✅ [GROWTH] Calculated growth estimates for AAPL: Revenue 0%, EPS 0%

      at log (routes/analysts.js:601:13)

  console.error
    Analyst overview fetch error: Error: Database connection failed
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/analysts.test.js:350:35)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      728 |     });
      729 |   } catch (error) {
    > 730 |     console.error("Analyst overview fetch error:", error);
          |             ^
      731 |     return res.status(500).json({
      732 |       success: false,
      733 |       error: "Failed to fetch analyst overview",

      at error (routes/analysts.js:730:13)

  console.warn
    Table check returned invalid result for analyst_upgrade_downgrade: { rows: [] }

      18 |     // Add safety check for undefined result
      19 |     if (!result || !result.rows || result.rows.length === 0) {
    > 20 |       console.warn(`Table check returned invalid result for ${tableName}:`, result);
         |               ^
      21 |       return false;
      22 |     }
      23 |

      at warn (routes/analysts.js:20:15)
      at routes/analysts.js:745:11

  console.log
    📊 Analyst recommendations requested for AAPL

      at log (routes/analysts.js:851:13)

  console.log
    📊 Analyst recommendations requested for INVALID

      at log (routes/analysts.js:851:13)

  console.log
    📊 Analyst recommendations requested for AAPL

      at log (routes/analysts.js:851:13)

  console.error
    Analyst recommendations error: Error: Database connection failed
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/analysts.test.js:475:35)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      939 |     });
      940 |   } catch (error) {
    > 941 |     console.error("Analyst recommendations error:", error);
          |             ^
      942 |     res.status(500).json({
      943 |       success: false,
      944 |       error: "Failed to fetch analyst recommendations",

      at error (routes/analysts.js:941:13)

  console.log
    🎯 Price targets requested for AAPL

      at log (routes/analysts.js:954:13)

  console.log
    🤝 Analyst consensus requested for AAPL

      at log (routes/analysts.js:1342:13)

  console.warn
    Table check returned invalid result for earnings_estimates: { rows: [] }

      18 |     // Add safety check for undefined result
      19 |     if (!result || !result.rows || result.rows.length === 0) {
    > 20 |       console.warn(`Table check returned invalid result for ${tableName}:`, result);
         |               ^
      21 |       return false;
      22 |     }
      23 |

      at warn (routes/analysts.js:20:15)
      at routes/analysts.js:135:11

  console.warn
    Table check returned invalid result for earnings_estimates: { rows: [] }

      18 |     // Add safety check for undefined result
      19 |     if (!result || !result.rows || result.rows.length === 0) {
    > 20 |       console.warn(`Table check returned invalid result for ${tableName}:`, result);
         |               ^
      21 |       return false;
      22 |     }
      23 |

      at warn (routes/analysts.js:20:15)
      at routes/analysts.js:135:11

  console.warn
    Table check returned invalid result for analyst_upgrade_downgrade: { rows: [] }

      18 |     // Add safety check for undefined result
      19 |     if (!result || !result.rows || result.rows.length === 0) {
    > 20 |       console.warn(`Table check returned invalid result for ${tableName}:`, result);
         |               ^
      21 |       return false;
      22 |     }
      23 |

      at warn (routes/analysts.js:20:15)
      at routes/analysts.js:71:11

  console.warn
    Table check returned invalid result for analyst_upgrade_downgrade: { rows: [] }

      18 |     // Add safety check for undefined result
      19 |     if (!result || !result.rows || result.rows.length === 0) {
    > 20 |       console.warn(`Table check returned invalid result for ${tableName}:`, result);
         |               ^
      21 |       return false;
      22 |     }
      23 |

      at warn (routes/analysts.js:20:15)
      at routes/analysts.js:71:11

  console.warn
    Table check returned invalid result for earnings_estimates: { rows: [] }

      18 |     // Add safety check for undefined result
      19 |     if (!result || !result.rows || result.rows.length === 0) {
    > 20 |       console.warn(`Table check returned invalid result for ${tableName}:`, result);
         |               ^
      21 |       return false;
      22 |     }
      23 |

      at warn (routes/analysts.js:20:15)
      at routes/analysts.js:135:11

  console.warn
    Table check returned invalid result for earnings_estimates: { rows: [] }

      18 |     // Add safety check for undefined result
      19 |     if (!result || !result.rows || result.rows.length === 0) {
    > 20 |       console.warn(`Table check returned invalid result for ${tableName}:`, result);
         |               ^
      21 |       return false;
      22 |     }
      23 |

      at warn (routes/analysts.js:20:15)
      at routes/analysts.js:135:11

  console.warn
    Table check returned invalid result for earnings_estimates: { rows: [] }

      18 |     // Add safety check for undefined result
      19 |     if (!result || !result.rows || result.rows.length === 0) {
    > 20 |       console.warn(`Table check returned invalid result for ${tableName}:`, result);
         |               ^
      21 |       return false;
      22 |     }
      23 |

      at warn (routes/analysts.js:20:15)
      at routes/analysts.js:135:11

  console.warn
    Table check returned invalid result for earnings_estimates: { rows: [] }

      18 |     // Add safety check for undefined result
      19 |     if (!result || !result.rows || result.rows.length === 0) {
    > 20 |       console.warn(`Table check returned invalid result for ${tableName}:`, result);
         |               ^
      21 |       return false;
      22 |     }
      23 |

      at warn (routes/analysts.js:20:15)
      at routes/analysts.js:135:11

  console.warn
    Table check returned invalid result for earnings_estimates: { rows: [] }

      18 |     // Add safety check for undefined result
      19 |     if (!result || !result.rows || result.rows.length === 0) {
    > 20 |       console.warn(`Table check returned invalid result for ${tableName}:`, result);
         |               ^
      21 |       return false;
      22 |     }
      23 |

      at warn (routes/analysts.js:20:15)
      at routes/analysts.js:135:11

  console.warn
    Table check returned invalid result for earnings_estimates: { rows: [] }

      18 |     // Add safety check for undefined result
      19 |     if (!result || !result.rows || result.rows.length === 0) {
    > 20 |       console.warn(`Table check returned invalid result for ${tableName}:`, result);
         |               ^
      21 |       return false;
      22 |     }
      23 |

      at warn (routes/analysts.js:20:15)
      at routes/analysts.js:135:11

  console.warn
    Table check returned invalid result for earnings_estimates: { rows: [] }

      18 |     // Add safety check for undefined result
      19 |     if (!result || !result.rows || result.rows.length === 0) {
    > 20 |       console.warn(`Table check returned invalid result for ${tableName}:`, result);
         |               ^
      21 |       return false;
      22 |     }
      23 |

      at warn (routes/analysts.js:20:15)
      at routes/analysts.js:135:11

  console.warn
    Table check returned invalid result for earnings_estimates: { rows: [] }

      18 |     // Add safety check for undefined result
      19 |     if (!result || !result.rows || result.rows.length === 0) {
    > 20 |       console.warn(`Table check returned invalid result for ${tableName}:`, result);
         |               ^
      21 |       return false;
      22 |     }
      23 |

      at warn (routes/analysts.js:20:15)
      at routes/analysts.js:135:11

  console.warn
    Table check returned invalid result for earnings_estimates: { rows: [] }

      18 |     // Add safety check for undefined result
      19 |     if (!result || !result.rows || result.rows.length === 0) {
    > 20 |       console.warn(`Table check returned invalid result for ${tableName}:`, result);
         |               ^
      21 |       return false;
      22 |     }
      23 |

      at warn (routes/analysts.js:20:15)
      at routes/analysts.js:135:11

  console.warn
    Table check returned invalid result for earnings_estimates: { rows: [] }

      18 |     // Add safety check for undefined result
      19 |     if (!result || !result.rows || result.rows.length === 0) {
    > 20 |       console.warn(`Table check returned invalid result for ${tableName}:`, result);
         |               ^
      21 |       return false;
      22 |     }
      23 |

      at warn (routes/analysts.js:20:15)
      at routes/analysts.js:135:11

  console.warn
    Error checking table existence for analyst_upgrade_downgrade: Error: Test error
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/analysts.test.js:822:35)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      24 |     return result.rows[0].exists;
      25 |   } catch (error) {
    > 26 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      27 |     return false;
      28 |   }
      29 | }

      at warn (routes/analysts.js:26:13)
      at routes/analysts.js:71:11

FAIL tests/unit/routes/analysts.test.js
  Analysts Route - Comprehensive Unit Tests
    GET /api/analysts/
      ✓ should return API overview with all endpoints (23 ms)
    GET /api/analysts/upgrades
      ✓ should return analyst upgrades with proper structure (7 ms)
      ✓ should handle pagination parameters correctly (4 ms)
    GET /api/analysts/:ticker/earnings-estimates
      ✓ should return earnings estimates for valid ticker (5 ms)
      ✓ should handle case insensitive ticker symbols (5 ms)
    GET /api/analysts/:ticker/revenue-estimates
      ✕ should get revenue estimates for valid ticker (4 ms)
    GET /api/analysts/:ticker/earnings-history
      ✓ should get earnings history for valid ticker (3 ms)
    GET /api/analysts/:ticker/eps-revisions
      ✕ should get EPS revisions for valid ticker (5 ms)
      ✕ should handle database errors for EPS revisions (4 ms)
    GET /api/analysts/:ticker/eps-trend
      ✓ should get EPS trend for valid ticker (3 ms)
    GET /api/analysts/:ticker/growth-estimates
      ✕ should get growth estimates for valid ticker (6 ms)
    GET /api/analysts/:ticker/overview
      ✓ should get comprehensive analyst overview (4 ms)
      ✓ should handle database errors for overview (4 ms)
    GET /api/analysts/recent-actions
      ✕ should get recent analyst actions (5 ms)
      ✕ should handle no recent actions found (4 ms)
      ✕ should handle limit parameter (4 ms)
    GET /api/analysts/recommendations/:symbol
      ✓ should get analyst recommendations for valid symbol (6 ms)
      ✓ should handle no recommendations found (5 ms)
      ✓ should handle database errors for recommendations (5 ms)
    GET /api/analysts/targets/:symbol
      ✓ should get price targets (placeholder implementation) (6 ms)
    GET /api/analysts/downgrades
      ✕ should return analyst downgrades with default parameters (4 ms)
      ✕ should support filtering by symbol (3 ms)
      ✕ should support filtering by analyst firm (5 ms)
      ✕ should support filtering by severity (4 ms)
      ✕ should support minimum price impact filtering (3 ms)
      ✕ should support different timeframe options (5 ms)
      ✕ should handle errors gracefully (4 ms)
    GET /api/analysts/consensus/:symbol
      ✓ should get consensus analysis (placeholder implementation) (5 ms)
    Edge Cases and Error Handling
      ✓ should handle invalid ticker symbols gracefully (5 ms)
      ✕ should handle special characters in ticker symbols (4 ms)
      ✕ should handle very large page numbers (5 ms)
      ✓ should handle zero or negative page numbers (4 ms)
      ✓ should handle null database results gracefully (4 ms)
    Performance Testing
      ✓ should handle multiple concurrent requests (32 ms)
      ✕ should handle large dataset responses efficiently (6 ms)
    Response Format Validation
      ✓ should return consistent JSON response format (4 ms)
      ✓ should include timestamp in ISO format (4 ms)
      ✕ should maintain consistent error response format (5 ms)

  ● Analysts Route - Comprehensive Unit Tests › GET /api/analysts/:ticker/revenue-estimates › should get revenue estimates for valid ticker

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "er.revenue as actual",
    + "
          SELECT 
            ('Q' || COALESCE(er.quarter::text, '1') || ' ' || COALESCE(EXTRACT(YEAR FROM COALESCE(er.report_date, CURRENT_DATE))::text, EXTRACT(YEAR FROM CURRENT_DATE)::text)) as period,
            NULL as estimate,
            NULL as actual,
            NULL as difference,
            NULL,
            er.report_date as reported_date
          FROM earnings_reports er
          WHERE UPPER(er.symbol) = UPPER($1)
          ORDER BY er.report_date DESC
          LIMIT 8
        ",
      ["AAPL"],

    Number of calls: 1

      145 |       expect(response.body.estimates).toHaveLength(1);
      146 |       expect(response.body.estimates[0].actual).toBe(119300000000);
    > 147 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      148 |         expect.stringContaining("er.revenue as actual"),
      149 |         ["AAPL"]
      150 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/analysts.test.js:147:25)

  ● Analysts Route - Comprehensive Unit Tests › GET /api/analysts/:ticker/eps-revisions › should get EPS revisions for valid ticker

    expect(received).toHaveLength(expected)

    Expected length: 1
    Received length: 0
    Received array:  []

      210 |
      211 |       expect(response.body.ticker).toBe("AAPL");
    > 212 |       expect(response.body.data).toHaveLength(1);
          |                                  ^
      213 |       expect(response.body.data[0].up_last30days).toBe(3);
      214 |       expect(response.body.metadata.count).toBe(1);
      215 |       expect(response.body.metadata.timestamp).toBeDefined();

      at Object.toHaveLength (tests/unit/routes/analysts.test.js:212:34)

  ● Analysts Route - Comprehensive Unit Tests › GET /api/analysts/:ticker/eps-revisions › should handle database errors for EPS revisions

    expected 500 "Internal Server Error", got 200 "OK"

      221 |       const response = await request(app)
      222 |         .get("/api/analysts/AAPL/eps-revisions")
    > 223 |         .expect(500);
          |          ^
      224 |
      225 |       expect(response.body.success).toBe(false);
      226 |       expect(response.body.error).toContain("Failed to fetch EPS revisions");

      at Object.expect (tests/unit/routes/analysts.test.js:223:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Analysts Route - Comprehensive Unit Tests › GET /api/analysts/:ticker/growth-estimates › should get growth estimates for valid ticker

    expect(received).toBe(expected) // Object.is equality

    Expected: "AAPL"
    Received: undefined

      277 |       expect(response.body.ticker).toBe("AAPL");
      278 |       expect(typeof response.body.data).toBe("object");
    > 279 |       expect(response.body.data.symbol).toBe("AAPL");
          |                                         ^
      280 |       expect(response.body.data.earnings_growth).toBeDefined();
      281 |       expect(response.body.data.eps_growth_from_financials).toBeDefined();
      282 |     });

      at Object.toBe (tests/unit/routes/analysts.test.js:279:41)

  ● Analysts Route - Comprehensive Unit Tests › GET /api/analysts/recent-actions › should get recent analyst actions

    expect(received).toHaveLength(expected)

    Expected length: 1
    Received length: 0
    Received array:  []

      385 |         .expect(200);
      386 |
    > 387 |       expect(response.body.data).toHaveLength(1);
          |                                  ^
      388 |       expect(response.body.data[0].action).toBe("Upgrade");
      389 |       expect(response.body.summary.date).toBe("2024-01-15");
      390 |       expect(response.body.summary.total_actions).toBe(1);

      at Object.toHaveLength (tests/unit/routes/analysts.test.js:387:34)

  ● Analysts Route - Comprehensive Unit Tests › GET /api/analysts/recent-actions › should handle no recent actions found

    expect(received).toBe(expected) // Object.is equality

    Expected: "No analyst actions found"
    Received: "Analyst data not yet loaded"

      401 |
      402 |       expect(response.body.data).toEqual([]);
    > 403 |       expect(response.body.message).toBe("No analyst actions found");
          |                                     ^
      404 |       expect(response.body.summary.total_actions).toBe(0);
      405 |     });
      406 |

      at Object.toBe (tests/unit/routes/analysts.test.js:403:37)

  ● Analysts Route - Comprehensive Unit Tests › GET /api/analysts/recent-actions › should handle limit parameter

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "LIMIT $2",
    + "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ",
      Array [
    -   "2024-01-15",
    -   5,
    +   "analyst_upgrade_downgrade",
      ],

    Number of calls: 1

      417 |         .expect(200);
      418 |
    > 419 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      420 |         expect.stringContaining("LIMIT $2"),
      421 |         ["2024-01-15", 5]
      422 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/analysts.test.js:419:25)

  ● Analysts Route - Comprehensive Unit Tests › GET /api/analysts/downgrades › should return analyst downgrades with default parameters

    expected 200 "OK", got 500 "Internal Server Error"

      503 |       const response = await request(app)
      504 |         .get("/api/analysts/downgrades")
    > 505 |         .expect(200);
          |          ^
      506 |
      507 |       expect(response.body).toMatchObject({
      508 |         success: true,

      at Object.expect (tests/unit/routes/analysts.test.js:505:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Analysts Route - Comprehensive Unit Tests › GET /api/analysts/downgrades › should support filtering by symbol

    expected 200 "OK", got 500 "Internal Server Error"

      584 |       const response = await request(app)
      585 |         .get("/api/analysts/downgrades?symbol=AAPL&limit=10")
    > 586 |         .expect(200);
          |          ^
      587 |
      588 |       expect(response.body.filters).toMatchObject({
      589 |         symbol: "AAPL",

      at Object.expect (tests/unit/routes/analysts.test.js:586:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Analysts Route - Comprehensive Unit Tests › GET /api/analysts/downgrades › should support filtering by analyst firm

    expected 200 "OK", got 500 "Internal Server Error"

      602 |       const response = await request(app)
      603 |         .get("/api/analysts/downgrades?analyst_firm=Goldman Sachs&timeframe=7d")
    > 604 |         .expect(200);
          |          ^
      605 |
      606 |       expect(response.body.filters).toMatchObject({
      607 |         analyst_firm: "Goldman Sachs",

      at Object.expect (tests/unit/routes/analysts.test.js:604:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Analysts Route - Comprehensive Unit Tests › GET /api/analysts/downgrades › should support filtering by severity

    expected 200 "OK", got 500 "Internal Server Error"

      620 |       const response = await request(app)
      621 |         .get("/api/analysts/downgrades?severity=severe&limit=20")
    > 622 |         .expect(200);
          |          ^
      623 |
      624 |       expect(response.body.filters).toMatchObject({
      625 |         severity: "severe",

      at Object.expect (tests/unit/routes/analysts.test.js:622:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Analysts Route - Comprehensive Unit Tests › GET /api/analysts/downgrades › should support minimum price impact filtering

    expected 200 "OK", got 500 "Internal Server Error"

      638 |       const response = await request(app)
      639 |         .get("/api/analysts/downgrades?min_price_impact=0.05")
    > 640 |         .expect(200);
          |          ^
      641 |
      642 |       expect(response.body.filters).toMatchObject({
      643 |         min_price_impact: 0.05,

      at Object.expect (tests/unit/routes/analysts.test.js:640:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Analysts Route - Comprehensive Unit Tests › GET /api/analysts/downgrades › should support different timeframe options

    expected 200 "OK", got 500 "Internal Server Error"

      660 |         const response = await request(app)
      661 |           .get(`/api/analysts/downgrades?timeframe=${timeframe}&limit=5`)
    > 662 |           .expect(200);
          |            ^
      663 |
      664 |         expect(response.body.filters.timeframe).toBe(timeframe);
      665 |         expect(response.body.data.analytics.timeframe_analyzed).toBe(timeframe);

      at Object.expect (tests/unit/routes/analysts.test.js:662:12)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Analysts Route - Comprehensive Unit Tests › GET /api/analysts/downgrades › should handle errors gracefully

    expected 200 "OK", got 500 "Internal Server Error"

      671 |       const response = await request(app)
      672 |         .get("/api/analysts/downgrades?limit=invalid")
    > 673 |         .expect(200); // Our implementation handles invalid limit gracefully
          |          ^
      674 |
      675 |       expect(response.body).toHaveProperty("success", true);
      676 |       expect(response.body).toHaveProperty("data");

      at Object.expect (tests/unit/routes/analysts.test.js:673:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Analysts Route - Comprehensive Unit Tests › Edge Cases and Error Handling › should handle special characters in ticker symbols

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "UPPER($1)",
    + "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ",
      Array [
    -   "BRK.B",
    +   "earnings_estimates",
      ],

    Number of calls: 1

      711 |         .expect(200);
      712 |
    > 713 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      714 |         expect.stringContaining("UPPER($1)"),
      715 |         ["BRK.B"]
      716 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/analysts.test.js:713:25)

  ● Analysts Route - Comprehensive Unit Tests › Edge Cases and Error Handling › should handle very large page numbers

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      731 |       expect(response.body.pagination?.page || 1).toBe(999999);
      732 |       expect(response.body.pagination.hasNext).toBe(false);
    > 733 |       expect(response.body.pagination.hasPrev).toBe(true);
          |                                                ^
      734 |     });
      735 |
      736 |     test("should handle zero or negative page numbers", async () => {

      at Object.toBe (tests/unit/routes/analysts.test.js:733:48)

  ● Analysts Route - Comprehensive Unit Tests › Performance Testing › should handle large dataset responses efficiently

    expect(received).toHaveLength(expected)

    Expected length: 1000
    Received length: 0
    Received array:  []

      795 |       const endTime = Date.now();
      796 |
    > 797 |       expect(response.body.estimates).toHaveLength(1000);
          |                                       ^
      798 |       expect(endTime - startTime).toBeLessThan(5000); // Should complete within 5 seconds
      799 |     });
      800 |   });

      at Object.toHaveLength (tests/unit/routes/analysts.test.js:797:39)

  ● Analysts Route - Comprehensive Unit Tests › Response Format Validation › should maintain consistent error response format

    expected 500 "Internal Server Error", got 200 "OK"

      824 |       const response = await request(app)
      825 |         .get("/api/analysts/upgrades")
    > 826 |         .expect(500);
          |          ^
      827 |
      828 |       expect(response.body.success).toBe(false);
      829 |       expect(response.body.error).toBeDefined();

      at Object.expect (tests/unit/routes/analysts.test.js:826:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  console.log
    🚀 Starting API contract tests against: http://localhost:3001

      at Object.log (tests/contract/api-contracts.test.js:11:13)

  console.log
    🔍 Testing GET /api/health...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/health - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/portfolio...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/portfolio - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/market/overview...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/market/overview - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/diagnostics/database-connectivity...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/diagnostics/database-connectivity - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/health...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/health - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/portfolio...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/portfolio - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/portfolio/positions...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/portfolio/positions - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/portfolio/performance...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/portfolio/performance - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/market/overview...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/market/overview - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/alerts/active...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/alerts/active - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/calendar/earnings...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/calendar/earnings - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/diagnostics...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/diagnostics - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/diagnostics/database-connectivity...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/diagnostics/database-connectivity - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/backtest/strategies...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/backtest/strategies - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/portfolio/holdings...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/portfolio/holdings - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/portfolio/value...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/portfolio/value - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/portfolio/analytics...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/portfolio/analytics - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/portfolio/transactions...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/portfolio/transactions - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/portfolio/summary...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/portfolio/summary - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/portfolio/metrics...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/portfolio/metrics - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/market...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/market - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/stocks...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/stocks - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/technical...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/technical - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/live-data...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/live-data - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/live-data/status...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/live-data/status - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/analytics...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/analytics - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/performance...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/performance - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/risk...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/risk - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/news...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/news - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/signals...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/signals - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/trading...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/trading - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/orders...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/orders - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/watchlist...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/watchlist - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/screener...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/screener - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/scores...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/scores - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/metrics...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/metrics - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/sectors...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/sectors - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/sentiment...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/sentiment - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/etf...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/etf - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    Running comprehensive site functionality tests...

      at Object.log (tests/contract/api-contracts.test.js:55:15)

  console.log
    
    🌐 Running site functionality tests...

      at log (tests/contract/contract-test-runner.js:509:11)

  console.log
    
    📋 Testing workflow: Portfolio Dashboard Load

      at log (tests/contract/contract-test-runner.js:535:13)

  console.log
    🔍 Testing GET /api/health...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/health - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/portfolio...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/portfolio - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/portfolio/positions...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/portfolio/positions - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    ❌ Workflow 'Portfolio Dashboard Load' has failures

      at log (tests/contract/contract-test-runner.js:549:15)

  console.log
    
    📋 Testing workflow: Market Data Access

      at log (tests/contract/contract-test-runner.js:535:13)

  console.log
    🔍 Testing GET /api/market/overview...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/market/overview - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/calendar/earnings...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/calendar/earnings - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    ❌ Workflow 'Market Data Access' has failures

      at log (tests/contract/contract-test-runner.js:549:15)

  console.log
    
    📋 Testing workflow: System Diagnostics

      at log (tests/contract/contract-test-runner.js:535:13)

  console.log
    🔍 Testing GET /api/diagnostics/database-connectivity...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/diagnostics/database-connectivity - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    🔍 Testing GET /api/diagnostics...

      at log (tests/contract/contract-test-runner.js:454:13)

  console.log
    ❌ GET /api/diagnostics - Request failed: connect ECONNREFUSED 127.0.0.1:3001

      at log (tests/contract/contract-test-runner.js:493:13)

  console.log
    ❌ Workflow 'System Diagnostics' has failures

      at log (tests/contract/contract-test-runner.js:549:15)

FAIL tests/contract/api-contracts.test.js
  API Contract Tests
    Critical Endpoints
      ✕ Health endpoint contract (48 ms)
      ✕ Portfolio endpoint contract (4 ms)
      ✕ Market overview endpoint contract (6 ms)
      ✕ Database connectivity contract (3 ms)
    All API Contracts
      ✓ GET /api/health contract validation (3 ms)
      ✓ GET /api/portfolio contract validation (3 ms)
      ✓ GET /api/portfolio/positions contract validation (5 ms)
      ✓ GET /api/portfolio/performance contract validation (3 ms)
      ✓ GET /api/market/overview contract validation (3 ms)
      ✓ GET /api/alerts/active contract validation (3 ms)
      ✓ GET /api/calendar/earnings contract validation (3 ms)
      ✓ GET /api/diagnostics contract validation (4 ms)
      ✓ GET /api/diagnostics/database-connectivity contract validation (2 ms)
      ✓ GET /api/backtest/strategies contract validation (3 ms)
      ✓ GET /api/portfolio/holdings contract validation (3 ms)
      ✓ GET /api/portfolio/value contract validation (3 ms)
      ✓ GET /api/portfolio/analytics contract validation (4 ms)
      ✓ GET /api/portfolio/transactions contract validation (3 ms)
      ✓ GET /api/portfolio/summary contract validation (2 ms)
      ✓ GET /api/portfolio/metrics contract validation (3 ms)
      ✓ GET /api/market contract validation (3 ms)
      ✓ GET /api/stocks contract validation (4 ms)
      ✓ GET /api/technical contract validation (3 ms)
      ✓ GET /api/live-data contract validation (2 ms)
      ✓ GET /api/live-data/status contract validation (5 ms)
      ✓ GET /api/analytics contract validation (3 ms)
      ✓ GET /api/performance contract validation (4 ms)
      ✓ GET /api/risk contract validation (2 ms)
      ✓ GET /api/news contract validation (3 ms)
      ✓ GET /api/signals contract validation (3 ms)
      ✓ GET /api/trading contract validation (3 ms)
      ✓ GET /api/orders contract validation (4 ms)
      ✓ GET /api/watchlist contract validation (3 ms)
      ✓ GET /api/screener contract validation (2 ms)
      ✓ GET /api/scores contract validation (2 ms)
      ✓ GET /api/metrics contract validation (3 ms)
      ✓ GET /api/sectors contract validation (4 ms)
      ✓ GET /api/sentiment contract validation (3 ms)
      ✓ GET /api/etf contract validation (3 ms)
    Site Functionality
      ✓ Complete site functionality validation (20 ms)
  Contract Validation Functions
    ✓ Contract validation logic
    ✓ Contract validation with missing fields

  ● API Contract Tests › Critical Endpoints › Health endpoint contract

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      16 |     test("Health endpoint contract", async () => {
      17 |       const result = await runContractTest("GET /api/health", baseURL);
    > 18 |       expect(result).toBe(true);
         |                      ^
      19 |     });
      20 |
      21 |     test("Portfolio endpoint contract", async () => {

      at Object.toBe (tests/contract/api-contracts.test.js:18:22)

  ● API Contract Tests › Critical Endpoints › Portfolio endpoint contract

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      21 |     test("Portfolio endpoint contract", async () => {
      22 |       const result = await runContractTest("GET /api/portfolio", baseURL);
    > 23 |       expect(result).toBe(true);
         |                      ^
      24 |     });
      25 |
      26 |     test("Market overview endpoint contract", async () => {

      at Object.toBe (tests/contract/api-contracts.test.js:23:22)

  ● API Contract Tests › Critical Endpoints › Market overview endpoint contract

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      26 |     test("Market overview endpoint contract", async () => {
      27 |       const result = await runContractTest("GET /api/market/overview", baseURL);
    > 28 |       expect(result).toBe(true);
         |                      ^
      29 |     });
      30 |
      31 |     test("Database connectivity contract", async () => {

      at Object.toBe (tests/contract/api-contracts.test.js:28:22)

  ● API Contract Tests › Critical Endpoints › Database connectivity contract

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      34 |         baseURL
      35 |       );
    > 36 |       expect(result).toBe(true);
         |                      ^
      37 |     });
      38 |   });
      39 |

      at Object.toBe (tests/contract/api-contracts.test.js:36:22)

  console.log
    JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    Processing request: GET /api/earnings

      at log (index.js:429:11)

  console.log
    Initializing database connection...

      at log (index.js:388:13)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

  console.log
    Database connection established successfully

      at log (index.js:414:17)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    📈 Earnings data requested

      at log (routes/earnings.js:35:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:43 +0000] "GET /api/earnings HTTP/1.1" 200 2618 "-" "-"
  console.log
    Processing request: GET /api/earnings/AAPL

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    📈 Earnings details requested for symbol: AAPL

      at log (routes/earnings.js:400:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:43 +0000] "GET /api/earnings/AAPL HTTP/1.1" 200 547 "-" "-"
  console.log
    Processing request: GET /api/earnings

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    📈 Earnings data requested

      at log (routes/earnings.js:35:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:43 +0000] "GET /api/earnings?period=upcoming&limit=5 HTTP/1.1" 200 2204 "-" "-"
  console.log
    Processing request: GET /api/calendar/earnings

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    📅 Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:43 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 259 "-" "-"
  console.log
    Processing request: GET /api/calendar/earnings-history

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:43 +0000] "GET /api/calendar/earnings-history HTTP/1.1" 200 2617 "-" "-"
  console.log
    Processing request: GET /api/calendar/earnings-estimates

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:43 +0000] "GET /api/calendar/earnings-estimates HTTP/1.1" 200 1442 "-" "-"
  console.log
    Processing request: GET /api/earnings/INVALID_SYMBOL

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    📈 Earnings details requested for symbol: INVALID_SYMBOL

      at log (routes/earnings.js:400:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:43 +0000] "GET /api/earnings/INVALID_SYMBOL HTTP/1.1" 404 126 "-" "-"
FAIL tests/integration/routes/earnings.integration.test.js
  Earnings Data Integration
    Earnings Calendar (Delegated)
      ✓ should delegate to calendar earnings endpoint (52 ms)
      ✕ should delegate symbol-specific requests to calendar (10 ms)
      ✓ should handle query parameters for delegation (10 ms)
    Direct Calendar Earnings Access
      ✕ should access earnings via calendar route directly (16 ms)
      ✓ should access earnings history via calendar route (21 ms)
      ✓ should access earnings estimates via calendar route (10 ms)
    Error Handling
      ✓ should handle delegation errors gracefully (9 ms)

  ● Earnings Data Integration › Earnings Calendar (Delegated) › should delegate symbol-specific requests to calendar

    expect(received).toHaveProperty(path)

    Expected path: "earnings"
    Received path: []

    Received value: {"count": 2, "data": [{"eps_actual": "1.52", "eps_difference": null, "eps_estimate": "1.45", "last_updated": "2025-09-26T17:44:32.940Z", "quarter": "2025-09-26T05:00:00.000Z", "report_date": "2025-09-26T05:00:00.000Z", "surprise_percent": "4.8", "symbol": "AAPL"}, {"eps_actual": "2.18", "eps_difference": "0.08", "eps_estimate": "2.10", "last_updated": "2025-09-25T03:26:22.135Z", "quarter": "2024-01-15T06:00:00.000Z", "report_date": "2024-01-15T06:00:00.000Z", "surprise_percent": "3.81", "symbol": "AAPL"}], "success": true, "symbol": "AAPL", "timestamp": "2025-09-27T07:55:43.593Z"}

      28 |
      29 |       if (response.status === 200) {
    > 30 |         expect(response.body).toHaveProperty("earnings");
         |                               ^
      31 |         expect(Array.isArray(response.body.earnings)).toBe(true);
      32 |       }
      33 |     });

      at Object.toHaveProperty (tests/integration/routes/earnings.integration.test.js:30:31)

  ● Earnings Data Integration › Direct Calendar Earnings Access › should access earnings via calendar route directly

    expect(received).toHaveProperty(path)

    Expected path: "earnings"
    Received path: []

    Received value: {"data": {"earnings": [], "grouped_by_date": {}, "summary": {"completed_reports": 0, "message": "No earnings data found for the specified criteria", "sectors_represented": 0, "total_earnings": 0, "upcoming_reports": 0}}, "success": true, "timestamp": "2025-09-27T07:55:43.620Z"}

      56 |
      57 |       if (response.status === 200) {
    > 58 |         expect(response.body).toHaveProperty("earnings");
         |                               ^
      59 |         expect(Array.isArray(response.body.earnings)).toBe(true);
      60 |       }
      61 |     });

      at Object.toHaveProperty (tests/integration/routes/earnings.integration.test.js:58:31)

  console.log
    JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    Processing request: GET /api/analysts/recommendations/AAPL

      at log (index.js:429:11)

  console.log
    Initializing database connection...

      at log (index.js:388:13)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

  console.log
    Database connection established successfully

      at log (index.js:414:17)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    📊 Analyst recommendations requested for AAPL

      at log (routes/analysts.js:851:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:44 +0000] "GET /api/analysts/recommendations/AAPL HTTP/1.1" 404 123 "-" "-"
  console.log
    Processing request: GET /api/analysts/recommendations/INVALID123

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    📊 Analyst recommendations requested for INVALID123

      at log (routes/analysts.js:851:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:44 +0000] "GET /api/analysts/recommendations/INVALID123 HTTP/1.1" 404 135 "-" "-"
  console.log
    Processing request: GET /api/analysts/coverage/AAPL

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:44 +0000] "GET /api/analysts/coverage/AAPL HTTP/1.1" 404 644 "-" "-"
  console.log
    Processing request: GET /api/analysts/price-targets/AAPL

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:44 +0000] "GET /api/analysts/price-targets/AAPL HTTP/1.1" 404 659 "-" "-"
  console.log
    Processing request: GET /api/analysts/consensus/AAPL

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    🤝 Analyst consensus requested for AAPL

      at log (routes/analysts.js:1342:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:44 +0000] "GET /api/analysts/consensus/AAPL HTTP/1.1" 200 337 "-" "-"
  console.log
    Processing request: GET /api/analysts/research

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.error
    Database query error: {
      error: 'column "firm" does not exist',
      query: '\n' +
        '      SELECT\n' +
        '        id, symbol, firm, title, rating, price_target,\n' +
        '        published_date, analyst...',
      params: '2 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/analysts.js:1569:20

  console.warn
    Database query error (returning null for tests): column "firm" does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at routes/analysts.js:1569:20

  console.error
    Research reports error: TypeError: Cannot read properties of null (reading 'rows')
        at rows (/home/stocks/algo/webapp/lambda/routes/analysts.js:1571:16)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)

      1596 |     });
      1597 |   } catch (error) {
    > 1598 |     console.error("Research reports error:", error);
           |             ^
      1599 |     res.status(500).json({
      1600 |       success: false,
      1601 |       error: "Failed to fetch research reports",

      at error (routes/analysts.js:1598:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:44 +0000] "GET /api/analysts/research?symbol=AAPL&limit=10 HTTP/1.1" 500 120 "-" "-"
  console.log
    Processing request: GET /api/analysts/research

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.error
    Database query error: {
      error: 'column "firm" does not exist',
      query: '\n' +
        '      SELECT\n' +
        '        id, symbol, firm, title, rating, price_target,\n' +
        '        published_date, analyst...',
      params: '2 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/analysts.js:1569:20

  console.warn
    Database query error (returning null for tests): column "firm" does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at routes/analysts.js:1569:20

  console.error
    Research reports error: TypeError: Cannot read properties of null (reading 'rows')
        at rows (/home/stocks/algo/webapp/lambda/routes/analysts.js:1571:16)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)

      1596 |     });
      1597 |   } catch (error) {
    > 1598 |     console.error("Research reports error:", error);
           |             ^
      1599 |     res.status(500).json({
      1600 |       success: false,
      1601 |       error: "Failed to fetch research reports",

      at error (routes/analysts.js:1598:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:44 +0000] "GET /api/analysts/research?firm=Goldman&limit=5 HTTP/1.1" 500 120 "-" "-"
FAIL tests/integration/analytics/analysts.test.js
  Analysts API
    Analyst Recommendations
      ✕ should retrieve analyst recommendations for stock (28 ms)
      ✓ should handle invalid stock symbols (7 ms)
    Analyst Coverage
      ✕ should retrieve analyst coverage for stock (7 ms)
    Price Targets
      ✕ should retrieve price targets for stock (5 ms)
      ✕ should provide consensus price targets (6 ms)
    Analyst Research
      ✕ should retrieve research reports (25 ms)
      ✕ should filter research by analyst firm (22 ms)

  ● Analysts API › Analyst Recommendations › should retrieve analyst recommendations for stock

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      15 |       );
      16 |
    > 17 |       expect(response.status).toBe(200);
         |                               ^
      18 |
      19 |       if (response.status === 200) {
      20 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/analysts.test.js:17:31)

  ● Analysts API › Analyst Coverage › should retrieve analyst coverage for stock

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      51 |       const response = await request(app).get("/api/analysts/coverage/AAPL");
      52 |
    > 53 |       expect(response.status).toBe(200);
         |                               ^
      54 |
      55 |       if (response.status === 200) {
      56 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/analysts.test.js:53:31)

  ● Analysts API › Price Targets › should retrieve price targets for stock

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      80 |       );
      81 |
    > 82 |       expect(response.status).toBe(200);
         |                               ^
      83 |
      84 |       if (response.status === 200) {
      85 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/analysts.test.js:82:31)

  ● Analysts API › Price Targets › should provide consensus price targets

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      116 |         );
      117 |
    > 118 |         expect(hasConsensusData).toBe(true);
          |                                  ^
      119 |       }
      120 |     });
      121 |   });

      at Object.toBe (tests/integration/analytics/analysts.test.js:118:34)

  ● Analysts API › Analyst Research › should retrieve research reports

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      127 |       );
      128 |
    > 129 |       expect(response.status).toBe(200);
          |                               ^
      130 |
      131 |       if (response.status === 200) {
      132 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/analysts.test.js:129:31)

  ● Analysts API › Analyst Research › should filter research by analyst firm

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      147 |       );
      148 |
    > 149 |       expect(response.status).toBe(200);
          |                               ^
      150 |
      151 |       if (response.status === 200) {
      152 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/analysts.test.js:149:31)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.log
    JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    💰 Current price requested for AAPL

      at log (routes/price.js:510:13)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

  console.log
    ❌ No data found for AAPL in price_daily table

      at log (routes/price.js:552:15)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:44 +0000] "GET /api/price/AAPL HTTP/1.1" 404 102 "-" "-"
  console.log
    💰 Current price requested for INVALID

      at log (routes/price.js:510:13)

  console.log
    ❌ Invalid symbol format: INVALID

      at log (routes/price.js:540:17)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:44 +0000] "GET /api/price/INVALID HTTP/1.1" 404 131 "-" "-"
  console.log
    📈 Price history requested for AAPL (period: 1Y)

      at log (routes/price.js:603:13)

  console.error
    📊 No historical data found for AAPL

      630 |
      631 |     if (!result || !result.rows || result.rows.length === 0) {
    > 632 |       console.error(
          |               ^
      633 |         `📊 No historical data found for ${symbolUpper}`
      634 |       );
      635 |

      at error (routes/price.js:632:15)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:44 +0000] "GET /api/price/AAPL/history HTTP/1.1" 404 151 "-" "-"
  console.log
    📈 Price history requested for AAPL (period: 1M)

      at log (routes/price.js:603:13)

  console.error
    📊 No historical data found for AAPL

      630 |
      631 |     if (!result || !result.rows || result.rows.length === 0) {
    > 632 |       console.error(
          |               ^
      633 |         `📊 No historical data found for ${symbolUpper}`
      634 |       );
      635 |

      at error (routes/price.js:632:15)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:44 +0000] "GET /api/price/AAPL/history?period=1M HTTP/1.1" 404 151 "-" "-"
  console.log
    ⏰ Intraday data requested for AAPL (interval: 5m)

      at log (routes/price.js:673:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:44 +0000] "GET /api/price/AAPL/intraday HTTP/1.1" 404 121 "-" "-"
  console.log
    ⏰ Intraday data requested for AAPL (interval: 5min)

      at log (routes/price.js:673:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:44 +0000] "GET /api/price/AAPL/intraday?interval=5min HTTP/1.1" 404 121 "-" "-"
  console.log
    📊 Batch price request for 3 symbols

      at log (routes/price.js:755:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:44 +0000] "POST /api/price/batch HTTP/1.1" 200 472 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:07:55:44 +0000] "POST /api/price/batch HTTP/1.1" 400 92 "-" "-"
  console.log
    🚨 Price alerts requested - symbol: all, status: all, type: all

      at log (routes/price.js:70:13)

  console.log
    🔔 Price alerts requested for symbol: undefined, user: undefined

      at log (routes/price.js:145:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:44 +0000] "GET /api/price/alerts HTTP/1.1" 200 8037 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:07:55:44 +0000] "POST /api/price/alerts HTTP/1.1" 400 179 "-" "-"
FAIL tests/integration/routes/price.integration.test.js
  Price Routes
    GET /api/price/:symbol
      ✕ should return current price for symbol (28 ms)
      ✓ should handle invalid symbol (12 ms)
    GET /api/price/:symbol/history
      ✕ should return price history (9 ms)
      ✕ should handle period parameter (11 ms)
    GET /api/price/:symbol/intraday
      ✕ should return intraday prices (9 ms)
      ✕ should handle interval parameter (8 ms)
    POST /api/price/batch
      ✓ should return prices for multiple symbols (11 ms)
      ✓ should validate symbols array (4 ms)
    GET /api/price/alerts
      ✓ should return price alerts (8 ms)
    POST /api/price/alerts
      ✓ should create price alert (6 ms)

  ● Price Routes › GET /api/price/:symbol › should return current price for symbol

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      21 |       const response = await request(app).get("/api/price/AAPL");
      22 |
    > 23 |       expect(response.status).toBe(200);
         |                               ^
      24 |       expect(response.body.success).toBe(true);
      25 |       expect(response.body.data).toHaveProperty("symbol");
      26 |       expect(response.body.data).toHaveProperty("price");

      at Object.toBe (tests/integration/routes/price.integration.test.js:23:31)

  ● Price Routes › GET /api/price/:symbol/history › should return price history

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      38 |       const response = await request(app).get("/api/price/AAPL/history");
      39 |
    > 40 |       expect(response.status).toBe(200);
         |                               ^
      41 |       expect(response.body.success).toBe(true);
      42 |       expect(Array.isArray(response.body.data)).toBe(true);
      43 |     });

      at Object.toBe (tests/integration/routes/price.integration.test.js:40:31)

  ● Price Routes › GET /api/price/:symbol/history › should handle period parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      48 |       );
      49 |
    > 50 |       expect(response.status).toBe(200);
         |                               ^
      51 |       expect(response.body.success).toBe(true);
      52 |     });
      53 |   });

      at Object.toBe (tests/integration/routes/price.integration.test.js:50:31)

  ● Price Routes › GET /api/price/:symbol/intraday › should return intraday prices

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      57 |       const response = await request(app).get("/api/price/AAPL/intraday");
      58 |
    > 59 |       expect(response.status).toBe(200);
         |                               ^
      60 |       expect(response.body.success).toBe(true);
      61 |       expect(Array.isArray(response.body.data)).toBe(true);
      62 |     });

      at Object.toBe (tests/integration/routes/price.integration.test.js:59:31)

  ● Price Routes › GET /api/price/:symbol/intraday › should handle interval parameter

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      67 |       );
      68 |
    > 69 |       expect(response.status).toBe(200);
         |                               ^
      70 |       expect(response.body.success).toBe(true);
      71 |     });
      72 |   });

      at Object.toBe (tests/integration/routes/price.integration.test.js:69:31)

  console.error
    No database configuration available. Application cannot function without database.

      251 |           "Database configuration missing. Please set DB environment variables or DB_SECRET_ARN."
      252 |         );
    > 253 |         console.error(
          |                 ^
      254 |           "No database configuration available. Application cannot function without database."
      255 |         );
      256 |         dbInitialized = false;

      at error (utils/database.js:253:17)

  console.log
    JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:45 +0000] "GET /api/watchlist HTTP/1.1" 200 971 "-" "-"
  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:45 +0000] "POST /api/watchlist HTTP/1.1" 400 44 "-" "-"
  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:45 +0000] "POST /api/watchlist HTTP/1.1" 400 44 "-" "-"
  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:45 +0000] "DELETE /api/watchlist/AAPL HTTP/1.1" 400 203 "-" "-"
  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:45 +0000] "GET /api/watchlist/1 HTTP/1.1" 404 47 "-" "-"
  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:45 +0000] "PUT /api/watchlist/AAPL HTTP/1.1" 400 178 "-" "-"
  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

  console.log
    🎯 Watchlist performance endpoint called

      at log (routes/watchlist.js:363:11)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:45 +0000] "GET /api/watchlist/performance HTTP/1.1" 200 261 "-" "-"
  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:45 +0000] "GET /api/watchlist/alerts HTTP/1.1" 200 131 "-" "-"
  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

  console.log
    📥 Watchlist import requested for user: dev-user-bypass

      at log (routes/watchlist.js:479:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:45 +0000] "POST /api/watchlist/import HTTP/1.1" 400 93 "-" "-"
  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:45 +0000] "GET /api/watchlist/export HTTP/1.1" 200 131 "-" "-"
FAIL tests/integration/routes/watchlist.integration.test.js
  Watchlist Routes
    GET /api/watchlist
      ✓ should return user watchlist (26 ms)
    POST /api/watchlist
      ✓ should return validation error for missing name (8 ms)
      ✓ should validate required symbol (7 ms)
    DELETE /api/watchlist/:id
      ✓ should return validation error for invalid ID format (6 ms)
    GET /api/watchlist/:listId
      ✓ should return specific watchlist (9 ms)
    PUT /api/watchlist/:id
      ✓ should return validation error for invalid ID format (5 ms)
    GET /api/watchlist/performance
      ✕ should return watchlist performance (13 ms)
    GET /api/watchlist/alerts
      ✕ should return price alerts (6 ms)
    POST /api/watchlist/import
      ✕ should import watchlist from CSV (11 ms)
    GET /api/watchlist/export
      ✕ should export watchlist to CSV (8 ms)

  ● Watchlist Routes › GET /api/watchlist/performance › should return watchlist performance

    expect(received).toHaveProperty(path)

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      109 |       if (response.status === 200) {
      110 |         expect(response.body.success).toBe(true);
    > 111 |         expect(response.body.data).toHaveProperty("performance");
          |                                    ^
      112 |       }
      113 |     });
      114 |   });

      at Object.toHaveProperty (tests/integration/routes/watchlist.integration.test.js:111:36)

  ● Watchlist Routes › GET /api/watchlist/alerts › should return price alerts

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      124 |       if (response.status === 200) {
      125 |         expect(response.body.success).toBe(true);
    > 126 |         expect(Array.isArray(response.body.data)).toBe(true);
          |                                                   ^
      127 |       }
      128 |     });
      129 |   });

      at Object.toBe (tests/integration/routes/watchlist.integration.test.js:126:51)

  ● Watchlist Routes › POST /api/watchlist/import › should import watchlist from CSV

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 401, 422]

      138 |         .attach("file", Buffer.from(csvData), "watchlist.csv");
      139 |
    > 140 |       expect([200, 401, 422]).toContain(response.status);
          |                               ^
      141 |
      142 |       if (response.status === 200) {
      143 |         expect(response.body.success).toBe(true);

      at Object.toContain (tests/integration/routes/watchlist.integration.test.js:140:31)

  ● Watchlist Routes › GET /api/watchlist/export › should export watchlist to CSV

    expect(received).toContain(expected) // indexOf

    Expected substring: "text/csv"
    Received string:    "application/json; charset=utf-8"

      155 |
      156 |       if (response.status === 200) {
    > 157 |         expect(response.headers["content-type"]).toContain("text/csv");
          |                                                  ^
      158 |       }
      159 |     });
      160 |   });

      at Object.toContain (tests/integration/routes/watchlist.integration.test.js:157:50)

  console.log
    JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    Processing request: GET /api/recommendations

      at log (index.js:429:11)

  console.log
    Initializing database connection...

      at log (index.js:388:13)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

  console.log
    Database connection established successfully

      at log (index.js:414:17)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    🔧 Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

  console.log
    📊 Stock recommendations requested - symbol: all, category: all

      at log (routes/recommendations.js:20:15)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:45 +0000] "GET /api/recommendations HTTP/1.1" 200 2011 "-" "-"
  console.log
    Processing request: GET /api/recommendations

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    🔧 Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

  console.log
    📊 Stock recommendations requested - symbol: all, category: all

      at log (routes/recommendations.js:20:15)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:45 +0000] "GET /api/recommendations?type=buy&limit=10 HTTP/1.1" 200 2011 "-" "-"
  console.log
    Processing request: GET /api/recommendations/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:45 +0000] "GET /api/recommendations/sectors HTTP/1.1" 404 647 "-" "-"
  console.log
    Processing request: GET /api/recommendations/sectors/Technology

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:45 +0000] "GET /api/recommendations/sectors/Technology HTTP/1.1" 404 680 "-" "-"
  console.log
    Processing request: GET /api/recommendations/ai

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    🔧 Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

  console.log
    🤖 AI recommendations requested - symbol: all, risk: moderate, strategy: balanced

      at log (routes/recommendations.js:329:15)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:45 +0000] "GET /api/recommendations/ai?risk_tolerance=moderate&investment_horizon=long HTTP/1.1" 200 7862 "-" "-"
  console.log
    Processing request: GET /api/recommendations/allocation

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:45 +0000] "GET /api/recommendations/allocation HTTP/1.1" 404 656 "-" "-"
  console.log
    Processing request: GET /api/recommendations/similar/AAPL

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:45 +0000] "GET /api/recommendations/similar/AAPL HTTP/1.1" 404 662 "-" "-"
  console.log
    Processing request: GET /api/recommendations/alternatives

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:45 +0000] "GET /api/recommendations/alternatives HTTP/1.1" 404 662 "-" "-"
  console.log
    Processing request: GET /api/recommendations/performance

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:07:55:45 +0000] "GET /api/recommendations/performance HTTP/1.1" 404 659 "-" "-"
FAIL tests/integration/analytics/recommendations.test.js
  Recommendations API
    Stock Recommendations
      ✕ should retrieve personalized stock recommendations (33 ms)
      ✕ should filter recommendations by type (11 ms)
    Sector Recommendations
      ✕ should provide sector-based recommendations (6 ms)
      ✕ should get recommendations for specific sector (5 ms)
    AI-Generated Recommendations
      ✕ should provide AI-generated stock picks (10 ms)
      ✕ should generate portfolio allocation recommendations (5 ms)
    Similar Stocks
      ✕ should find similar stocks based on characteristics (5 ms)
      ✕ should recommend alternatives to current holdings (7 ms)
    Performance Tracking
      ✕ should track recommendation performance (6 ms)

  ● Recommendations API › Stock Recommendations › should retrieve personalized stock recommendations

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      19 |       if (response.status === 200) {
      20 |         expect(response.body).toHaveProperty("success", true);
    > 21 |         expect(Array.isArray(response.body.data)).toBe(true);
         |                                                   ^
      22 |
      23 |         if (response.body.data.length > 0) {
      24 |           const recommendation = response.body.data[0];

      at Object.toBe (tests/integration/analytics/recommendations.test.js:21:51)

  ● Recommendations API › Stock Recommendations › should filter recommendations by type

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      52 |       if (response.status === 200) {
      53 |         expect(response.body).toHaveProperty("success", true);
    > 54 |         expect(Array.isArray(response.body.data)).toBe(true);
         |                                                   ^
      55 |
      56 |         if (response.body.data.length > 0) {
      57 |           const recommendation = response.body.data[0];

      at Object.toBe (tests/integration/analytics/recommendations.test.js:54:51)

  ● Recommendations API › Sector Recommendations › should provide sector-based recommendations

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      66 |       const response = await request(app).get("/api/recommendations/sectors");
      67 |
    > 68 |       expect(response.status).toBe(200);
         |                               ^
      69 |
      70 |       if (response.status === 200) {
      71 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/recommendations.test.js:68:31)

  ● Recommendations API › Sector Recommendations › should get recommendations for specific sector

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      94 |       );
      95 |
    > 96 |       expect(response.status).toBe(200);
         |                               ^
      97 |
      98 |       if (response.status === 200) {
      99 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/recommendations.test.js:96:31)

  ● Recommendations API › AI-Generated Recommendations › should provide AI-generated stock picks

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      115 |       if (response.status === 200) {
      116 |         expect(response.body).toHaveProperty("success", true);
    > 117 |         expect(Array.isArray(response.body.data)).toBe(true);
          |                                                   ^
      118 |
      119 |         if (response.body.data.length > 0) {
      120 |           const aiRec = response.body.data[0];

      at Object.toBe (tests/integration/analytics/recommendations.test.js:117:51)

  ● Recommendations API › AI-Generated Recommendations › should generate portfolio allocation recommendations

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      131 |         .set("Authorization", "Bearer test-token");
      132 |
    > 133 |       expect(response.status).toBe(200);
          |                               ^
      134 |
      135 |       if (response.status === 200) {
      136 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/recommendations.test.js:133:31)

  ● Recommendations API › Similar Stocks › should find similar stocks based on characteristics

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      155 |       );
      156 |
    > 157 |       expect(response.status).toBe(200);
          |                               ^
      158 |
      159 |       if (response.status === 200) {
      160 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/recommendations.test.js:157:31)

  ● Recommendations API › Similar Stocks › should recommend alternatives to current holdings

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      175 |         .set("Authorization", "Bearer test-token");
      176 |
    > 177 |       expect(response.status).toBe(200);
          |                               ^
      178 |
      179 |       if (response.status === 200) {
      180 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/recommendations.test.js:177:31)

  ● Recommendations API › Performance Tracking › should track recommendation performance

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      196 |         .set("Authorization", "Bearer test-token");
      197 |
    > 198 |       expect(response.status).toBe(200);
          |                               ^
      199 |
      200 |       if (response.status === 200) {
      201 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/recommendations.test.js:198:31)

