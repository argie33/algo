#!/bin/bash

# Unit Test Upload Workflow - Mirrors Integration Test Upload Exactly
# This script matches the exact pattern and structure of the integration test upload

set -e

echo "üì§ UPLOADING UNIT TEST RESULTS TO S3"
echo "=================================================="

# Install jq if not available
if ! command -v jq &> /dev/null; then
  echo "üì¶ Installing jq..."
  sudo apt-get update && sudo apt-get install -y jq
fi

# Create timestamped directory for this test run
TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
RUN_ID="${GITHUB_RUN_ID:-16432811281}"
BRANCH_NAME="${GITHUB_REF_NAME:-initialbuild}"
GITHUB_SHA="${GITHUB_SHA:-$(git rev-parse HEAD 2>/dev/null || echo 'local')}"
AWS_ACCOUNT_ID="${AWS_ACCOUNT_ID:-***}"

echo "üìä Preparing unit test results for S3 upload..."
echo "Timestamp: ${TIMESTAMP}"
echo "Run ID: ${RUN_ID}"
echo "Branch: ${BRANCH_NAME}"

# Create local directory structure (mirrors integration test structure)
mkdir -p "test-upload/unit-tests-${TIMESTAMP}"

# Unit tests should already be run by workflow - just collect generated files
echo "üß™ Collecting unit test results generated by workflow..."

# Copy unit test artifacts generated by workflow
ARTIFACTS_FOUND=false

# Check for unit-test-artifacts directory (primary location)
if [ -d "unit-test-artifacts" ]; then
  cp -r unit-test-artifacts/* "test-upload/unit-tests-${TIMESTAMP}/" 2>/dev/null || true
  echo "‚úÖ Copied unit-test-artifacts directory"
  ARTIFACTS_FOUND=true
fi

# Check for webapp/lambda generated files (workflow location)
if [ -d "webapp/lambda/coverage" ]; then
  mkdir -p "test-upload/unit-tests-${TIMESTAMP}/coverage/backend"
  cp -r webapp/lambda/coverage/* "test-upload/unit-tests-${TIMESTAMP}/coverage/backend/" 2>/dev/null && echo "‚úÖ Copied backend coverage from webapp/lambda"
  ARTIFACTS_FOUND=true
fi

if [ -f "webapp/lambda/junit.xml" ]; then
  cp "webapp/lambda/junit.xml" "test-upload/unit-tests-${TIMESTAMP}/unit-junit.xml"
  echo "‚úÖ Copied JUnit XML from webapp/lambda"
  ARTIFACTS_FOUND=true
fi

if [ -f "webapp/lambda/test-results.json" ]; then
  mkdir -p "test-upload/unit-tests-${TIMESTAMP}/backend"
  cp "webapp/lambda/test-results.json" "test-upload/unit-tests-${TIMESTAMP}/backend/"
  echo "‚úÖ Copied test results from webapp/lambda"
  ARTIFACTS_FOUND=true
fi

# Check for frontend test results if they exist
if [ -d "webapp/frontend/test-results" ]; then
  mkdir -p "test-upload/unit-tests-${TIMESTAMP}/frontend"
  cp -r webapp/frontend/test-results/* "test-upload/unit-tests-${TIMESTAMP}/frontend/" 2>/dev/null && echo "‚úÖ Copied frontend test results"
  ARTIFACTS_FOUND=true
fi

if [ -d "webapp/frontend/coverage" ] && [ "$(ls -A webapp/frontend/coverage 2>/dev/null)" ]; then
  mkdir -p "test-upload/unit-tests-${TIMESTAMP}/coverage/frontend"
  cp -r webapp/frontend/coverage/* "test-upload/unit-tests-${TIMESTAMP}/coverage/frontend/" 2>/dev/null && echo "‚úÖ Copied frontend coverage"
  ARTIFACTS_FOUND=true
fi

# Check current directory for generated files
if [ -d "coverage" ]; then
  mkdir -p "test-upload/unit-tests-${TIMESTAMP}/coverage/backend"
  cp -r coverage/* "test-upload/unit-tests-${TIMESTAMP}/coverage/backend/" 2>/dev/null && echo "‚úÖ Copied backend coverage from current directory"
  ARTIFACTS_FOUND=true
fi

if [ -f "junit.xml" ]; then
  cp "junit.xml" "test-upload/unit-tests-${TIMESTAMP}/unit-junit.xml"
  echo "‚úÖ Copied JUnit XML from current directory"
  ARTIFACTS_FOUND=true
fi

if [ -f "test-results.json" ]; then
  mkdir -p "test-upload/unit-tests-${TIMESTAMP}/backend"
  cp "test-results.json" "test-upload/unit-tests-${TIMESTAMP}/backend/"
  echo "‚úÖ Copied test results from current directory"
  ARTIFACTS_FOUND=true
fi

# Check for unit test report in workflow-generated locations
if [ -f "unit-test-coverage-report.md" ]; then
  cp "unit-test-coverage-report.md" "test-upload/unit-tests-${TIMESTAMP}/SUMMARY.md"
  echo "‚úÖ Copied unit test report as SUMMARY.md"
  ARTIFACTS_FOUND=true
elif [ -f "webapp/lambda/unit-test-coverage-report.md" ]; then
  cp "webapp/lambda/unit-test-coverage-report.md" "test-upload/unit-tests-${TIMESTAMP}/SUMMARY.md"
  echo "‚úÖ Copied unit test report from webapp/lambda as SUMMARY.md"
  ARTIFACTS_FOUND=true
fi

# If no artifacts found, create minimal structure
if [ "$ARTIFACTS_FOUND" = false ]; then
  echo "‚ö†Ô∏è No unit test artifacts found in expected locations"
  echo "üîç Checking current directory structure:"
  find . -name "*.xml" -o -name "coverage*" -o -name "test-results*" 2>/dev/null | head -10
  
  # Create minimal structure
  mkdir -p "test-upload/unit-tests-${TIMESTAMP}/backend"
  echo '{"message":"No test artifacts found"}' > "test-upload/unit-tests-${TIMESTAMP}/backend/test-results.json"
fi

# Ensure SUMMARY.md exists
if [ ! -f "test-upload/unit-tests-${TIMESTAMP}/SUMMARY.md" ]; then
  echo "# Unit Test Results Summary

Generated: ${TIMESTAMP}
Branch: ${BRANCH_NAME}
Run ID: ${RUN_ID}

Unit test artifacts collected from workflow.
" > "test-upload/unit-tests-${TIMESTAMP}/SUMMARY.md"
  echo "‚úÖ Created basic unit test summary"
fi

# Create infrastructure validation (mirrors integration test structure)
cat > "test-upload/unit-tests-${TIMESTAMP}/infrastructure-validation.json" << EOF
{
  "testSuite": "Unit Test Infrastructure Validation",
  "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")",
  "status": "passed",
  "environment": "test",
  "nodeVersion": "$(node --version 2>/dev/null || echo 'unknown')",
  "npmVersion": "$(npm --version 2>/dev/null || echo 'unknown')",
  "testFramework": "jest",
  "testPattern": "tests/unit"
}
EOF

# Create summary.json (mirrors integration test structure)
# Try to extract test results from various possible locations
TOTAL_TESTS="0"
PASSED_TESTS="0" 
FAILED_TESTS="0"

# Check backend test results
if [ -f "test-upload/unit-tests-${TIMESTAMP}/backend/test-results.json" ]; then
  TOTAL_TESTS=$(grep -o '"numTotalTests":[0-9]*' "test-upload/unit-tests-${TIMESTAMP}/backend/test-results.json" | grep -o '[0-9]*' || echo "0")
  PASSED_TESTS=$(grep -o '"numPassedTests":[0-9]*' "test-upload/unit-tests-${TIMESTAMP}/backend/test-results.json" | grep -o '[0-9]*' || echo "0")
  FAILED_TESTS=$(grep -o '"numFailedTests":[0-9]*' "test-upload/unit-tests-${TIMESTAMP}/backend/test-results.json" | grep -o '[0-9]*' || echo "0")
  echo "üìä Extracted test metrics from backend results: ${PASSED_TESTS}/${TOTAL_TESTS} passed"
elif [ -f "test-upload/unit-tests-${TIMESTAMP}/test-results.json" ]; then
  TOTAL_TESTS=$(grep -o '"total":[0-9]*' "test-upload/unit-tests-${TIMESTAMP}/test-results.json" | grep -o '[0-9]*' || echo "0")
  PASSED_TESTS=$(grep -o '"passed":[0-9]*' "test-upload/unit-tests-${TIMESTAMP}/test-results.json" | grep -o '[0-9]*' || echo "0")
  FAILED_TESTS=$(grep -o '"failed":[0-9]*' "test-upload/unit-tests-${TIMESTAMP}/test-results.json" | grep -o '[0-9]*' || echo "0")
  echo "üìä Extracted test metrics from unit test results: ${PASSED_TESTS}/${TOTAL_TESTS} passed"
else
  echo "‚ö†Ô∏è No test results found - using default values"
fi

cat > "test-upload/unit-tests-${TIMESTAMP}/summary.json" << EOF
{
  "testSuite": "Unit Tests",
  "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")",
  "runId": "${RUN_ID}",
  "branch": "${BRANCH_NAME}",
  "commit": "${GITHUB_SHA}",
  "environment": "test",
  "results": {
    "total": ${TOTAL_TESTS},
    "passed": ${PASSED_TESTS},
    "failed": ${FAILED_TESTS},
    "successRate": "$(echo "scale=2; ${PASSED_TESTS} * 100 / ${TOTAL_TESTS}" | bc 2>/dev/null || echo "0")%"
  },
  "coverage": {
    "enabled": true,
    "reportPath": "coverage/backend/coverage-final.json"
  },
  "infrastructure": {
    "nodeVersion": "$(node --version 2>/dev/null || echo 'unknown')",
    "npmVersion": "$(npm --version 2>/dev/null || echo 'unknown')",
    "testFramework": "jest"
  }
}
EOF

# Create CI/CD unit test report (mirrors integration test structure)
cat > "test-upload/unit-tests-${TIMESTAMP}/ci-cd-unit-report.json" << EOF
{
  "cicd": {
    "pipeline": "unit-tests",
    "runId": "${RUN_ID}",
    "branch": "${BRANCH_NAME}",
    "commit": "${GITHUB_SHA}",
    "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")"
  },
  "results": {
    "unitTests": {
      "total": ${TOTAL_TESTS},
      "passed": ${PASSED_TESTS},
      "failed": ${FAILED_TESTS},
      "successRate": "$(echo "scale=2; ${PASSED_TESTS} * 100 / ${TOTAL_TESTS}" | bc 2>/dev/null || echo "0")%"
    }
  },
  "artifacts": {
    "junitXml": "unit-junit.xml",
    "coverageJson": "coverage/backend/coverage-final.json",
    "summary": "summary.json",
    "report": "SUMMARY.md"
  }
}
EOF

# Create a latest.json pointer file (mirrors integration test structure)
cat > "test-upload/latest-unit-run.json" << EOF
{
  "latestRun": {
    "timestamp": "${TIMESTAMP}",
    "runId": "${RUN_ID}",
    "branch": "${BRANCH_NAME}",
    "commit": "${GITHUB_SHA}",
    "path": "unit-tests/${BRANCH_NAME}/unit-tests-${TIMESTAMP}/",
    "summaryUrl": "unit-tests/${BRANCH_NAME}/unit-tests-${TIMESTAMP}/summary.json"
  }
}
EOF

# Get bucket name (mirrors integration test logic exactly)
STACK_NAME="stocks-webapp-dev"

echo "üîç Checking CloudFormation stack: ${STACK_NAME}"

# Try to get bucket name from CloudFormation stack first with enhanced error handling
set +e  # Don't exit on command failure
AWS_CLI_OUTPUT=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query 'Stacks[0].Outputs[?OutputKey==`TestResultsBucketName`].OutputValue' --output text 2>&1)
AWS_CLI_EXIT_CODE=$?
set -e  # Re-enable exit on error

echo "üîç AWS CLI exit code: ${AWS_CLI_EXIT_CODE}"
if [ ${AWS_CLI_EXIT_CODE} -eq 0 ] && [ -n "$AWS_CLI_OUTPUT" ] && [ "$AWS_CLI_OUTPUT" != "None" ]; then
  BUCKET_NAME="$AWS_CLI_OUTPUT"
  echo "‚úÖ Found bucket name from CloudFormation: ${BUCKET_NAME}"
else
  BUCKET_NAME="algo-test-results-dev-${AWS_ACCOUNT_ID}"
  echo "‚ö†Ô∏è CloudFormation stack query failed (exit code: ${AWS_CLI_EXIT_CODE}), using constructed bucket name: ${BUCKET_NAME}"
  echo "‚ö†Ô∏è AWS CLI output: ${AWS_CLI_OUTPUT}"
  
  # Check if stack exists at all
  set +e
  STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query 'Stacks[0].StackStatus' --output text 2>&1)
  STACK_CHECK_EXIT=$?
  set -e
  
  if [ ${STACK_CHECK_EXIT} -eq 0 ]; then
    echo "‚ö†Ô∏è Stack exists but no TestResultsBucketName output found. Stack status: ${STACK_STATUS}"
  else
    echo "‚ö†Ô∏è Stack does not exist or is not accessible: ${STACK_STATUS}"
  fi
fi

echo "üì§ Uploading unit test results to S3 bucket: ${BUCKET_NAME}"

# Verify AWS credentials
echo "üîê Testing AWS credentials..."
aws sts get-caller-identity || (echo "‚ùå AWS credentials not working" && exit 1)

# Check if bucket exists
echo "ü™£ Checking bucket accessibility..."
if aws s3 ls "s3://${BUCKET_NAME}/" >/dev/null 2>&1; then
  echo "‚úÖ Bucket is accessible"
else
  echo "‚ùå Bucket is not accessible or does not exist"
  exit 1
fi

# Upload the unit test results (mirrors integration test upload)
echo "üì§ Uploading unit test results..."
aws s3 sync "test-upload/" "s3://${BUCKET_NAME}/unit-tests/${BRANCH_NAME}/" \
  --exclude "*" \
  --include "unit-tests-${TIMESTAMP}/*" \
  --include "latest-unit-run.json"

if [ $? -eq 0 ]; then
  echo "‚úÖ Unit test results uploaded successfully"
else
  echo "‚ùå Failed to upload unit test results"
  exit 1
fi

# Upload latest pointer (mirrors integration test)
echo "üì§ Uploading latest unit run pointer..."
aws s3 cp "test-upload/latest-unit-run.json" "s3://${BUCKET_NAME}/latest-unit-test-run.json"
aws s3 cp "test-upload/latest-unit-run.json" "s3://${BUCKET_NAME}/latest-unit-test-run-${BRANCH_NAME}.json"

echo "‚úÖ Unit test results uploaded successfully!"
echo "üìã Summary: https://${BUCKET_NAME}.s3.amazonaws.com/unit-tests/${BRANCH_NAME}/unit-tests-${TIMESTAMP}/summary.json"

# Display all URLs (mirrors integration test output)
echo "üîó Unit Test Results URLs:"
echo "   üìä Summary: https://${BUCKET_NAME}.s3.amazonaws.com/unit-tests/${BRANCH_NAME}/unit-tests-${TIMESTAMP}/summary.json"
echo "   üìã JUnit XML: https://${BUCKET_NAME}.s3.amazonaws.com/unit-tests/${BRANCH_NAME}/unit-tests-${TIMESTAMP}/unit-junit.xml"
echo "   üìà Coverage: https://${BUCKET_NAME}.s3.amazonaws.com/unit-tests/${BRANCH_NAME}/unit-tests-${TIMESTAMP}/coverage/backend/coverage-final.json"
echo "   üèóÔ∏è CI/CD Report: https://${BUCKET_NAME}.s3.amazonaws.com/unit-tests/${BRANCH_NAME}/unit-tests-${TIMESTAMP}/ci-cd-unit-report.json"
echo "   üîÑ Latest Run: https://${BUCKET_NAME}.s3.amazonaws.com/latest-unit-test-run-${BRANCH_NAME}.json"
echo "   üìù Report: https://${BUCKET_NAME}.s3.amazonaws.com/unit-tests/${BRANCH_NAME}/unit-tests-${TIMESTAMP}/SUMMARY.md"

# Cleanup local upload directory
rm -rf test-upload/

echo "üéâ Unit test S3 upload completed successfully!"