
> financial-dashboard-lambda@1.0.0 test
> jest --coverage --coverageReporters=text --coverageReporters=html --coverageReporters=lcov --reporter=verbose --testTimeout=20000

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    Processing request: GET /api/settings

      at log (index.js:429:11)

  console.log
    Initializing database connection...

      at log (index.js:388:13)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

  console.log
    Database connection established successfully

      at log (index.js:414:17)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    🔧 Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:43 +0000] "GET /api/settings HTTP/1.1" 200 472 "-" "-"
  console.log
    Processing request: GET /api/settings/dashboard

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    🔧 Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

  console.log
    ⚙️ Dashboard settings requested for user: test-user-123

      at log (routes/settings.js:44:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:43 +0000] "GET /api/settings/dashboard HTTP/1.1" 200 2725 "-" "-"
  console.log
    Processing request: GET /api/settings/providers

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    🔧 Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:43 +0000] "GET /api/settings/providers HTTP/1.1" 404 632 "-" "-"
  console.log
    Processing request: GET /api/settings/api-keys

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    🔧 Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:43 +0000] "GET /api/settings/api-keys HTTP/1.1" 200 83 "-" "-"
  console.log
    Processing request: POST /api/settings/api-keys

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    🔧 Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:43 +0000] "POST /api/settings/api-keys HTTP/1.1" 400 100 "-" "-"
  console.log
    Processing request: GET /api/settings/health

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    🔧 Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:43 +0000] "GET /api/settings/health HTTP/1.1" 200 323 "-" "-"
FAIL tests/integration/infrastructure/settings.test.js
  Settings Management API
    Settings Overview
      ✓ should retrieve settings endpoints (56 ms)
    Dashboard Settings
      ✓ should retrieve dashboard configuration (15 ms)
    API Key Management
      ✓ should list supported providers (10 ms)
      ✕ should retrieve API keys list (10 ms)
      ✕ should handle API key creation request (14 ms)
    Settings Health Status
      ✕ should retrieve settings health status (7 ms)

  ● Settings Management API › API Key Management › should retrieve API keys list

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      62 |       if (response.status === 200) {
      63 |         expect(response.body).toHaveProperty("success", true);
    > 64 |         expect(Array.isArray(response.body.data)).toBe(true);
         |                                                   ^
      65 |       }
      66 |     });
      67 |

      at Object.toBe (tests/integration/infrastructure/settings.test.js:64:51)

  ● Settings Management API › API Key Management › should handle API key creation request

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 404, 500, 501]

      79 |         .send(keyData);
      80 |
    > 81 |       expect([200, 404, 500, 501]).toContain(response.status);
         |                                    ^
      82 |
      83 |       if (response.status === 200 || response.status === 201) {
      84 |         expect(response.body).toHaveProperty("success", true);

      at Object.toContain (tests/integration/infrastructure/settings.test.js:81:36)

  ● Settings Management API › Settings Health Status › should retrieve settings health status

    expect(received).toHaveProperty(path, value)

    Expected path: "success"
    Received path: []

    Expected value: true
    Received value: {"health": {"cacheStats": {"keyCache": 0, "sessionCache": 0, "timeout": 300000}, "circuitBreaker": {"failures": 0, "lastFailureTime": 0, "state": "CLOSED"}, "jwtCircuitBreaker": {"failures": 0, "lastFailureTime": 0, "state": "CLOSED"}, "services": {"encryptionAvailable": false, "jwtVerifierAvailable": true}}, "timestamp": "2025-09-27T02:48:43.840Z"}

       97 |
       98 |       if (response.status === 200) {
    >  99 |         expect(response.body).toHaveProperty("success", true);
          |                               ^
      100 |         expect(response.body).toHaveProperty("status");
      101 |       }
      102 |     });

      at Object.toHaveProperty (tests/integration/infrastructure/settings.test.js:99:31)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

PASS tests/integration/database/cross-service-transaction.integration.test.js
  Cross-Service Transaction Integration
    Service Coordination Patterns
      ✓ should coordinate portfolio and order service transactions (20 ms)
      ✓ should handle cross-service transaction failure and rollback (21 ms)
    Service Dependency Management
      ✓ should handle service dependency chain transactions (14 ms)
      ✓ should handle circular dependency resolution (12 ms)
    Distributed Transaction Patterns
      ✓ should implement saga pattern for long-running transactions (17 ms)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    JWT verifier initialized successfully (test mode)

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:100:17)

  console.error
    API key storage error: Error: API key data exceeds maximum length limits
        at ApiKeyService.storeApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:743:15)
        at storeApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1450:34)
        at Object.storeApiKey (/home/stocks/algo/webapp/lambda/tests/unit/utils/apiKeyService.test.js:197:28)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      866 |     } catch (error) {
      867 |       this.recordFailure(error);
    > 868 |       console.error("API key storage error:", error);
          |               ^
      869 |       throw new Error(
      870 |         `Failed to store API key for ${provider}: ${error.message}`
      871 |       );

      at ApiKeyService.error [as storeApiKey] (utils/apiKeyService.js:868:15)
      at storeApiKey (utils/apiKeyService.js:1450:34)
      at Object.storeApiKey (tests/unit/utils/apiKeyService.test.js:197:28)

  console.error
    API key storage error: Error: JWT validation failed: JWT verification not configured
        at ApiKeyService.storeApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:753:15)
        at storeApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1450:14)
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/utils/apiKeyService.test.js:215:22)

      866 |     } catch (error) {
      867 |       this.recordFailure(error);
    > 868 |       console.error("API key storage error:", error);
          |               ^
      869 |       throw new Error(
      870 |         `Failed to store API key for ${provider}: ${error.message}`
      871 |       );

      at ApiKeyService.error [as storeApiKey] (utils/apiKeyService.js:868:15)
      at storeApiKey (utils/apiKeyService.js:1450:14)
      at Object.<anonymous> (tests/unit/utils/apiKeyService.test.js:215:22)

  console.error
    API key storage error: Error: Database connection failed
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/utils/apiKeyService.test.js:226:23)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      866 |     } catch (error) {
      867 |       this.recordFailure(error);
    > 868 |       console.error("API key storage error:", error);
          |               ^
      869 |       throw new Error(
      870 |         `Failed to store API key for ${provider}: ${error.message}`
      871 |       );

      at ApiKeyService.error [as storeApiKey] (utils/apiKeyService.js:868:15)
      at storeApiKey (utils/apiKeyService.js:1450:14)
      at Object.<anonymous> (tests/unit/utils/apiKeyService.test.js:230:22)

  console.error
    API key retrieval error: Error: JWT validation failed: JWT verification not configured
        at ApiKeyService.getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:888:15)
        at getApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1457:14)
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/utils/apiKeyService.test.js:288:22)

       996 |     } catch (error) {
       997 |       this.recordFailure(error);
    >  998 |       console.error("API key retrieval error:", error);
           |               ^
       999 |
      1000 |       if (error.message.includes("circuit breaker")) {
      1001 |         throw error;

      at ApiKeyService.error [as getApiKey] (utils/apiKeyService.js:998:15)
      at getApiKey (utils/apiKeyService.js:1457:14)
      at Object.<anonymous> (tests/unit/utils/apiKeyService.test.js:288:22)

  console.error
    API key validation error: Error: JWT validation failed: JWT verification not configured
        at ApiKeyService.validateApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1033:15)
        at validateApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1464:14)
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/utils/apiKeyService.test.js:358:22)

      1121 |       };
      1122 |     } catch (error) {
    > 1123 |       console.error("API key validation error:", error);
           |               ^
      1124 |       return {
      1125 |         valid: false,
      1126 |         error: error.message,

      at ApiKeyService.error [as validateApiKey] (utils/apiKeyService.js:1123:15)
      at validateApiKey (utils/apiKeyService.js:1464:14)
      at Object.<anonymous> (tests/unit/utils/apiKeyService.test.js:358:22)

  console.error
    API key circuit breaker OPENED after 5 failures: Database connection failed

      616 |     if (this.circuitBreaker.failures >= this.circuitBreaker.maxFailures) {
      617 |       this.circuitBreaker.state = "OPEN";
    > 618 |       console.error(
          |               ^
      619 |         `API key circuit breaker OPENED after ${this.circuitBreaker.failures} failures:`,
      620 |         error.message
      621 |       );

      at ApiKeyService.error [as recordFailure] (utils/apiKeyService.js:618:15)
      at ApiKeyService.recordFailure [as deleteApiKey] (utils/apiKeyService.js:1252:12)
      at deleteApiKey (utils/apiKeyService.js:1475:14)
      at Object.<anonymous> (tests/unit/utils/apiKeyService.test.js:434:22)

  console.error
    API key deletion error: Error: Database connection failed
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/utils/apiKeyService.test.js:431:23)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      1251 |     } catch (error) {
      1252 |       this.recordFailure(error);
    > 1253 |       console.error("API key deletion error:", error);
           |               ^
      1254 |       return {
      1255 |         success: false,
      1256 |         error: `Failed to delete API key for ${provider}: ${error.message}`,

      at ApiKeyService.error [as deleteApiKey] (utils/apiKeyService.js:1253:15)
      at deleteApiKey (utils/apiKeyService.js:1475:14)
      at Object.<anonymous> (tests/unit/utils/apiKeyService.test.js:434:22)

  console.error
    API key circuit breaker OPENED after 6 failures: JWT validation failed: JWT verification not configured

      616 |     if (this.circuitBreaker.failures >= this.circuitBreaker.maxFailures) {
      617 |       this.circuitBreaker.state = "OPEN";
    > 618 |       console.error(
          |               ^
      619 |         `API key circuit breaker OPENED after ${this.circuitBreaker.failures} failures:`,
      620 |         error.message
      621 |       );

      at ApiKeyService.error [as recordFailure] (utils/apiKeyService.js:618:15)
      at ApiKeyService.recordFailure (utils/apiKeyService.js:1308:12)
      at listProviders (utils/apiKeyService.js:1482:14)
      at Object.<anonymous> (tests/unit/utils/apiKeyService.test.js:493:22)

  console.error
    Provider listing error: Error: JWT validation failed: JWT verification not configured
        at ApiKeyService.listProviders (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1273:15)
        at listProviders (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1482:14)
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/utils/apiKeyService.test.js:493:22)

      1307 |     } catch (error) {
      1308 |       this.recordFailure(error);
    > 1309 |       console.error("Provider listing error:", error);
           |               ^
      1310 |       throw error; // Re-throw error so wrapper can handle it
      1311 |     }
      1312 |   }

      at ApiKeyService.error [as listProviders] (utils/apiKeyService.js:1309:15)
      at listProviders (utils/apiKeyService.js:1482:14)
      at Object.<anonymous> (tests/unit/utils/apiKeyService.test.js:493:22)

  console.warn
    API key providers query returned null result, database may be unavailable

      1288 |       // Add null checking for database availability
      1289 |       if (!dbResult || !dbResult.rows) {
    > 1290 |         console.warn(
           |                 ^
      1291 |           "API key providers query returned null result, database may be unavailable"
      1292 |         );
      1293 |         this.recordFailure(new Error("Database temporarily unavailable"));

      at ApiKeyService.warn [as listProviders] (utils/apiKeyService.js:1290:17)
      at listProviders (utils/apiKeyService.js:1482:14)
      at Object.<anonymous> (tests/unit/utils/apiKeyService.test.js:501:22)

  console.error
    API key circuit breaker OPENED after 7 failures: Database temporarily unavailable

      616 |     if (this.circuitBreaker.failures >= this.circuitBreaker.maxFailures) {
      617 |       this.circuitBreaker.state = "OPEN";
    > 618 |       console.error(
          |               ^
      619 |         `API key circuit breaker OPENED after ${this.circuitBreaker.failures} failures:`,
      620 |         error.message
      621 |       );

      at ApiKeyService.error [as recordFailure] (utils/apiKeyService.js:618:15)
      at ApiKeyService.recordFailure (utils/apiKeyService.js:1293:14)
      at listProviders (utils/apiKeyService.js:1482:14)
      at Object.<anonymous> (tests/unit/utils/apiKeyService.test.js:501:22)

  console.log
    JWT decode failed in dev mode, trying other token patterns: JWT validation failed

      at ApiKeyService.log [as validateJwtToken] (utils/apiKeyService.js:247:23)

  console.error
    API key circuit breaker OPENED after 8 failures: API key data exceeds maximum length limits

      616 |     if (this.circuitBreaker.failures >= this.circuitBreaker.maxFailures) {
      617 |       this.circuitBreaker.state = "OPEN";
    > 618 |       console.error(
          |               ^
      619 |         `API key circuit breaker OPENED after ${this.circuitBreaker.failures} failures:`,
      620 |         error.message
      621 |       );

      at ApiKeyService.error [as recordFailure] (utils/apiKeyService.js:618:15)
      at ApiKeyService.recordFailure [as storeApiKey] (utils/apiKeyService.js:867:12)
      at storeApiKey (utils/apiKeyService.js:1450:34)
      at Object.storeApiKey (tests/unit/utils/apiKeyService.test.js:681:28)

  console.error
    API key storage error: Error: API key data exceeds maximum length limits
        at ApiKeyService.storeApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:743:15)
        at storeApiKey (/home/stocks/algo/webapp/lambda/utils/apiKeyService.js:1450:34)
        at Object.storeApiKey (/home/stocks/algo/webapp/lambda/tests/unit/utils/apiKeyService.test.js:681:28)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      866 |     } catch (error) {
      867 |       this.recordFailure(error);
    > 868 |       console.error("API key storage error:", error);
          |               ^
      869 |       throw new Error(
      870 |         `Failed to store API key for ${provider}: ${error.message}`
      871 |       );

      at ApiKeyService.error [as storeApiKey] (utils/apiKeyService.js:868:15)
      at storeApiKey (utils/apiKeyService.js:1450:34)
      at Object.storeApiKey (tests/unit/utils/apiKeyService.test.js:681:28)

  console.log
    🔧 Development mode: Resetting API key circuit breaker to CLOSED state

      at ApiKeyService.log [as checkCircuitBreaker] (utils/apiKeyService.js:567:17)

  console.error
    Audit logging error: Error: Audit log failed
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/utils/apiKeyService.test.js:953:32)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      1019 |       ); // IP address can be added later
      1020 |     } catch (error) {
    > 1021 |       console.error("Audit logging error:", error);
           |               ^
      1022 |       // Don't throw - audit logging failures shouldn't break main functionality
      1023 |     }
      1024 |   }

      at ApiKeyService.error [as logAuditEvent] (utils/apiKeyService.js:1021:15)
      at ApiKeyService.storeApiKey (utils/apiKeyService.js:846:7)
      at storeApiKey (utils/apiKeyService.js:1450:14)
      at Object.<anonymous> (tests/unit/utils/apiKeyService.test.js:956:22)

FAIL tests/unit/utils/apiKeyService.test.js
  API Key Service
    validateJwtToken
      ✓ should validate JWT token in test environment (1 ms)
      ✓ should reject invalid JWT tokens (1 ms)
      ✓ should handle empty or invalid token input (1 ms)
      ✓ should accept dev-bypass-token in development (1 ms)
    storeApiKey
      ✓ should store API key successfully (1 ms)
      ✓ should validate input parameters (1 ms)
      ✓ should validate provider name for SQL injection (1 ms)
      ✓ should validate required fields (1 ms)
      ✓ should validate field lengths (21 ms)
      ✓ should handle JWT validation failure (2 ms)
      ✓ should handle database errors (2 ms)
    getApiKey
      ✓ should retrieve API key successfully (1 ms)
      ✓ should return null for non-existent keys (1 ms)
      ✓ should handle JWT validation failure (1 ms)
      ✓ should update last used timestamp
    validateApiKey
      ✓ should validate API key successfully (1 ms)
      ✓ should handle API key not configured
      ✓ should handle JWT validation failure (2 ms)
      ✓ should test connection when requested (3 ms)
    deleteApiKey
      ✓ should delete API key successfully (1 ms)
      ✓ should handle deletion of non-existent key (1 ms)
      ✓ should handle JWT validation failure gracefully (1 ms)
      ✓ should handle database errors (2 ms)
    listProviders
      ✓ should return list of configured providers (1 ms)
      ✓ should return empty array for no providers
      ✓ should handle JWT validation failure (2 ms)
      ✓ should handle database unavailable gracefully (2 ms)
    getDecryptedApiKey
      ✓ should retrieve API key by user ID (1 ms)
      ✓ should return null for non-existent key (1 ms)
    cache management
      ✓ should invalidate session cache
      ✓ should clear all caches (2 ms)
    health status
      ✓ should return health status (1 ms)
    circuit breaker functionality
      ✓ should handle circuit breaker failures (1 ms)
      ✕ should test JWT circuit breaker functionality (2 ms)
    security features
      ✓ should sanitize log output
      ✓ should validate input lengths (2 ms)
      ○ skipped should use different salts for different users
    encryption and decryption
      ✓ should handle production encryption mode (2 ms)
      ✓ should handle encryption key from environment
      ✓ should handle secrets manager errors
    production JWT verification
      ✓ should handle Cognito JWT verification (1 ms)
      ✓ should handle Cognito JWT verification failure (1 ms)
      ✓ should use cached JWT session (1 ms)
    edge cases and error handling
      ✓ should handle database null result (1 ms)
      ✓ should handle missing required fields for provider
      ✓ should handle connection test for alpaca (3 ms)
    audit logging
      ✓ should log audit events
      ✓ should handle audit logging errors gracefully (2 ms)
    development mode features
      ✓ should handle development bypass token (1 ms)
      ✓ should reset circuit breaker in development
    provider specific functionality
      ✓ should handle different provider required fields (1 ms)
      ✓ should handle unknown provider gracefully (1 ms)

  ● API Key Service › circuit breaker functionality › should test JWT circuit breaker functionality

    expect(received).toContain(expected) // indexOf

    Expected substring: "JWT verification not configured"
    Received string:    "Invalid test token provided"

      617 |
      618 |       expect(result.valid).toBe(false);
    > 619 |       expect(result.error).toContain("JWT verification not configured");
          |                            ^
      620 |     });
      621 |   });
      622 |

      at Object.toContain (tests/unit/utils/apiKeyService.test.js:619:28)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    Processing request: GET /api/dashboard

      at log (index.js:429:11)

  console.log
    Initializing database connection...

      at log (index.js:388:13)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

  console.log
    Database connection established successfully

      at log (index.js:414:17)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:44 +0000] "GET /api/dashboard HTTP/1.1" 200 436 "-" "-"
  console.log
    Processing request: GET /api/dashboard

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:44 +0000] "GET /api/dashboard HTTP/1.1" 200 436 "-" "-"
  console.log
    Processing request: GET /api/dashboard/market-summary

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:44 +0000] "GET /api/dashboard/market-summary HTTP/1.1" 404 650 "-" "-"
  console.log
    Processing request: GET /api/dashboard/indices

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:44 +0000] "GET /api/dashboard/indices HTTP/1.1" 404 629 "-" "-"
  console.log
    Processing request: GET /api/dashboard/portfolio

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:44 +0000] "GET /api/dashboard/portfolio HTTP/1.1" 404 635 "-" "-"
  console.log
    Processing request: GET /api/dashboard/portfolio/top-positions

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:44 +0000] "GET /api/dashboard/portfolio/top-positions?limit=5 HTTP/1.1" 404 701 "-" "-"
  console.log
    Processing request: GET /api/dashboard/watchlists

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    🔧 Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

  console.log
    📋 Dashboard watchlists requested for user: test-user-123

      at log (routes/dashboard.js:1545:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:44 +0000] "GET /api/dashboard/watchlists HTTP/1.1" 200 1505 "-" "-"
  console.log
    Processing request: GET /api/dashboard/watchlists/performance

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    🔧 Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

  console.log
    📊 Dashboard watchlist performance requested for user: test-user-123

      at log (routes/dashboard.js:1603:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:44 +0000] "GET /api/dashboard/watchlists/performance HTTP/1.1" 200 207375 "-" "-"
  console.log
    Processing request: GET /api/dashboard/news

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:44 +0000] "GET /api/dashboard/news?limit=10 HTTP/1.1" 404 647 "-" "-"
  console.log
    Processing request: GET /api/dashboard/news/personalized

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:44 +0000] "GET /api/dashboard/news/personalized HTTP/1.1" 404 659 "-" "-"
  console.log
    Processing request: GET /api/dashboard/alerts/recent

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:44 +0000] "GET /api/dashboard/alerts/recent HTTP/1.1" 404 647 "-" "-"
  console.log
    Processing request: GET /api/dashboard/alerts/summary

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:44 +0000] "GET /api/dashboard/alerts/summary HTTP/1.1" 404 650 "-" "-"
  console.log
    Processing request: POST /api/dashboard/layout

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:44 +0000] "POST /api/dashboard/layout HTTP/1.1" 404 626 "-" "-"
  console.log
    Processing request: GET /api/dashboard/preferences

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:44 +0000] "GET /api/dashboard/preferences HTTP/1.1" 404 641 "-" "-"
FAIL tests/integration/analytics/dashboard.test.js
  Dashboard API
    Dashboard Overview
      ✕ should retrieve comprehensive dashboard data (26 ms)
      ✕ should handle unauthorized dashboard access (6 ms)
    Market Summary
      ✕ should provide market summary for dashboard (8 ms)
      ✕ should include major market indices (6 ms)
    Portfolio Widget
      ✕ should retrieve portfolio summary for dashboard (7 ms)
      ✕ should show top portfolio positions (6 ms)
    Watchlist Widget
      ✓ should retrieve watchlist summary (10 ms)
      ✓ should show watchlist performance (16 ms)
    News Widget
      ✕ should provide market news for dashboard (6 ms)
      ✕ should provide personalized news based on portfolio (7 ms)
    Alerts Widget
      ✕ should show recent alerts (6 ms)
      ✕ should show alert summary (6 ms)
    Dashboard Customization
      ✕ should save dashboard layout preferences (10 ms)
      ✕ should retrieve user dashboard preferences (6 ms)

  ● Dashboard API › Dashboard Overview › should retrieve comprehensive dashboard data

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      33 |         );
      34 |
    > 35 |         expect(hasDashboardData).toBe(true);
         |                                  ^
      36 |       }
      37 |     });
      38 |

      at Object.toBe (tests/integration/analytics/dashboard.test.js:35:34)

  ● Dashboard API › Dashboard Overview › should handle unauthorized dashboard access

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [401, 500]

      40 |       const response = await request(app).get("/api/dashboard");
      41 |
    > 42 |       expect([401, 500]).toContain(response.status);
         |                          ^
      43 |     });
      44 |   });
      45 |

      at Object.toContain (tests/integration/analytics/dashboard.test.js:42:26)

  ● Dashboard API › Market Summary › should provide market summary for dashboard

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      48 |       const response = await request(app).get("/api/dashboard/market-summary");
      49 |
    > 50 |       expect(response.status).toBe(200);
         |                               ^
      51 |
      52 |       if (response.status === 200) {
      53 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:50:31)

  ● Dashboard API › Market Summary › should include major market indices

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      66 |       const response = await request(app).get("/api/dashboard/indices");
      67 |
    > 68 |       expect(response.status).toBe(200);
         |                               ^
      69 |
      70 |       if (response.status === 200) {
      71 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:68:31)

  ● Dashboard API › Portfolio Widget › should retrieve portfolio summary for dashboard

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

       95 |         .set("Authorization", "Bearer test-token");
       96 |
    >  97 |       expect(response.status).toBe(200);
          |                               ^
       98 |
       99 |       if (response.status === 200) {
      100 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:97:31)

  ● Dashboard API › Portfolio Widget › should show top portfolio positions

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      122 |         .set("Authorization", "Bearer test-token");
      123 |
    > 124 |       expect(response.status).toBe(200);
          |                               ^
      125 |
      126 |       if (response.status === 200) {
      127 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:124:31)

  ● Dashboard API › News Widget › should provide market news for dashboard

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      168 |       const response = await request(app).get("/api/dashboard/news?limit=10");
      169 |
    > 170 |       expect(response.status).toBe(200);
          |                               ^
      171 |
      172 |       if (response.status === 200) {
      173 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:170:31)

  ● Dashboard API › News Widget › should provide personalized news based on portfolio

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      188 |         .set("Authorization", "Bearer test-token");
      189 |
    > 190 |       expect(response.status).toBe(200);
          |                               ^
      191 |
      192 |       if (response.status === 200) {
      193 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:190:31)

  ● Dashboard API › Alerts Widget › should show recent alerts

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      203 |         .set("Authorization", "Bearer test-token");
      204 |
    > 205 |       expect(response.status).toBe(200);
          |                               ^
      206 |
      207 |       if (response.status === 200) {
      208 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:205:31)

  ● Dashboard API › Alerts Widget › should show alert summary

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      216 |         .set("Authorization", "Bearer test-token");
      217 |
    > 218 |       expect(response.status).toBe(200);
          |                               ^
      219 |
      220 |       if (response.status === 200) {
      221 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:218:31)

  ● Dashboard API › Dashboard Customization › should save dashboard layout preferences

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      251 |         .send(layoutConfig);
      252 |
    > 253 |       expect(response.status).toBe(200);
          |                               ^
      254 |
      255 |       if (response.status === 200 || response.status === 201) {
      256 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:253:31)

  ● Dashboard API › Dashboard Customization › should retrieve user dashboard preferences

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      264 |         .set("Authorization", "Bearer test-token");
      265 |
    > 266 |       expect(response.status).toBe(200);
          |                               ^
      267 |
      268 |       if (response.status === 200) {
      269 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/dashboard.test.js:266:31)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.error
    Scoring calculation error: Error: Database connection failed
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/scoring.test.js:116:31)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      447 |     res.json({ scores: scores, cached: false });
      448 |   } catch (error) {
    > 449 |     console.error("Scoring calculation error:", error);
          |             ^
      450 |     res.status(500).json({
      451 |       success: false,
      452 |       error: "Failed to calculate comprehensive scores",

      at error (routes/scoring.js:449:13)

  console.error
    Scoring stats error: Error: Database connection failed
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/scoring.test.js:394:31)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      645 |     });
      646 |   } catch (error) {
    > 647 |     console.error("Scoring stats error:", error);
          |             ^
      648 |     res.status(500).json({
      649 |       success: false,
      650 |       error: "Failed to get scoring statistics",

      at error (routes/scoring.js:647:13)

  console.error
    Scoring calculation error: Error: Database error
        at /home/stocks/algo/webapp/lambda/tests/unit/routes/scoring.test.js:408:15
        at /home/stocks/algo/webapp/lambda/node_modules/jest-mock/build/index.js:397:39
        at /home/stocks/algo/webapp/lambda/node_modules/jest-mock/build/index.js:404:13
        at mockConstructor (/home/stocks/algo/webapp/lambda/node_modules/jest-mock/build/index.js:148:19)
        at query (/home/stocks/algo/webapp/lambda/routes/scoring.js:420:35)
        at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
        at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/route.js:149:13)
        at Route.dispatch (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/route.js:119:3)
        at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
        at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:284:15
        at param (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:365:14)
        at param (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:376:14)
        at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:421:3)
        at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
        at Function.handle (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:175:3)
        at router (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:47:12)
        at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
        at trim_prefix (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:328:13)
        at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:286:9
        at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:346:12)
        at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
        at jsonParser (/home/stocks/algo/webapp/lambda/node_modules/body-parser/lib/types/json.js:113:7)
        at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
        at trim_prefix (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:328:13)
        at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:286:9
        at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:346:12)
        at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
        at expressInit (/home/stocks/algo/webapp/lambda/node_modules/express/lib/middleware/init.js:40:5)
        at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
        at trim_prefix (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:328:13)
        at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:286:9
        at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:346:12)
        at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
        at query (/home/stocks/algo/webapp/lambda/node_modules/express/lib/middleware/query.js:45:5)
        at Layer.handle [as handle_request] (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/layer.js:95:5)
        at trim_prefix (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:328:13)
        at /home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:286:9
        at Function.process_params (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:346:12)
        at next (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:280:10)
        at Function.handle (/home/stocks/algo/webapp/lambda/node_modules/express/lib/router/index.js:175:3)
        at Function.handle (/home/stocks/algo/webapp/lambda/node_modules/express/lib/application.js:181:10)
        at Server.app (/home/stocks/algo/webapp/lambda/node_modules/express/lib/express.js:39:9)
        at Server.emit (node:events:524:28)
        at parserOnIncoming (node:_http_server:1141:12)
        at HTTPParser.parserOnHeadersComplete (node:_http_common:118:17)

      447 |     res.json({ scores: scores, cached: false });
      448 |   } catch (error) {
    > 449 |     console.error("Scoring calculation error:", error);
          |             ^
      450 |     res.status(500).json({
      451 |       success: false,
      452 |       error: "Failed to calculate comprehensive scores",

      at error (routes/scoring.js:449:13)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at next (node_modules/express/lib/router/route.js:149:13)
      at Route.dispatch (node_modules/express/lib/router/route.js:119:3)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at node_modules/express/lib/router/index.js:284:15
      at param (node_modules/express/lib/router/index.js:365:14)
      at param (node_modules/express/lib/router/index.js:376:14)
      at Function.process_params (node_modules/express/lib/router/index.js:421:3)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Function.handle (node_modules/express/lib/router/index.js:175:3)
      at router (node_modules/express/lib/router/index.js:47:12)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at jsonParser (node_modules/body-parser/lib/types/json.js:113:7)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at expressInit (node_modules/express/lib/middleware/init.js:40:5)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at query (node_modules/express/lib/middleware/query.js:45:5)
      at Layer.handle [as handle_request] (node_modules/express/lib/router/layer.js:95:5)
      at trim_prefix (node_modules/express/lib/router/index.js:328:13)
      at node_modules/express/lib/router/index.js:286:9
      at Function.process_params (node_modules/express/lib/router/index.js:346:12)
      at next (node_modules/express/lib/router/index.js:280:10)
      at Function.handle (node_modules/express/lib/router/index.js:175:3)
      at Function.handle (node_modules/express/lib/application.js:181:10)
      at Server.app (node_modules/express/lib/express.js:39:9)

FAIL tests/unit/routes/scoring.test.js
  Scoring Routes - Testing Your Actual Site
    GET /scoring/ping - Basic ping endpoint
      ✓ should return scoring service ping (15 ms)
    GET /scoring/calculate/:symbol - Calculate comprehensive scores
      ✕ should return cached scores when available (4 ms)
      ✓ should return 404 for insufficient data (7 ms)
      ✓ should handle database errors gracefully (5 ms)
      ✓ should handle force recalculate parameter (4 ms)
      ✓ should convert symbol to uppercase (6 ms)
    POST /scoring/calculate/batch - Batch calculate scores
      ✓ should validate symbols array (5 ms)
      ✓ should enforce 50 symbol limit (5 ms)
      ✓ should process valid batch of symbols (5 ms)
      ✓ should handle forceRecalculate parameter (5 ms)
      ✓ should handle mixed success and failure in batch (3 ms)
    GET /scoring/top - Get top stocks by score
      ✓ should return top stocks with default parameters (5 ms)
      ✓ should support limit parameter (3 ms)
      ✓ should support sector filter (3 ms)
      ✓ should support marketCapTier filter (4 ms)
      ✓ should support minScore filter (4 ms)
      ✓ should enforce maximum limit of 200 (4 ms)
    GET /scoring/stats - Get scoring statistics
      ✓ should return overall and sector statistics (3 ms)
      ✓ should handle database errors in stats (6 ms)
    Error handling
      ✓ should handle various error scenarios gracefully (11 ms)
      ✓ should handle malformed requests (6 ms)

  ● Scoring Routes - Testing Your Actual Site › GET /scoring/calculate/:symbol - Calculate comprehensive scores › should return cached scores when available

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

    - StringContaining "SELECT * FROM comprehensive_scores",
    + "
            SELECT * FROM stock_scores
            WHERE symbol = $1
            LIMIT 1
          ",
      ["AAPL"],

    Number of calls: 1

      90 |
      91 |       // Verify the correct database query was made
    > 92 |       expect(query).toHaveBeenCalledWith(
         |                     ^
      93 |         expect.stringContaining("SELECT * FROM comprehensive_scores"),
      94 |         ["AAPL"]
      95 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/scoring.test.js:92:21)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    Stock screening with filters: {}

      at log (routes/screener.js:119:13)

  console.log
    Stock screening with filters: { priceMin: '100', priceMax: '500' }

      at log (routes/screener.js:119:13)

  console.log
    Stock screening with filters: { marketCapMin: '1000000000', marketCapMax: '100000000000' }

      at log (routes/screener.js:119:13)

  console.warn
    Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
        at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

  console.log
    Stock screening with filters: { volumeMin: '1000000' }

      at log (routes/screener.js:119:13)

  console.warn
    Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
        at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

  console.log
    Stock screening with filters: { sector: 'Technology' }

      at log (routes/screener.js:119:13)

  console.warn
    Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
        at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

  console.log
    Stock screening with filters: { peRatioMin: '10', peRatioMax: '30' }

      at log (routes/screener.js:119:13)

  console.log
    Stock screening with filters: { dividendYieldMin: '2', dividendYieldMax: '8' }

      at log (routes/screener.js:119:13)

  console.warn
    Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
        at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

  console.log
    Stock screening with filters: { page: '3', limit: '100' }

      at log (routes/screener.js:119:13)

  console.warn
    Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
        at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

  console.log
    Stock screening with filters: { limit: '1000' }

      at log (routes/screener.js:119:13)

  console.log
    Stock screening with filters: {
      priceMin: '50',
      priceMax: '200',
      marketCapMin: '5000000000',
      sector: 'Technology',
      peRatioMin: '15',
      peRatioMax: '25'
    }

      at log (routes/screener.js:119:13)

  console.warn
    Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
        at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

  console.log
    Stock screening with filters: { priceMin: 'not_a_number', marketCapMax: 'also_not_a_number' }

      at log (routes/screener.js:119:13)

  console.log
    Stock screening with filters: { priceMin: '10000' }

      at log (routes/screener.js:119:13)

  console.warn
    Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
        at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

  console.log
    Stock screening with filters: {}

      at log (routes/screener.js:119:13)

  console.warn
    Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
        at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

  console.log
    Stock screening with filters: {
      sector: "Technology'; DROP TABLE stocks; --",
      priceMin: '50; DELETE FROM screener_templates; --'
    }

      at log (routes/screener.js:119:13)

  console.warn
    Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
        at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

  console.log
    Stock screening with filters: { priceMin: '-1000000', priceMax: '999999999999', marketCapMin: '0' }

      at log (routes/screener.js:119:13)

  console.log
    Stock screening with filters: {}

      at log (routes/screener.js:119:13)

  console.warn
    Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
        at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

  console.log
    Stock screening with filters: { page: '2', limit: '50' }

      at log (routes/screener.js:119:13)

  console.warn
    Error checking table existence for stocks: TypeError: Cannot read properties of undefined (reading 'exists')
        at exists (/home/stocks/algo/webapp/lambda/routes/screener.js:20:27)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at /home/stocks/algo/webapp/lambda/routes/screener.js:122:26

      20 |     return result.rows[0].exists;
      21 |   } catch (error) {
    > 22 |     console.warn(`Error checking table existence for ${tableName}:`, error);
         |             ^
      23 |     return false;
      24 |   }
      25 | }

      at warn (routes/screener.js:22:13)
      at routes/screener.js:122:26

FAIL tests/unit/routes/screener.test.js
  Screener Routes Unit Tests
    GET /screener
      ✓ should return screener API overview without authentication (20 ms)
    GET /screener/screen (authenticated)
      ✕ should screen stocks with default parameters (9 ms)
      ✕ should handle price filter parameters (6 ms)
      ✕ should handle market cap filter parameters (19 ms)
      ✕ should handle volume filter parameters (9 ms)
      ✕ should handle sector filter (8 ms)
      ✕ should handle PE ratio filters (8 ms)
      ✕ should handle dividend yield filters (7 ms)
      ✕ should handle pagination parameters (6 ms)
      ✕ should cap limit at 500 (6 ms)
      ✕ should handle multiple filters combined (7 ms)
      ✓ should handle invalid numeric parameters gracefully (4 ms)
      ✕ should handle empty results (7 ms)
      ✕ should handle database query errors (5 ms)
    GET /screener/templates (authenticated)
      ○ skipped should return pre-built screening templates
      ○ skipped should filter templates by category
      ○ skipped should handle empty templates
    GET /screener/factors (authenticated)
      ○ skipped should return available screening factors
    Authentication
      ✓ should allow public access to root endpoint (3 ms)
      ✓ should require authentication for screening endpoint (1 ms)
    Parameter validation
      ✕ should sanitize SQL injection attempts (7 ms)
      ✓ should handle extreme numeric values (4 ms)
    Error handling
      ✕ should handle database timeout errors (6 ms)
      ○ skipped should handle factor scoring engine errors
    Response format
      ✓ should return consistent JSON response format (4 ms)
      ✕ should include pagination metadata (5 ms)

  ● Screener Routes Unit Tests › GET /screener/screen (authenticated) › should screen stocks with default parameters

    expect(received).toHaveProperty(path)

    Expected path: "stocks"
    Received path: []

    Received value: []

      149 |       expect(response.body).toHaveProperty("success", true);
      150 |       expect(response.body).toHaveProperty("data");
    > 151 |       expect(response.body.data).toHaveProperty("stocks"); // Changed from 'results' to 'stocks'
          |                                  ^
      152 |       expect(Array.isArray(response.body.data.stocks)).toBe(true);
      153 |       expect(response.body.data.stocks).toHaveLength(2);
      154 |       expect(response.body.data.stocks[0]).toHaveProperty("symbol", "AAPL");

      at Object.toHaveProperty (tests/unit/routes/screener.test.js:151:34)

  ● Screener Routes Unit Tests › GET /screener/screen (authenticated) › should handle price filter parameters

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "close >=", ArrayContaining [100, 500, 50, 0]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      170 |
      171 |       expect(response.status).toBe(200);
    > 172 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      173 |         expect.stringContaining("close >="),
      174 |         expect.arrayContaining([100, 500, 50, 0])
      175 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:172:25)

  ● Screener Routes Unit Tests › GET /screener/screen (authenticated) › should handle market cap filter parameters

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "market_cap >=", ArrayContaining [1000000000, 100000000000]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      185 |
      186 |       expect(response.status).toBe(200);
    > 187 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      188 |         expect.stringContaining("market_cap >="),
      189 |         expect.arrayContaining([1000000000, 100000000000])
      190 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:187:25)

  ● Screener Routes Unit Tests › GET /screener/screen (authenticated) › should handle volume filter parameters

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "COALESCE(md.volume, pd.volume) >=", ArrayContaining [1000000]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      200 |
      201 |       expect(response.status).toBe(200);
    > 202 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      203 |         expect.stringContaining("COALESCE(md.volume, pd.volume) >="),
      204 |         expect.arrayContaining([1000000])
      205 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:202:25)

  ● Screener Routes Unit Tests › GET /screener/screen (authenticated) › should handle sector filter

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "sector =", ArrayContaining ["Technology"]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      214 |
      215 |       expect(response.status).toBe(200);
    > 216 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      217 |         expect.stringContaining("sector ="),
      218 |         expect.arrayContaining(["Technology"])
      219 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:216:25)

  ● Screener Routes Unit Tests › GET /screener/screen (authenticated) › should handle PE ratio filters

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "km.trailing_pe >=", ArrayContaining [10, 30]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      230 |
      231 |       expect(response.status).toBe(200);
    > 232 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      233 |         expect.stringContaining("km.trailing_pe >="),
      234 |         expect.arrayContaining([10, 30])
      235 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:232:25)

  ● Screener Routes Unit Tests › GET /screener/screen (authenticated) › should handle dividend yield filters

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "km.dividend_yield >=", ArrayContaining [2, 8]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      246 |
      247 |       expect(response.status).toBe(200);
    > 248 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      249 |         expect.stringContaining("km.dividend_yield >="),
      250 |         expect.arrayContaining([2, 8])
      251 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:248:25)

  ● Screener Routes Unit Tests › GET /screener/screen (authenticated) › should handle pagination parameters

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: Any<String>, ArrayContaining [100, 200]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      260 |
      261 |       expect(response.status).toBe(200);
    > 262 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      263 |         expect.any(String),
      264 |         expect.arrayContaining([100, 200]) // limit 100, offset 200 (page 3)
      265 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:262:25)

  ● Screener Routes Unit Tests › GET /screener/screen (authenticated) › should cap limit at 500

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: Any<String>, ArrayContaining [500, 0]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      274 |
      275 |       expect(response.status).toBe(200);
    > 276 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      277 |         expect.any(String),
      278 |         expect.arrayContaining([500, 0]) // Should be capped at 500
      279 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:276:25)

  ● Screener Routes Unit Tests › GET /screener/screen (authenticated) › should handle multiple filters combined

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringMatching /pd\.close >= .* AND pd\.close <= .* AND cp\.market_cap >= .* AND cp\.sector = .* AND km\.trailing_pe >= .* AND km\.trailing_pe <=/, ArrayContaining [50, 200, 5000000000, "Technology", 15, 25]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      294 |
      295 |       expect(response.status).toBe(200);
    > 296 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      297 |         expect.stringMatching(
      298 |           /pd\.close >= .* AND pd\.close <= .* AND cp\.market_cap >= .* AND cp\.sector = .* AND km\.trailing_pe >= .* AND km\.trailing_pe <=/
      299 |         ),

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:296:25)

  ● Screener Routes Unit Tests › GET /screener/screen (authenticated) › should handle empty results

    expect(received).toHaveProperty(path, value)

    Expected path: "stocks"
    Received path: []

    Expected value: []
    Received value: []

      324 |       expect(response.status).toBe(200);
      325 |       expect(response.body).toHaveProperty("success", true);
    > 326 |       expect(response.body.data).toHaveProperty("stocks", []);
          |                                  ^
      327 |       expect(response.body.data.pagination).toHaveProperty("totalCount", 0);
      328 |     });
      329 |

      at Object.toHaveProperty (tests/unit/routes/screener.test.js:326:34)

  ● Screener Routes Unit Tests › GET /screener/screen (authenticated) › should handle database query errors

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 200

      334 |       const response = await request(app).get("/screener/screen");
      335 |
    > 336 |       expect(response.status).toBe(500);
          |                               ^
      337 |       expect(response.body).toHaveProperty("success", false);
      338 |       expect(response.body.error).toBeDefined();
      339 |     });

      at Object.toBe (tests/unit/routes/screener.test.js:336:31)

  ● Screener Routes Unit Tests › Parameter validation › should sanitize SQL injection attempts

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: Any<String>, ArrayContaining ["Technology'; DROP TABLE stocks; --", 50]
    Received: "
          SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = $1
          );
        ", ["stocks"]

    Number of calls: 1

      388 |       expect(response.status).toBe(200);
      389 |       // Parameters should be safely passed as prepared statement params
    > 390 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      391 |         expect.any(String),
      392 |         expect.arrayContaining([
      393 |           "Technology'; DROP TABLE stocks; --",

      at Object.toHaveBeenCalledWith (tests/unit/routes/screener.test.js:390:25)

  ● Screener Routes Unit Tests › Error handling › should handle database timeout errors

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 200

      424 |       const response = await request(app).get("/screener/screen");
      425 |
    > 426 |       expect(response.status).toBe(500);
          |                               ^
      427 |       expect(response.body).toHaveProperty("success", false);
      428 |       expect(response.body.error).toBe("Database query failed");
      429 |     });

      at Object.toBe (tests/unit/routes/screener.test.js:426:31)

  ● Screener Routes Unit Tests › Response format › should include pagination metadata

    expect(received).toHaveProperty(path)

    Expected path: "pagination"
    Received path: []

    Received value: []

      447 |
      448 |       expect(response.status).toBe(200);
    > 449 |       expect(response.body.data).toHaveProperty("pagination");
          |                                  ^
      450 |       expect(response.body.data.pagination).toHaveProperty("page", 2);
      451 |       expect(response.body.data.pagination).toHaveProperty("limit", 50);
      452 |       expect(response.body.data.pagination).toHaveProperty("totalCount", 250);

      at Object.toHaveProperty (tests/unit/routes/screener.test.js:449:34)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    Processing request: GET /api/earnings

      at log (index.js:429:11)

  console.log
    Initializing database connection...

      at log (index.js:388:13)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

  console.log
    Database connection established successfully

      at log (index.js:414:17)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    📈 Earnings data requested

      at log (routes/earnings.js:35:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:45 +0000] "GET /api/earnings HTTP/1.1" 200 2618 "-" "-"
  console.log
    Processing request: GET /api/earnings/AAPL

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    📈 Earnings details requested for symbol: AAPL

      at log (routes/earnings.js:400:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:45 +0000] "GET /api/earnings/AAPL HTTP/1.1" 200 547 "-" "-"
  console.log
    Processing request: GET /api/earnings

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    📈 Earnings data requested

      at log (routes/earnings.js:35:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:45 +0000] "GET /api/earnings?period=upcoming&limit=5 HTTP/1.1" 200 2204 "-" "-"
  console.log
    Processing request: GET /api/calendar/earnings

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    📅 Earnings calendar requested - symbol: all, days_ahead: 30

      at log (routes/calendar.js:80:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:45 +0000] "GET /api/calendar/earnings HTTP/1.1" 200 2398 "-" "-"
  console.log
    Processing request: GET /api/calendar/earnings-history

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:45 +0000] "GET /api/calendar/earnings-history HTTP/1.1" 200 2617 "-" "-"
  console.log
    Processing request: GET /api/calendar/earnings-estimates

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:45 +0000] "GET /api/calendar/earnings-estimates HTTP/1.1" 200 1442 "-" "-"
  console.log
    Processing request: GET /api/earnings/INVALID_SYMBOL

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    📈 Earnings details requested for symbol: INVALID_SYMBOL

      at log (routes/earnings.js:400:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:45 +0000] "GET /api/earnings/INVALID_SYMBOL HTTP/1.1" 404 126 "-" "-"
FAIL tests/integration/routes/earnings.integration.test.js
  Earnings Data Integration
    Earnings Calendar (Delegated)
      ✓ should delegate to calendar earnings endpoint (28 ms)
      ✕ should delegate symbol-specific requests to calendar (8 ms)
      ✓ should handle query parameters for delegation (10 ms)
    Direct Calendar Earnings Access
      ✕ should access earnings via calendar route directly (15 ms)
      ✓ should access earnings history via calendar route (14 ms)
      ✓ should access earnings estimates via calendar route (10 ms)
    Error Handling
      ✓ should handle delegation errors gracefully (8 ms)

  ● Earnings Data Integration › Earnings Calendar (Delegated) › should delegate symbol-specific requests to calendar

    expect(received).toHaveProperty(path)

    Expected path: "earnings"
    Received path: []

    Received value: {"count": 2, "data": [{"eps_actual": "1.52", "eps_difference": null, "eps_estimate": "1.45", "last_updated": "2025-09-26T17:44:32.940Z", "quarter": "2025-09-26T05:00:00.000Z", "report_date": "2025-09-26T05:00:00.000Z", "surprise_percent": "4.8", "symbol": "AAPL"}, {"eps_actual": "2.18", "eps_difference": "0.08", "eps_estimate": "2.10", "last_updated": "2025-09-25T03:26:22.135Z", "quarter": "2024-01-15T06:00:00.000Z", "report_date": "2024-01-15T06:00:00.000Z", "surprise_percent": "3.81", "symbol": "AAPL"}], "success": true, "symbol": "AAPL", "timestamp": "2025-09-27T02:48:45.378Z"}

      28 |
      29 |       if (response.status === 200) {
    > 30 |         expect(response.body).toHaveProperty("earnings");
         |                               ^
      31 |         expect(Array.isArray(response.body.earnings)).toBe(true);
      32 |       }
      33 |     });

      at Object.toHaveProperty (tests/integration/routes/earnings.integration.test.js:30:31)

  ● Earnings Data Integration › Direct Calendar Earnings Access › should access earnings via calendar route directly

    expect(received).toHaveProperty(path)

    Expected path: "earnings"
    Received path: []

    Received value: {"data": {"earnings": [{"actual_eps": "1.52", "company_name": "Apple Inc.", "days_until": 0, "estimated_eps": "1.45", "market_cap": null, "period": "QFri Sep 26 2025 00:00:00 GMT-0500 (Central Daylight Time) 2025", "quarter": null, "report_date": "2025-09-26T05:00:00.000Z", "sector": "Technology", "status": "reported", "surprise_percent": "4.80", "symbol": "AAPL", "year": 2025}, {"actual_eps": "1.44", "company_name": "Alphabet Inc.", "days_until": 0, "estimated_eps": "1.38", "market_cap": "1800000000000", "period": "QFri Sep 26 2025 00:00:00 GMT-0500 (Central Daylight Time) 2025", "quarter": null, "report_date": "2025-09-26T05:00:00.000Z", "sector": "Technology", "status": "reported", "surprise_percent": "4.30", "symbol": "GOOGL", "year": 2025}, {"actual_eps": "2.93", "company_name": "Microsoft Corp.", "days_until": 0, "estimated_eps": "2.85", "market_cap": "3200000000000", "period": "QFri Sep 26 2025 00:00:00 GMT-0500 (Central Daylight Time) 2025", "quarter": null, "report_date": "2025-09-26T05:00:00.000Z", "sector": "Technology", "status": "reported", "surprise_percent": "2.80", "symbol": "MSFT", "year": 2025}], "grouped_by_date": {"Fri Sep 26 2025 00:00:00 GMT-0500 (Central Daylight Time)": [{"actual_eps": "1.52", "company_name": "Apple Inc.", "days_until": 0, "estimated_eps": "1.45", "market_cap": null, "period": "QFri Sep 26 2025 00:00:00 GMT-0500 (Central Daylight Time) 2025", "quarter": null, "report_date": "2025-09-26T05:00:00.000Z", "sector": "Technology", "status": "reported", "surprise_percent": "4.80", "symbol": "AAPL", "year": 2025}, {"actual_eps": "1.44", "company_name": "Alphabet Inc.", "days_until": 0, "estimated_eps": "1.38", "market_cap": "1800000000000", "period": "QFri Sep 26 2025 00:00:00 GMT-0500 (Central Daylight Time) 2025", "quarter": null, "report_date": "2025-09-26T05:00:00.000Z", "sector": "Technology", "status": "reported", "surprise_percent": "4.30", "symbol": "GOOGL", "year": 2025}, {"actual_eps": "2.93", "company_name": "Microsoft Corp.", "days_until": 0, "estimated_eps": "2.85", "market_cap": "3200000000000", "period": "QFri Sep 26 2025 00:00:00 GMT-0500 (Central Daylight Time) 2025", "quarter": null, "report_date": "2025-09-26T05:00:00.000Z", "sector": "Technology", "status": "reported", "surprise_percent": "2.80", "symbol": "MSFT", "year": 2025}]}, "summary": {"completed_reports": 3, "date_range": {"from": "2025-09-26T05:00:00.000Z", "to": "2025-09-26T05:00:00.000Z"}, "sectors_represented": 1, "total_earnings": 3, "upcoming_reports": 0}}, "success": true, "timestamp": "2025-09-27T02:48:45.405Z"}

      56 |
      57 |       if (response.status === 200) {
    > 58 |         expect(response.body).toHaveProperty("earnings");
         |                               ^
      59 |         expect(Array.isArray(response.body.earnings)).toBe(true);
      60 |       }
      61 |     });

      at Object.toHaveProperty (tests/integration/routes/earnings.integration.test.js:58:31)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

  console.log
    JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    💰 Current price requested for AAPL

      at log (routes/price.js:510:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:45 +0000] "GET /api/price/AAPL HTTP/1.1" 200 256 "-" "-"
  console.log
    💰 Current price requested for INVALID

      at log (routes/price.js:510:13)

  console.log
    ❌ Invalid symbol format: INVALID

      at log (routes/price.js:540:17)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:45 +0000] "GET /api/price/INVALID HTTP/1.1" 404 131 "-" "-"
  console.log
    📈 Price history requested for AAPL (period: 1Y)

      at log (routes/price.js:603:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:45 +0000] "GET /api/price/AAPL/history HTTP/1.1" 200 273 "-" "-"
  console.log
    📈 Price history requested for AAPL (period: 1M)

      at log (routes/price.js:603:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:45 +0000] "GET /api/price/AAPL/history?period=1M HTTP/1.1" 200 273 "-" "-"
  console.log
    ⏰ Intraday data requested for AAPL (interval: 5m)

      at log (routes/price.js:673:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:45 +0000] "GET /api/price/AAPL/intraday HTTP/1.1" 200 391 "-" "-"
  console.log
    ⏰ Intraday data requested for AAPL (interval: 5min)

      at log (routes/price.js:673:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:45 +0000] "GET /api/price/AAPL/intraday?interval=5min HTTP/1.1" 200 391 "-" "-"
  console.log
    📊 Batch price request for 3 symbols

      at log (routes/price.js:755:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:45 +0000] "POST /api/price/batch HTTP/1.1" 200 658 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:45 +0000] "POST /api/price/batch HTTP/1.1" 400 92 "-" "-"
  console.log
    🚨 Price alerts requested - symbol: all, status: all, type: all

      at log (routes/price.js:70:13)

  console.log
    🔔 Price alerts requested for symbol: undefined, user: undefined

      at log (routes/price.js:145:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:45 +0000] "GET /api/price/alerts HTTP/1.1" 200 6730 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:45 +0000] "POST /api/price/alerts HTTP/1.1" 400 179 "-" "-"
PASS tests/integration/routes/price.integration.test.js
  Price Routes
    GET /api/price/:symbol
      ✓ should return current price for symbol (19 ms)
      ✓ should handle invalid symbol (11 ms)
    GET /api/price/:symbol/history
      ✓ should return price history (9 ms)
      ✓ should handle period parameter (8 ms)
    GET /api/price/:symbol/intraday
      ✓ should return intraday prices (9 ms)
      ✓ should handle interval parameter (8 ms)
    POST /api/price/batch
      ✓ should return prices for multiple symbols (11 ms)
      ✓ should validate symbols array (4 ms)
    GET /api/price/alerts
      ✓ should return price alerts (9 ms)
    POST /api/price/alerts
      ✓ should create price alert (5 ms)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

  console.log
    JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:46 +0000] "GET /api/watchlist HTTP/1.1" 200 971 "-" "-"
  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:46 +0000] "POST /api/watchlist HTTP/1.1" 400 44 "-" "-"
  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:46 +0000] "POST /api/watchlist HTTP/1.1" 400 44 "-" "-"
  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:46 +0000] "DELETE /api/watchlist/AAPL HTTP/1.1" 400 203 "-" "-"
  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:46 +0000] "GET /api/watchlist/1 HTTP/1.1" 404 47 "-" "-"
  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:46 +0000] "PUT /api/watchlist/AAPL HTTP/1.1" 400 178 "-" "-"
  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

  console.log
    🎯 Watchlist performance endpoint called

      at log (routes/watchlist.js:363:11)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:46 +0000] "GET /api/watchlist/performance HTTP/1.1" 200 261 "-" "-"
  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:46 +0000] "GET /api/watchlist/alerts HTTP/1.1" 200 131 "-" "-"
  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

  console.log
    📥 Watchlist import requested for user: dev-user-bypass

      at log (routes/watchlist.js:479:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:46 +0000] "POST /api/watchlist/import HTTP/1.1" 400 93 "-" "-"
  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:46 +0000] "GET /api/watchlist/export HTTP/1.1" 200 131 "-" "-"
FAIL tests/integration/routes/watchlist.integration.test.js
  Watchlist Routes
    GET /api/watchlist
      ✓ should return user watchlist (14 ms)
    POST /api/watchlist
      ✓ should return validation error for missing name (6 ms)
      ✓ should validate required symbol (8 ms)
    DELETE /api/watchlist/:id
      ✓ should return validation error for invalid ID format (6 ms)
    GET /api/watchlist/:listId
      ✓ should return specific watchlist (8 ms)
    PUT /api/watchlist/:id
      ✓ should return validation error for invalid ID format (7 ms)
    GET /api/watchlist/performance
      ✕ should return watchlist performance (10 ms)
    GET /api/watchlist/alerts
      ✕ should return price alerts (7 ms)
    POST /api/watchlist/import
      ✕ should import watchlist from CSV (9 ms)
    GET /api/watchlist/export
      ✕ should export watchlist to CSV (7 ms)

  ● Watchlist Routes › GET /api/watchlist/performance › should return watchlist performance

    expect(received).toHaveProperty(path)

    Matcher error: received value must not be null nor undefined

    Received has value: undefined

      109 |       if (response.status === 200) {
      110 |         expect(response.body.success).toBe(true);
    > 111 |         expect(response.body.data).toHaveProperty("performance");
          |                                    ^
      112 |       }
      113 |     });
      114 |   });

      at Object.toHaveProperty (tests/integration/routes/watchlist.integration.test.js:111:36)

  ● Watchlist Routes › GET /api/watchlist/alerts › should return price alerts

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      124 |       if (response.status === 200) {
      125 |         expect(response.body.success).toBe(true);
    > 126 |         expect(Array.isArray(response.body.data)).toBe(true);
          |                                                   ^
      127 |       }
      128 |     });
      129 |   });

      at Object.toBe (tests/integration/routes/watchlist.integration.test.js:126:51)

  ● Watchlist Routes › POST /api/watchlist/import › should import watchlist from CSV

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 401, 422]

      138 |         .attach("file", Buffer.from(csvData), "watchlist.csv");
      139 |
    > 140 |       expect([200, 401, 422]).toContain(response.status);
          |                               ^
      141 |
      142 |       if (response.status === 200) {
      143 |         expect(response.body.success).toBe(true);

      at Object.toContain (tests/integration/routes/watchlist.integration.test.js:140:31)

  ● Watchlist Routes › GET /api/watchlist/export › should export watchlist to CSV

    expect(received).toContain(expected) // indexOf

    Expected substring: "text/csv"
    Received string:    "application/json; charset=utf-8"

      155 |
      156 |       if (response.status === 200) {
    > 157 |         expect(response.headers["content-type"]).toContain("text/csv");
          |                                                  ^
      158 |       }
      159 |     });
      160 |   });

      at Object.toContain (tests/integration/routes/watchlist.integration.test.js:157:50)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 495 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 495 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 495 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 495 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 495 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 495 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Handled 50 requests in 529ms

      at Object.log (tests/performance/api-load-testing.test.js:71:15)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /api/health

      at log (index.js:429:11)

  console.log
    Initializing database connection...

      at log (index.js:388:13)

  console.log
    Database connection established successfully

      at log (index.js:414:17)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /api/stocks/ping

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/ping HTTP/1.1" 200 74 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /api/health

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /api/stocks/ping

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/ping HTTP/1.1" 200 74 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /api/health

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /api/stocks/ping

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/ping HTTP/1.1" 200 74 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /api/health

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /api/stocks/ping

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/ping HTTP/1.1" 200 74 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /api/health

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /api/stocks/ping

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/ping HTTP/1.1" 200 74 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /api/health

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /api/stocks/ping

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/ping HTTP/1.1" 200 74 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /api/health

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /api/stocks/ping

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/ping HTTP/1.1" 200 74 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /api/health

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /api/stocks/ping

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/ping HTTP/1.1" 200 74 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 495 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Response status distribution: { '200': 25 }

      at Object.log (tests/performance/api-load-testing.test.js:97:15)

  console.log
    25/25 concurrent authenticated requests succeeded in 186ms

      at Object.log (tests/performance/api-load-testing.test.js:103:15)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    Database load test: 7.05ms average response time

      at Object.log (tests/performance/api-load-testing.test.js:132:15)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Health endpoint: 10.60ms avg, 12ms max

      at Object.log (tests/performance/api-load-testing.test.js:159:15)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    /api/stocks/sectors: 8.40ms avg (target: 300ms)

      at Object.log (tests/performance/api-load-testing.test.js:191:17)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 494 "-" "-"
  console.log
    /health: 10.80ms avg (target: 100ms)

      at Object.log (tests/performance/api-load-testing.test.js:191:17)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:47 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Large payload: 496 bytes in 11ms (45.09 bytes/ms)

      at Object.log (tests/performance/api-load-testing.test.js:214:15)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 495 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 495 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 495 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 495 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 495 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 495 "-" "-"
  console.log
    Rapid requests: 20 success, 0 rate-limited in 179ms

      at Object.log (tests/performance/api-load-testing.test.js:244:15)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:48 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 495 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 495 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 495 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Memory usage - Initial: 547.25MB, Final: 551.96MB

      at Object.log (tests/performance/api-load-testing.test.js:299:15)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 495 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 495 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:49 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:50 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:50 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:50 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:50 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:50 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:50 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:50 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:50 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:50 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:50 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:50 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:50 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:50 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:50 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Connection cleanup test - Memory increase: 7.19MB

      at Object.log (tests/performance/api-load-testing.test.js:334:15)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health/database HTTP/1.1" 200 14861 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health/database HTTP/1.1" 200 14861 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health/database HTTP/1.1" 200 14861 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health/database HTTP/1.1" 200 14861 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health/database HTTP/1.1" 200 14861 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health/database HTTP/1.1" 200 14861 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health/database HTTP/1.1" 200 14861 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health/database HTTP/1.1" 200 14861 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health/database HTTP/1.1" 200 14861 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health/database HTTP/1.1" 200 14861 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health/database HTTP/1.1" 200 14861 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health/database HTTP/1.1" 200 14861 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health/database HTTP/1.1" 200 14861 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health/database HTTP/1.1" 200 14861 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health/database HTTP/1.1" 200 14861 "-" "-"
  console.log
    Database concurrent queries: 93.53ms average

      at Object.log (tests/performance/api-load-testing.test.js:361:15)

  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    Processing request: GET /api/stocks/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Sectors endpoint called (public)

      at log (routes/stocks.js:36:13)

  console.log
    ✅ Sectors query successful: 2 sectors found

      at log (routes/stocks.js:79:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/stocks/sectors HTTP/1.1" 200 227 "-" "-"
  console.log
    Query performance with larger dataset: 9.00ms average

      at Object.log (tests/performance/api-load-testing.test.js:397:15)

  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Processing request: GET /api/nonexistent-endpoint

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/nonexistent-endpoint HTTP/1.1" 404 638 "-" "-"
  console.log
    Error handling: 4.75ms average for 404 responses

      at Object.log (tests/performance/api-load-testing.test.js:423:15)

  console.log
    Processing request: GET /api/portfolio/holdings

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/portfolio/holdings HTTP/1.1" 401 64 "-" "-"
  console.log
    Processing request: GET /api/portfolio/holdings

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/portfolio/holdings HTTP/1.1" 401 64 "-" "-"
  console.log
    Processing request: GET /api/portfolio/holdings

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/portfolio/holdings HTTP/1.1" 401 64 "-" "-"
  console.log
    Processing request: GET /api/portfolio/holdings

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/portfolio/holdings HTTP/1.1" 401 64 "-" "-"
  console.log
    Processing request: GET /api/portfolio/holdings

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/portfolio/holdings HTTP/1.1" 401 64 "-" "-"
  console.log
    Processing request: GET /api/portfolio/holdings

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/portfolio/holdings HTTP/1.1" 401 64 "-" "-"
  console.log
    Processing request: GET /api/portfolio/holdings

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/portfolio/holdings HTTP/1.1" 401 64 "-" "-"
  console.log
    Processing request: GET /api/portfolio/holdings

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/portfolio/holdings HTTP/1.1" 401 64 "-" "-"
  console.log
    Processing request: GET /api/portfolio/holdings

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/portfolio/holdings HTTP/1.1" 401 64 "-" "-"
  console.log
    Processing request: GET /api/portfolio/holdings

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/portfolio/holdings HTTP/1.1" 401 64 "-" "-"
  console.log
    Processing request: GET /api/portfolio/holdings

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/portfolio/holdings HTTP/1.1" 401 64 "-" "-"
  console.log
    Processing request: GET /api/portfolio/holdings

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/portfolio/holdings HTTP/1.1" 401 64 "-" "-"
  console.log
    Processing request: GET /api/portfolio/holdings

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/portfolio/holdings HTTP/1.1" 401 64 "-" "-"
  console.log
    Processing request: GET /api/portfolio/holdings

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/portfolio/holdings HTTP/1.1" 401 64 "-" "-"
  console.log
    Processing request: GET /api/portfolio/holdings

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /api/portfolio/holdings HTTP/1.1" 401 64 "-" "-"
  console.log
    Auth error handling: 5.20ms average

      at Object.log (tests/performance/api-load-testing.test.js:448:15)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health HTTP/1.1" 200 495 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health HTTP/1.1" 200 494 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:51 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:52 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:52 +0000] "GET /health/database HTTP/1.1" 200 14861 "-" "-"
  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:52 +0000] "GET /health/database HTTP/1.1" 200 14861 "-" "-"
  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:52 +0000] "GET /health/database HTTP/1.1" 200 14859 "-" "-"
  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:52 +0000] "GET /health/database HTTP/1.1" 200 14861 "-" "-"
  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:52 +0000] "GET /health/database HTTP/1.1" 200 14862 "-" "-"
  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:52 +0000] "GET /health/database HTTP/1.1" 200 14862 "-" "-"
  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:53 +0000] "GET /health/database HTTP/1.1" 200 14862 "-" "-"
  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:53 +0000] "GET /health/database HTTP/1.1" 200 14860 "-" "-"
  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:53 +0000] "GET /health/database HTTP/1.1" 200 14862 "-" "-"
  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:53 +0000] "GET /health/database HTTP/1.1" 200 14862 "-" "-"
  console.log
    /health - Avg: 11.39ms, Min: 9.42ms, Max: 13.63ms, P95: 13.63ms

      at log (tests/performance/api-load-testing.test.js:487:17)
          at Array.forEach (<anonymous>)

  console.log
    /health/database - Avg: 156.99ms, Min: 142.81ms, Max: 174.07ms, P95: 174.07ms

      at log (tests/performance/api-load-testing.test.js:487:17)
          at Array.forEach (<anonymous>)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:53 +0000] "GET /health HTTP/1.1" 200 497 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:53 +0000] "GET /health HTTP/1.1" 200 497 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:53 +0000] "GET /health/database HTTP/1.1" 200 14862 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:53 +0000] "GET /health HTTP/1.1" 200 497 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:53 +0000] "GET /health HTTP/1.1" 200 497 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:53 +0000] "GET /health/database HTTP/1.1" 200 14862 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:53 +0000] "GET /health HTTP/1.1" 200 497 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:53 +0000] "GET /health HTTP/1.1" 200 497 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:54 +0000] "GET /health/database HTTP/1.1" 200 14862 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:54 +0000] "GET /health HTTP/1.1" 200 497 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:54 +0000] "GET /health HTTP/1.1" 200 497 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:54 +0000] "GET /health/database HTTP/1.1" 200 14862 "-" "-"
  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

  console.log
    Processing request: GET /health/database

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    Received request for /health/database

      at log (routes/health.js:535:11)

  console.log
    Processing request: GET /health

      at log (index.js:429:11)

  console.log
    Endpoint does not require database connection

      at log (index.js:436:13)

  console.log
    Starting health check with database...

      at log (routes/health.js:36:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:54 +0000] "GET /health HTTP/1.1" 200 497 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:54 +0000] "GET /health HTTP/1.1" 200 496 "-" "-"
::ffff:127.0.0.1 - - [27/Sep/2025:02:48:54 +0000] "GET /health/database HTTP/1.1" 200 14862 "-" "-"
  console.log
    Performance consistency - Avg: 200.00ms, StdDev: 5.55ms

      at Object.log (tests/performance/api-load-testing.test.js:532:15)

PASS tests/performance/api-load-testing.test.js (7.957 s)
  API Load Testing and Performance
    Concurrent Request Handling
      ✓ should handle multiple concurrent health check requests (598 ms)
      ✓ should handle concurrent authenticated requests (194 ms)
      ✓ should maintain performance under database load (149 ms)
    Response Time Benchmarks
      ✓ health endpoint should respond quickly (106 ms)
      ✓ stock data endpoints should meet performance targets (98 ms)
      ✓ should maintain performance with large response payloads (12 ms)
    Rate Limiting and Throttling
      ✓ should handle rapid successive requests appropriately (185 ms)
      ✓ should recover from rate limiting gracefully (1292 ms)
    Memory and Resource Usage
      ✓ should maintain stable memory usage under load (457 ms)
      ✓ should handle connection cleanup properly (363 ms)
    Database Performance Under Load
      ✓ should handle concurrent database queries efficiently (1409 ms)
      ✓ should maintain query performance with data growth (45 ms)
    Error Handling Performance
      ✓ should handle errors efficiently without performance degradation (103 ms)
      ✓ should handle authentication errors efficiently (84 ms)
    Performance Monitoring and Metrics
      ✓ should track response time metrics (1686 ms)
      ✓ should maintain consistent performance across test run (1002 ms)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    Processing request: GET /api/analysts/recommendations/AAPL

      at log (index.js:429:11)

  console.log
    Initializing database connection...

      at log (index.js:388:13)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

  console.log
    Database connection established successfully

      at log (index.js:414:17)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    📊 Analyst recommendations requested for AAPL

      at log (routes/analysts.js:851:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:55 +0000] "GET /api/analysts/recommendations/AAPL HTTP/1.1" 404 123 "-" "-"
  console.log
    Processing request: GET /api/analysts/recommendations/INVALID123

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    📊 Analyst recommendations requested for INVALID123

      at log (routes/analysts.js:851:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:55 +0000] "GET /api/analysts/recommendations/INVALID123 HTTP/1.1" 404 135 "-" "-"
  console.log
    Processing request: GET /api/analysts/coverage/AAPL

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:55 +0000] "GET /api/analysts/coverage/AAPL HTTP/1.1" 404 644 "-" "-"
  console.log
    Processing request: GET /api/analysts/price-targets/AAPL

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:55 +0000] "GET /api/analysts/price-targets/AAPL HTTP/1.1" 404 659 "-" "-"
  console.log
    Processing request: GET /api/analysts/consensus/AAPL

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    🤝 Analyst consensus requested for AAPL

      at log (routes/analysts.js:1342:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:55 +0000] "GET /api/analysts/consensus/AAPL HTTP/1.1" 200 337 "-" "-"
  console.log
    Processing request: GET /api/analysts/research

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.error
    Database query error: {
      error: 'column "firm" does not exist',
      query: '\n' +
        '      SELECT\n' +
        '        id, symbol, firm, title, rating, price_target,\n' +
        '        published_date, analyst...',
      params: '2 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/analysts.js:1569:20

  console.warn
    Database query error (returning null for tests): column "firm" does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at routes/analysts.js:1569:20

  console.error
    Research reports error: TypeError: Cannot read properties of null (reading 'rows')
        at rows (/home/stocks/algo/webapp/lambda/routes/analysts.js:1571:16)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)

      1596 |     });
      1597 |   } catch (error) {
    > 1598 |     console.error("Research reports error:", error);
           |             ^
      1599 |     res.status(500).json({
      1600 |       success: false,
      1601 |       error: "Failed to fetch research reports",

      at error (routes/analysts.js:1598:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:55 +0000] "GET /api/analysts/research?symbol=AAPL&limit=10 HTTP/1.1" 500 120 "-" "-"
  console.log
    Processing request: GET /api/analysts/research

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.error
    Database query error: {
      error: 'column "firm" does not exist',
      query: '\n' +
        '      SELECT\n' +
        '        id, symbol, firm, title, rating, price_target,\n' +
        '        published_date, analyst...',
      params: '2 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/analysts.js:1569:20

  console.warn
    Database query error (returning null for tests): column "firm" does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at routes/analysts.js:1569:20

  console.error
    Research reports error: TypeError: Cannot read properties of null (reading 'rows')
        at rows (/home/stocks/algo/webapp/lambda/routes/analysts.js:1571:16)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)

      1596 |     });
      1597 |   } catch (error) {
    > 1598 |     console.error("Research reports error:", error);
           |             ^
      1599 |     res.status(500).json({
      1600 |       success: false,
      1601 |       error: "Failed to fetch research reports",

      at error (routes/analysts.js:1598:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:55 +0000] "GET /api/analysts/research?firm=Goldman&limit=5 HTTP/1.1" 500 120 "-" "-"
FAIL tests/integration/analytics/analysts.test.js
  Analysts API
    Analyst Recommendations
      ✕ should retrieve analyst recommendations for stock (33 ms)
      ✓ should handle invalid stock symbols (8 ms)
    Analyst Coverage
      ✕ should retrieve analyst coverage for stock (10 ms)
    Price Targets
      ✕ should retrieve price targets for stock (7 ms)
      ✕ should provide consensus price targets (13 ms)
    Analyst Research
      ✕ should retrieve research reports (27 ms)
      ✕ should filter research by analyst firm (19 ms)

  ● Analysts API › Analyst Recommendations › should retrieve analyst recommendations for stock

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      15 |       );
      16 |
    > 17 |       expect(response.status).toBe(200);
         |                               ^
      18 |
      19 |       if (response.status === 200) {
      20 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/analysts.test.js:17:31)

  ● Analysts API › Analyst Coverage › should retrieve analyst coverage for stock

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      51 |       const response = await request(app).get("/api/analysts/coverage/AAPL");
      52 |
    > 53 |       expect(response.status).toBe(200);
         |                               ^
      54 |
      55 |       if (response.status === 200) {
      56 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/analysts.test.js:53:31)

  ● Analysts API › Price Targets › should retrieve price targets for stock

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      80 |       );
      81 |
    > 82 |       expect(response.status).toBe(200);
         |                               ^
      83 |
      84 |       if (response.status === 200) {
      85 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/analysts.test.js:82:31)

  ● Analysts API › Price Targets › should provide consensus price targets

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      116 |         );
      117 |
    > 118 |         expect(hasConsensusData).toBe(true);
          |                                  ^
      119 |       }
      120 |     });
      121 |   });

      at Object.toBe (tests/integration/analytics/analysts.test.js:118:34)

  ● Analysts API › Analyst Research › should retrieve research reports

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      127 |       );
      128 |
    > 129 |       expect(response.status).toBe(200);
          |                               ^
      130 |
      131 |       if (response.status === 200) {
      132 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/analysts.test.js:129:31)

  ● Analysts API › Analyst Research › should filter research by analyst firm

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      147 |       );
      148 |
    > 149 |       expect(response.status).toBe(200);
          |                               ^
      150 |
      151 |       if (response.status === 200) {
      152 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/analysts.test.js:149:31)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    Processing request: GET /api/recommendations

      at log (index.js:429:11)

  console.log
    Initializing database connection...

      at log (index.js:388:13)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

  console.log
    Database connection established successfully

      at log (index.js:414:17)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    🔧 Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

  console.log
    📊 Stock recommendations requested - symbol: all, category: all

      at log (routes/recommendations.js:20:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:55 +0000] "GET /api/recommendations HTTP/1.1" 200 2011 "-" "-"
  console.log
    Processing request: GET /api/recommendations

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    🔧 Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

  console.log
    📊 Stock recommendations requested - symbol: all, category: all

      at log (routes/recommendations.js:20:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:55 +0000] "GET /api/recommendations?type=buy&limit=10 HTTP/1.1" 200 2011 "-" "-"
  console.log
    Processing request: GET /api/recommendations/sectors

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:55 +0000] "GET /api/recommendations/sectors HTTP/1.1" 404 647 "-" "-"
  console.log
    Processing request: GET /api/recommendations/sectors/Technology

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:55 +0000] "GET /api/recommendations/sectors/Technology HTTP/1.1" 404 680 "-" "-"
  console.log
    Processing request: GET /api/recommendations/ai

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    🔧 Test mode: Using test-token for authentication

      at log (middleware/auth.js:66:15)

  console.log
    🤖 AI recommendations requested - symbol: all, risk: moderate, strategy: balanced

      at log (routes/recommendations.js:329:15)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:55 +0000] "GET /api/recommendations/ai?risk_tolerance=moderate&investment_horizon=long HTTP/1.1" 200 7911 "-" "-"
  console.log
    Processing request: GET /api/recommendations/allocation

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:55 +0000] "GET /api/recommendations/allocation HTTP/1.1" 404 656 "-" "-"
  console.log
    Processing request: GET /api/recommendations/similar/AAPL

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:55 +0000] "GET /api/recommendations/similar/AAPL HTTP/1.1" 404 662 "-" "-"
  console.log
    Processing request: GET /api/recommendations/alternatives

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:55 +0000] "GET /api/recommendations/alternatives HTTP/1.1" 404 662 "-" "-"
  console.log
    Processing request: GET /api/recommendations/performance

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:55 +0000] "GET /api/recommendations/performance HTTP/1.1" 404 659 "-" "-"
FAIL tests/integration/analytics/recommendations.test.js
  Recommendations API
    Stock Recommendations
      ✕ should retrieve personalized stock recommendations (35 ms)
      ✕ should filter recommendations by type (11 ms)
    Sector Recommendations
      ✕ should provide sector-based recommendations (10 ms)
      ✕ should get recommendations for specific sector (6 ms)
    AI-Generated Recommendations
      ✕ should provide AI-generated stock picks (11 ms)
      ✕ should generate portfolio allocation recommendations (6 ms)
    Similar Stocks
      ✕ should find similar stocks based on characteristics (6 ms)
      ✕ should recommend alternatives to current holdings (8 ms)
    Performance Tracking
      ✕ should track recommendation performance (6 ms)

  ● Recommendations API › Stock Recommendations › should retrieve personalized stock recommendations

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      19 |       if (response.status === 200) {
      20 |         expect(response.body).toHaveProperty("success", true);
    > 21 |         expect(Array.isArray(response.body.data)).toBe(true);
         |                                                   ^
      22 |
      23 |         if (response.body.data.length > 0) {
      24 |           const recommendation = response.body.data[0];

      at Object.toBe (tests/integration/analytics/recommendations.test.js:21:51)

  ● Recommendations API › Stock Recommendations › should filter recommendations by type

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      52 |       if (response.status === 200) {
      53 |         expect(response.body).toHaveProperty("success", true);
    > 54 |         expect(Array.isArray(response.body.data)).toBe(true);
         |                                                   ^
      55 |
      56 |         if (response.body.data.length > 0) {
      57 |           const recommendation = response.body.data[0];

      at Object.toBe (tests/integration/analytics/recommendations.test.js:54:51)

  ● Recommendations API › Sector Recommendations › should provide sector-based recommendations

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      66 |       const response = await request(app).get("/api/recommendations/sectors");
      67 |
    > 68 |       expect(response.status).toBe(200);
         |                               ^
      69 |
      70 |       if (response.status === 200) {
      71 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/recommendations.test.js:68:31)

  ● Recommendations API › Sector Recommendations › should get recommendations for specific sector

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      94 |       );
      95 |
    > 96 |       expect(response.status).toBe(200);
         |                               ^
      97 |
      98 |       if (response.status === 200) {
      99 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/recommendations.test.js:96:31)

  ● Recommendations API › AI-Generated Recommendations › should provide AI-generated stock picks

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      115 |       if (response.status === 200) {
      116 |         expect(response.body).toHaveProperty("success", true);
    > 117 |         expect(Array.isArray(response.body.data)).toBe(true);
          |                                                   ^
      118 |
      119 |         if (response.body.data.length > 0) {
      120 |           const aiRec = response.body.data[0];

      at Object.toBe (tests/integration/analytics/recommendations.test.js:117:51)

  ● Recommendations API › AI-Generated Recommendations › should generate portfolio allocation recommendations

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      131 |         .set("Authorization", "Bearer test-token");
      132 |
    > 133 |       expect(response.status).toBe(200);
          |                               ^
      134 |
      135 |       if (response.status === 200) {
      136 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/recommendations.test.js:133:31)

  ● Recommendations API › Similar Stocks › should find similar stocks based on characteristics

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      155 |       );
      156 |
    > 157 |       expect(response.status).toBe(200);
          |                               ^
      158 |
      159 |       if (response.status === 200) {
      160 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/recommendations.test.js:157:31)

  ● Recommendations API › Similar Stocks › should recommend alternatives to current holdings

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      175 |         .set("Authorization", "Bearer test-token");
      176 |
    > 177 |       expect(response.status).toBe(200);
          |                               ^
      178 |
      179 |       if (response.status === 200) {
      180 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/recommendations.test.js:177:31)

  ● Recommendations API › Performance Tracking › should track recommendation performance

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      196 |         .set("Authorization", "Bearer test-token");
      197 |
    > 198 |       expect(response.status).toBe(200);
          |                               ^
      199 |
      200 |       if (response.status === 200) {
      201 |         expect(response.body).toHaveProperty("success", true);

      at Object.toBe (tests/integration/analytics/recommendations.test.js:198:31)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    JWT verifier initialized successfully (test mode)

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:100:17)

  console.log
    📊 Fetching sector analysis...

      at log (routes/sectors.js:124:13)

  console.log
    ✅ Found 2 sectors

      at log (routes/sectors.js:184:13)

  console.log
    📊 Fetching sector analysis...

      at log (routes/sectors.js:124:13)

  console.log
    📊 Fetching sector analysis...

      at log (routes/sectors.js:124:13)

  console.log
    ✅ Found 0 sectors

      at log (routes/sectors.js:184:13)

  console.log
    📊 Fetching sector analysis...

      at log (routes/sectors.js:124:13)

  console.error
    ❌ Error in sector analysis: Error: Database connection failed
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/sectors.test.js:233:35)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      239 |     res.json(response);
      240 |   } catch (error) {
    > 241 |     console.error("❌ Error in sector analysis:", error);
          |             ^
      242 |     res.status(500).json({
      243 |       success: false,
      244 |       error: error.message || "Failed to fetch sector analysis",

      at error (routes/sectors.js:241:13)

  console.log
    📋 Fetching sector and industry list...

      at log (routes/sectors.js:256:13)

  console.log
    ✅ Found 5 sectors with 5 industries

      at log (routes/sectors.js:302:13)

  console.log
    📋 Fetching sector and industry list...

      at log (routes/sectors.js:256:13)

  console.log
    ✅ Found 0 sectors with 0 industries

      at log (routes/sectors.js:302:13)

  console.log
    📋 Fetching sector and industry list...

      at log (routes/sectors.js:256:13)

  console.error
    ❌ Error fetching sector list: Error: Database query failed
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/sectors.test.js:336:35)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      324 |     });
      325 |   } catch (error) {
    > 326 |     console.error("❌ Error fetching sector list:", error);
          |             ^
      327 |     res.status(500).json({
      328 |       success: false,
      329 |       error: error.message || "Failed to fetch sector list",

      at error (routes/sectors.js:326:13)

  console.log
    📊 Fetching detailed analysis for sector: Technology

      at log (routes/sectors.js:488:13)

  console.log
    ✅ Found 2 stocks in Technology sector

      at log (routes/sectors.js:609:13)

  console.log
    📊 Fetching detailed analysis for sector: NonExistentSector

      at log (routes/sectors.js:488:13)

  console.log
    📊 Fetching detailed analysis for sector: Technology

      at log (routes/sectors.js:488:13)

  console.error
    ❌ Error fetching details for sector Technology: Error: Database connection failed
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/sectors.test.js:488:35)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      653 |     });
      654 |   } catch (error) {
    > 655 |     console.error(
          |             ^
      656 |       `❌ Error fetching details for sector ${req.params.sector}:`,
      657 |       error
      658 |     );

      at error (routes/sectors.js:655:13)

  console.log
    📊 Fetching detailed analysis for sector: Consumer Discretionary

      at log (routes/sectors.js:488:13)

FAIL tests/unit/routes/sectors.test.js
  Sectors Routes
    GET /sectors/health
      ✓ should return health status (17 ms)
    GET /sectors/
      ✓ should return API status (10 ms)
    GET /sectors/analysis
      ✕ should return comprehensive sector analysis with default timeframe (11 ms)
      ✓ should handle timeframe parameter validation (11 ms)
      ✓ should accept valid timeframes (7 ms)
      ✓ should handle database errors (10 ms)
    GET /sectors/list
      ✓ should return list of available sectors (6 ms)
      ✓ should handle empty sector list (5 ms)
      ✓ should handle database errors for sector list (9 ms)
    GET /sectors/:sector/details
      ✕ should return detailed sector information (9 ms)
      ✓ should handle non-existent sector (5 ms)
      ✓ should handle database errors for sector details (9 ms)
      ✓ should handle URL encoded sector names (6 ms)

  ● Sectors Routes › GET /sectors/analysis › should return comprehensive sector analysis with default timeframe

    expect(received).toMatchObject(expected)

    - Expected  - 25
    + Received  + 36

    @@ -1,39 +1,50 @@
      Object {
    -   "data": ObjectContaining {
    -     "sectors": ArrayContaining [
    -       ObjectContaining {
    -         "industry": Any<String>,
    -         "metrics": ObjectContaining {
    -           "avg_price": Any<String>,
    -           "performance": ObjectContaining {
    -             "daily_change": Any<String>,
    -             "monthly_change": Any<String>,
    -             "performance_rank": Any<Number>,
    -             "weekly_change": Any<String>,
    +   "data": Object {
    +     "sectors": Array [
    +       Object {
    +         "metrics": Object {
    +           "avg_price": "125.50",
    +           "performance": Object {
    +             "monthly_change": "0.00",
                },
    -           "priced_stocks": Any<Number>,
    -           "stock_count": Any<Number>,
    +           "stock_count": 145,
    +           "technicals": Object {
    +             "avg_momentum": "0.15",
    +             "avg_rsi": "65.20",
                },
    +           "volume": Object {
    +             "total_volume": 0,
    +           },
    +         },
              "sector": "Technology",
            },
    -       ObjectContaining {
    -         "industry": Any<String>,
    -         "metrics": ObjectContaining {
    -           "priced_stocks": Any<Number>,
    -           "stock_count": Any<Number>,
    +       Object {
    +         "metrics": Object {
    +           "avg_price": "98.75",
    +           "performance": Object {
    +             "monthly_change": "0.00",
    +           },
    +           "stock_count": 98,
    +           "technicals": Object {
    +             "avg_momentum": "0.08",
    +             "avg_rsi": "58.10",
    +           },
    +           "volume": Object {
    +             "total_volume": 0,
    +           },
              },
              "sector": "Healthcare",
            },
          ],
    -     "summary": ObjectContaining {
    -       "avg_market_return": Any<String>,
    -       "bearish_sectors": Any<Number>,
    -       "bullish_sectors": Any<Number>,
    -       "neutral_sectors": Any<Number>,
    -       "total_sectors": Any<Number>,
    -       "total_stocks_analyzed": Any<Number>,
    +     "summary": Object {
    +       "avg_market_return": "0.00",
    +       "bearish_sectors": 0,
    +       "bullish_sectors": 0,
    +       "neutral_sectors": 2,
    +       "total_sectors": 2,
    +       "total_stocks_analyzed": 243,
          },
          "timeframe": "daily",
        },
        "success": true,
        "timestamp": Any<String>,

      159 |       const response = await request(app).get("/sectors/analysis").expect(200);
      160 |
    > 161 |       expect(response.body).toMatchObject({
          |                             ^
      162 |         success: true,
      163 |         data: expect.objectContaining({
      164 |           timeframe: "daily",

      at Object.toMatchObject (tests/unit/routes/sectors.test.js:161:29)

  ● Sectors Routes › GET /sectors/:sector/details › should return detailed sector information

    expect(received).toMatchObject(expected)

    - Expected  - 24
    + Received  + 40

    @@ -1,41 +1,57 @@
      Object {
        "data": Object {
          "industries": Any<Array>,
          "sector": "Technology",
    -     "stocks": ArrayContaining [
    -       ObjectContaining {
    -         "current_price": Any<String>,
    +     "stocks": Array [
    +       Object {
    +         "current_price": "175.25",
              "industry": "Consumer Electronics",
    -         "momentum": ObjectContaining {
    -           "jt_momentum_12_1": Any<String>,
    -           "momentum_3m": Any<String>,
    -           "momentum_6m": Any<String>,
    -           "risk_adjusted": Any<String>,
    -           "strength": Any<String>,
    +         "momentum": Object {
    +           "jt_momentum_12_1": "0.1200",
    +           "momentum_3m": "0.0800",
    +           "momentum_6m": "0.0600",
    +           "risk_adjusted": "0.1000",
    +           "strength": "85.50",
              },
              "name": "Apple Inc.",
    -         "performance": ObjectContaining {
    -           "daily_change": Any<String>,
    -           "monthly_change": Any<String>,
    -           "weekly_change": Any<String>,
    +         "performance": Object {
    +           "monthly_change": "12.50",
              },
    -         "symbol": "AAPL",
    -         "technicals": ObjectContaining {
    -           "macd": Any<String>,
    -           "macd_signal": Any<String>,
    -           "momentum": Any<String>,
    -           "rsi": Any<String>,
    -           "rsi_signal": Any<String>,
    -           "trend": Any<String>,
    +         "technicals": Object {
    +           "macd": "0.0250",
    +           "macd_signal": "bullish",
    +           "momentum": "0.15",
    +           "rsi": "65.20",
    +           "rsi_signal": "neutral",
    +           "trend": "bullish",
              },
    -         "volume": Any<Number>,
    +         "volume": 45000000,
            },
    -       ObjectContaining {
    +       Object {
    +         "current_price": "378.50",
              "industry": "Software Infrastructure",
    +         "momentum": Object {
    +           "jt_momentum_12_1": "0.0600",
    +           "momentum_3m": "0.0400",
    +           "momentum_6m": "0.0300",
    +           "risk_adjusted": "0.0500",
    +           "strength": "72.30",
    +         },
              "name": "Microsoft Corporation",
    -         "symbol": "MSFT",
    +         "performance": Object {
    +           "monthly_change": "9.75",
    +         },
    +         "technicals": Object {
    +           "macd": "0.0150",
    +           "macd_signal": "bullish",
    +           "momentum": "0.08",
    +           "rsi": "58.10",
    +           "rsi_signal": "neutral",
    +           "trend": "bullish",
    +         },
    +         "volume": 28000000,
            },
          ],
          "summary": ObjectContaining {
            "avg_jt_momentum": Any<String>,
            "avg_monthly_return": Any<String>,

      416 |         .expect(200);
      417 |
    > 418 |       expect(response.body).toMatchObject({
          |                             ^
      419 |         success: true,
      420 |         data: {
      421 |           sector: "Technology",

      at Object.toMatchObject (tests/unit/routes/sectors.test.js:418:29)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    JWT verifier initialized successfully (test mode)

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:100:17)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

  console.log
    Step 1: Setting up risk limits...

      at Object.log (tests/integration/risk-management-workflow.integration.test.js:62:15)

  console.log
    ⚠️ Portfolio risk requested for user: integration-test-user

      at log (routes/trading.js:2323:13)

  console.error
    Database query error: {
      error: 'column "total_value" of relation "portfolio_holdings" does not exist',
      query: '\n' +
        '          INSERT INTO portfolio_holdings (\n' +
        '            user_id, symbol, quantity, average_cost, cur...',
      params: '10 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/risk-management-workflow.integration.test.js:400:9)

  console.warn
    Database query error (returning null for tests): column "total_value" of relation "portfolio_holdings" does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at Object.<anonymous> (tests/integration/risk-management-workflow.integration.test.js:400:9)

  console.error
    Database query error: {
      error: 'column "total_value" of relation "portfolio_holdings" does not exist',
      query: '\n' +
        '          INSERT INTO portfolio_holdings (\n' +
        '            user_id, symbol, quantity, average_cost, cur...',
      params: '10 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/risk-management-workflow.integration.test.js:400:9)

  console.warn
    Database query error (returning null for tests): column "total_value" of relation "portfolio_holdings" does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at Object.<anonymous> (tests/integration/risk-management-workflow.integration.test.js:400:9)

  console.error
    Database query error: {
      error: 'column "total_value" of relation "portfolio_holdings" does not exist',
      query: '\n' +
        '          INSERT INTO portfolio_holdings (\n' +
        '            user_id, symbol, quantity, average_cost, cur...',
      params: '10 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/risk-management-workflow.integration.test.js:400:9)

  console.warn
    Database query error (returning null for tests): column "total_value" of relation "portfolio_holdings" does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at Object.<anonymous> (tests/integration/risk-management-workflow.integration.test.js:400:9)

  console.error
    Database query error: {
      error: 'column "total_value" of relation "portfolio_holdings" does not exist',
      query: '\n' +
        '        INSERT INTO portfolio_holdings (\n' +
        '          user_id, symbol, quantity, average_cost, current...',
      params: '10 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/risk-management-workflow.integration.test.js:448:7)

  console.warn
    Database query error (returning null for tests): column "total_value" of relation "portfolio_holdings" does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at Object.<anonymous> (tests/integration/risk-management-workflow.integration.test.js:448:7)

  console.log
    ⚠️ Portfolio risk requested for user: integration-test-user

      at log (routes/trading.js:2323:13)

  console.log
    ⚠️ Portfolio risk requested for user: integration-test-user

      at log (routes/trading.js:2323:13)

  console.error
    Database query error: {
      error: 'column "total_value" of relation "portfolio_holdings" does not exist',
      query: '\n' +
        '        INSERT INTO portfolio_holdings (\n' +
        '          user_id, symbol, quantity, average_cost, current...',
      params: '10 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/risk-management-workflow.integration.test.js:510:7)

  console.warn
    Database query error (returning null for tests): column "total_value" of relation "portfolio_holdings" does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at Object.<anonymous> (tests/integration/risk-management-workflow.integration.test.js:510:7)

  console.log
    ⚠️ Portfolio risk requested for user: integration-test-user

      at log (routes/trading.js:2323:13)

FAIL tests/integration/risk-management-workflow.integration.test.js
  Risk Management Workflow Integration Tests
    Complete Risk Management Workflow
      ✕ should execute full risk management lifecycle (16 ms)
      ✕ should handle empty portfolio risk analysis (13 ms)
      ✕ should handle multiple rapid position closes (35 ms)
      ✕ should maintain data consistency across concurrent operations (38 ms)
    Risk Limit Compliance Checking
      ✕ should detect and report risk limit violations (15 ms)

  ● Risk Management Workflow Integration Tests › Complete Risk Management Workflow › should execute full risk management lifecycle

    expected 200 "OK", got 401 "Unauthorized"

      76 |         .post("/api/trading/risk/limits")
      77 |         .send(riskLimits)
    > 78 |         .expect(200);
         |          ^
      79 |
      80 |       expect(limitsResponse.body.success).toBe(true);
      81 |       expect(limitsResponse.body.data.maxDrawdown).toBe(15.0);

      at Object.expect (tests/integration/risk-management-workflow.integration.test.js:78:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Risk Management Workflow Integration Tests › Complete Risk Management Workflow › should handle empty portfolio risk analysis

    TypeError: Cannot read properties of undefined (reading 'totalPositions')

      385 |
      386 |       expect(response.body.success).toBe(true);
    > 387 |       expect(response.body.data.portfolioSummary.totalPositions).toBe(0);
          |                                                  ^
      388 |       expect(response.body.data.portfolioSummary.totalValue).toBe(0);
      389 |       expect(response.body.data.riskMetrics.riskLevel).toBe("low");
      390 |       expect(response.body.data.recommendations).toContain(

      at Object.totalPositions (tests/integration/risk-management-workflow.integration.test.js:387:50)

  ● Risk Management Workflow Integration Tests › Complete Risk Management Workflow › should handle multiple rapid position closes

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      431 |       // All should succeed
      432 |       results.forEach((response) => {
    > 433 |         expect(response.status).toBe(200);
          |                                 ^
      434 |         expect(response.body.success).toBe(true);
      435 |         expect(response.body.data.realizedPnL).toBe(500);
      436 |       });

      at toBe (tests/integration/risk-management-workflow.integration.test.js:433:33)
          at Array.forEach (<anonymous>)
      at Object.forEach (tests/integration/risk-management-workflow.integration.test.js:432:15)

  ● Risk Management Workflow Integration Tests › Complete Risk Management Workflow › should maintain data consistency across concurrent operations

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      483 |       // All operations should succeed
      484 |       results.forEach((response) => {
    > 485 |         expect(response.status).toBe(200); // 404 acceptable if position already closed
          |                                 ^
      486 |         expect(response.body).toHaveProperty("success");
      487 |       });
      488 |

      at toBe (tests/integration/risk-management-workflow.integration.test.js:485:33)
          at Array.forEach (<anonymous>)
      at Object.forEach (tests/integration/risk-management-workflow.integration.test.js:484:15)

  ● Risk Management Workflow Integration Tests › Risk Limit Compliance Checking › should detect and report risk limit violations

    TypeError: Cannot read properties of undefined (reading 'riskLevel')

      534 |
      535 |       // Should detect violations
    > 536 |       expect(riskAnalysis.body.data.riskMetrics.riskLevel).toMatch(
          |                                                 ^
      537 |         /high|critical/
      538 |       );
      539 |

      at Object.riskLevel (tests/integration/risk-management-workflow.integration.test.js:536:49)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.warn
    Economic data count query returned null result, database may be unavailable

      145 |     // Add null safety check
      146 |     if (!countResult || !countResult.rows || countResult.rows.length === 0) {
    > 147 |       console.warn(
          |               ^
      148 |         "Economic data count query returned null result, database may be unavailable"
      149 |       );
      150 |       return res.status(503).json({

      at warn (routes/economic.js:147:15)

  console.error
    Economic data query failed: Database connection failed

      134 |       ]);
      135 |     } catch (error) {
    > 136 |       console.error("Economic data query failed:", error.message);
          |               ^
      137 |       return res.status(500).json({
      138 |         success: false,
      139 |         error: "Failed to fetch economic data",

      at error (routes/economic.js:136:15)

  console.warn
    Economic data count query returned null result, database may be unavailable

      145 |     // Add null safety check
      146 |     if (!countResult || !countResult.rows || countResult.rows.length === 0) {
    > 147 |       console.warn(
          |               ^
      148 |         "Economic data count query returned null result, database may be unavailable"
      149 |       );
      150 |       return res.status(503).json({

      at warn (routes/economic.js:147:15)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 100

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 10

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.error
    Error fetching economic data: Error: Query timeout
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/economic.test.js:326:35)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      247 |     });
      248 |   } catch (error) {
    > 249 |     console.error("Error fetching economic data:", error);
          |             ^
      250 |     // Return 200 with empty data instead of 500
      251 |     res.json({
      252 |       success: true,

      at error (routes/economic.js:249:13)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 50

      at log (routes/economic.js:224:13)

  console.log
    Economic data endpoint called with limit: 100

      at log (routes/economic.js:224:13)

FAIL tests/unit/routes/economic.test.js
  Economic Routes Unit Tests
    GET /economic
      ✓ should return economic data with pagination (13 ms)
      ✓ should handle pagination parameters (9 ms)
      ✓ should filter by series parameter (5 ms)
      ✓ should handle database unavailable gracefully (6 ms)
      ✓ should return 404 when no economic data found (7 ms)
      ✓ should return 404 when null economic data result (4 ms)
      ✕ should handle database errors (5 ms)
      ✓ should handle count query returning empty result (7 ms)
    GET /economic/data
      ✓ should return economic data for DataValidation page (6 ms)
      ✓ should handle limit parameter with maximum cap (5 ms)
      ✓ should handle small limit parameter (7 ms)
      ✓ should use default limit when not provided (5 ms)
      ✓ should return 404 when no data found (5 ms)
      ✓ should return 404 when null result (7 ms)
      ✓ should return 404 when undefined rows (5 ms)
      ✕ should handle database errors (6 ms)
      ✓ should include timestamp in ISO format (8 ms)
    Edge cases and error handling
      ✕ should handle invalid page numbers (4 ms)
      ✕ should handle negative page and limit (5 ms)
      ✕ should handle very large page numbers (7 ms)
      ✓ should handle special characters in series parameter (4 ms)
      ✕ should handle empty series parameter (5 ms)
      ✓ should handle invalid limit in data endpoint (7 ms)
    Response format validation
      ✓ should return consistent JSON response format (4 ms)
      ✓ should maintain consistent error response format (4 ms)
      ✕ should return proper data structure (7 ms)
    Data integrity tests
      ✓ should preserve numeric values correctly (4 ms)
      ✓ should handle large datasets (6 ms)
      ✓ should calculate pagination correctly (6 ms)

  ● Economic Routes Unit Tests › GET /economic › should handle database errors

    expect(received).toHaveProperty(path, value)

    Expected path: "error"

    Expected value: "Database error"
    Received value: "Failed to fetch economic data"

      189 |       expect([200, 404, 500]).toContain(response.status);
      190 |       expect([true, false]).toContain(response.body.success);
    > 191 |       expect(response.body).toHaveProperty("error", "Database error");
          |                             ^
      192 |       expect(response.body).toHaveProperty(
      193 |         "message",
      194 |         "Database connection failed"

      at Object.toHaveProperty (tests/unit/routes/economic.test.js:191:29)

  ● Economic Routes Unit Tests › GET /economic/data › should handle database errors

    expect(received).toHaveProperty(path, value)

    Expected path: "error"
    Received path: []

    Expected value: "Database error"
    Received value: {"count": 0, "data": [], "limit": 25, "message": "Economic data temporarily unavailable", "success": true, "timestamp": "2025-09-27T02:48:56.644Z"}

      330 |       expect([200, 404, 500]).toContain(response.status);
      331 |       expect([true, false]).toContain(response.body.success);
    > 332 |       expect(response.body).toHaveProperty("error", "Database error");
          |                             ^
      333 |       expect(response.body).toHaveProperty("message", "Query timeout");
      334 |     });
      335 |

      at Object.toHaveProperty (tests/unit/routes/economic.test.js:332:29)

  ● Economic Routes Unit Tests › Edge cases and error handling › should handle invalid page numbers

    TypeError: Cannot read properties of undefined (reading 'limit')

      367 |
      368 |       expect(response.body.pagination?.page || 1).toBe(1); // Default page
    > 369 |       expect(response.body.pagination.limit).toBe(25); // Default limit
          |                                       ^
      370 |     });
      371 |
      372 |     test("should handle negative page and limit", async () => {

      at Object.limit (tests/unit/routes/economic.test.js:369:39)

  ● Economic Routes Unit Tests › Edge cases and error handling › should handle negative page and limit

    TypeError: Cannot read properties of undefined (reading 'limit')

      383 |
      384 |       expect(response.body.pagination?.page || 1).toBe(1); // Defaults to 1
    > 385 |       expect(response.body.pagination.limit).toBe(25); // Defaults to 25
          |                                       ^
      386 |     });
      387 |
      388 |     test("should handle very large page numbers", async () => {

      at Object.limit (tests/unit/routes/economic.test.js:385:39)

  ● Economic Routes Unit Tests › Edge cases and error handling › should handle very large page numbers

    expect(received).toMatchObject(expected)

    - Expected  - 2
    + Received  + 2

      Object {
        "hasNext": false,
        "hasPrev": true,
        "limit": 25,
        "page": 999,
    -   "total": 10,
    -   "totalPages": 1,
    +   "total": 50,
    +   "totalPages": 2,
      }

      398 |       const response = await request(app).get("/economic?page=999&limit=25");
      399 |
    > 400 |       expect(response.body.pagination).toMatchObject({
          |                                        ^
      401 |         page: 999,
      402 |         limit: 25,
      403 |         total: 10,

      at Object.toMatchObject (tests/unit/routes/economic.test.js:400:40)

  ● Economic Routes Unit Tests › Edge cases and error handling › should handle empty series parameter

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: StringContaining "WHERE series_id = $1", ["", 25, 0]
    Received
           1
              "
          SELECT·
            series_id,
            date,
            value
          FROM economic_data·······
          ORDER BY series_id, date DESC
          LIMIT $1 OFFSET $2
        ",
              Array [
            -   "",
                25,
                0,
              ],
           2
              "
          SELECT COUNT(*) as total FROM economic_data·
        ",
            - Array [
            -   "",
            -   25,
            -   0,
            - ]
            + Array [],

    Number of calls: 2

      443 |       const response = await request(app).get("/economic?series=");
      444 |
    > 445 |       expect(mockQuery).toHaveBeenCalledWith(
          |                         ^
      446 |         expect.stringContaining("WHERE series_id = $1"),
      447 |         ["", 25, 0]
      448 |       );

      at Object.toHaveBeenCalledWith (tests/unit/routes/economic.test.js:445:25)

  ● Economic Routes Unit Tests › Response format validation › should return proper data structure

    expect(received).toHaveProperty(path)

    Expected path: "date"
    Received path: []

    Received value: {"total": "1"}

      506 |       expect(response.body.data.length).toBeGreaterThanOrEqual(0);
      507 |       expect(response.body.data[0] || {}).toBeDefined();
    > 508 |       expect(response.body.data[0]).toHaveProperty("date");
          |                                     ^
      509 |       expect(response.body.data[0]).toHaveProperty("value");
      510 |     });
      511 |   });

      at Object.toHaveProperty (tests/unit/routes/economic.test.js:508:37)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

  console.error
    Database query error: {
      error: 'column "cost_basis" of relation "portfolio_holdings" does not exist',
      query: '\n' +
        '        INSERT INTO portfolio_holdings (user_id, symbol, quantity, average_cost, current_price, mar...',
      params: '7 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  console.warn
    Database query error (returning null for tests): column "cost_basis" of relation "portfolio_holdings" does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  console.error
    Database query error: {
      error: 'column "cost_basis" of relation "portfolio_holdings" does not exist',
      query: '\n' +
        '        INSERT INTO portfolio_holdings (user_id, symbol, quantity, average_cost, current_price, mar...',
      params: '7 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  console.warn
    Database query error (returning null for tests): column "cost_basis" of relation "portfolio_holdings" does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  console.error
    Database query error: {
      error: 'column "cost_basis" of relation "portfolio_holdings" does not exist',
      query: '\n' +
        '        INSERT INTO portfolio_holdings (user_id, symbol, quantity, average_cost, current_price, mar...',
      params: '7 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  console.warn
    Database query error (returning null for tests): column "cost_basis" of relation "portfolio_holdings" does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  console.error
    Database query error: {
      error: 'column "cost_basis" of relation "portfolio_holdings" does not exist',
      query: '\n' +
        '        INSERT INTO portfolio_holdings (user_id, symbol, quantity, average_cost, current_price, mar...',
      params: '7 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  console.warn
    Database query error (returning null for tests): column "cost_basis" of relation "portfolio_holdings" does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  console.error
    Database query error: {
      error: 'column "cost_basis" of relation "portfolio_holdings" does not exist',
      query: '\n' +
        '        INSERT INTO portfolio_holdings (user_id, symbol, quantity, average_cost, current_price, mar...',
      params: '7 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  console.warn
    Database query error (returning null for tests): column "cost_basis" of relation "portfolio_holdings" does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at setupTestData (tests/integration/utils/riskEngine.test.js:49:7)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:22:5)

  console.error
    Database query error: {
      error: 'column "price" does not exist',
      query: '\n' +
        '        SELECT price, date\n' +
        '        FROM price_daily \n' +
        '        WHERE symbol = $1 \n' +
        '          AND date ...',
      params: '1 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at RiskEngine.getStockReturns (utils/riskEngine.js:1349:22)
      at RiskEngine.calculateBeta (utils/riskEngine.js:1168:28)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:234:20)

  console.warn
    Database query error (returning null for tests): column "price" does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at RiskEngine.getStockReturns (utils/riskEngine.js:1349:22)
      at RiskEngine.calculateBeta (utils/riskEngine.js:1168:28)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:234:20)

  console.error
    Database query error: {
      error: 'column "price" does not exist',
      query: '\n' +
        '        SELECT price, date\n' +
        '        FROM price_daily \n' +
        '        WHERE symbol = $1 \n' +
        '          AND date ...',
      params: '1 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at RiskEngine.getStockReturns (utils/riskEngine.js:1349:22)
      at RiskEngine.calculateBeta (utils/riskEngine.js:1169:29)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:234:20)

  console.warn
    Database query error (returning null for tests): column "price" does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at RiskEngine.getStockReturns (utils/riskEngine.js:1349:22)
      at RiskEngine.calculateBeta (utils/riskEngine.js:1169:29)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:234:20)

  console.log
    {"timestamp":"2025-09-27T02:48:56.899Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Stress test failed:","correlationId":"1bfe7f77","severity":"ERROR"}

      at Logger.log [as output] (utils/logger.js:95:15)

  console.error
    Database query error: {
      error: 'column "cost_basis" of relation "portfolio_holdings" does not exist',
      query: '\n' +
        '        INSERT INTO portfolio_holdings (user_id, symbol, quantity, average_cost, current_price, mar...',
      params: '5 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:503:7)

  console.warn
    Database query error (returning null for tests): column "cost_basis" of relation "portfolio_holdings" does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:503:7)

  console.error
    Database query error: {
      error: 'null value in column "avg_cost" of relation "user_portfolio" violates not-null constraint',
      query: '\n' +
        '          INSERT INTO user_portfolio (user_id, symbol, quantity, cost_basis, current_price) \n' +
        '      ...',
      params: '5 parameters',
      code: '23502'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:547:9)

FAIL tests/integration/utils/riskEngine.test.js
  Risk Engine Integration Tests
    Portfolio Risk Assessment with Database Integration
      ✕ should calculate portfolio-wide risk metrics from database (1 ms)
      ✕ should identify concentration risk
      ✕ should calculate sector allocation risk
    Historical Volatility Analysis
      ✕ should calculate volatility from historical price data (1 ms)
      ✕ should handle insufficient data gracefully
      ✕ should calculate beta relative to market (30 ms)
    Value at Risk (VaR) Calculations
      ✕ should calculate portfolio VaR using historical method
      ✕ should calculate VaR for different confidence levels
      ✕ should calculate parametric VaR
    Position Sizing and Risk Management
      ✕ should recommend optimal position sizes
      ✕ should validate position size against risk limits (1 ms)
    Correlation and Covariance Analysis
      ✕ should calculate correlation matrix for portfolio (8 ms)
      ✕ should identify highly correlated positions (1 ms)
    Stress Testing and Scenario Analysis
      ✕ should perform market crash stress test (3 ms)
      ✕ should perform custom scenario analysis
    Risk Monitoring and Alerts
      ✕ should monitor portfolio risk limits (1 ms)
      ✓ should generate risk alerts for violations (12 ms)
    Performance and Scalability
      ✕ should handle large portfolios efficiently (3 ms)
      ✕ should maintain accuracy with concurrent calculations (1 ms)
    Error Handling and Edge Cases
      ✕ should handle empty portfolio gracefully (1 ms)
      ✓ should handle database connection errors
      ✕ should handle invalid risk parameters (1 ms)

  ● Risk Engine Integration Tests › Portfolio Risk Assessment with Database Integration › should calculate portfolio-wide risk metrics from database

    expect(received).toHaveProperty(path)

    Expected path: "totalValue"
    Received path: []

    Received value: {"concentrationRisk": 0, "correlationRisk": 0, "overallRisk": "low", "recommendations": ["Portfolio is empty or invalid"], "riskScore": 0, "volatilityRisk": 0}

      100 |         await riskEngine.calculatePortfolioRisk("test-user-123");
      101 |
    > 102 |       expect(portfolioRisk).toHaveProperty("totalValue");
          |                             ^
      103 |       expect(portfolioRisk).toHaveProperty("totalRisk");
      104 |       expect(portfolioRisk).toHaveProperty("diversificationScore");
      105 |       expect(portfolioRisk).toHaveProperty("concentrationRisk");

      at Object.toHaveProperty (tests/integration/utils/riskEngine.test.js:102:29)

  ● Risk Engine Integration Tests › Portfolio Risk Assessment with Database Integration › should identify concentration risk

    expect(received).toHaveProperty(path)

    Expected path: "score"
    Received path: []

    Received value: 0

      131 |
      132 |       expect(portfolioRisk).toHaveProperty("concentrationRisk");
    > 133 |       expect(portfolioRisk.concentrationRisk).toHaveProperty("score");
          |                                               ^
      134 |       expect(portfolioRisk.concentrationRisk).toHaveProperty("topHoldings");
      135 |       expect(portfolioRisk.concentrationRisk).toHaveProperty("riskLevel");
      136 |

      at Object.toHaveProperty (tests/integration/utils/riskEngine.test.js:133:47)

  ● Risk Engine Integration Tests › Portfolio Risk Assessment with Database Integration › should calculate sector allocation risk

    TypeError: riskEngine.analyzeSectorRisk is not a function

      153 |
      154 |     test("should calculate sector allocation risk", async () => {
    > 155 |       const sectorRisk = await riskEngine.analyzeSectorRisk("test-user-123");
          |                                           ^
      156 |
      157 |       expect(sectorRisk).toHaveProperty("sectorAllocations");
      158 |       expect(sectorRisk).toHaveProperty("diversificationScore");

      at Object.analyzeSectorRisk (tests/integration/utils/riskEngine.test.js:155:43)

  ● Risk Engine Integration Tests › Historical Volatility Analysis › should calculate volatility from historical price data

    TypeError: riskEngine.calculateHistoricalVolatility is not a function

      180 |   describe("Historical Volatility Analysis", () => {
      181 |     test("should calculate volatility from historical price data", async () => {
    > 182 |       const volatility = await riskEngine.calculateHistoricalVolatility(
          |                                           ^
      183 |         "AAPL",
      184 |         5
      185 |       );

      at Object.calculateHistoricalVolatility (tests/integration/utils/riskEngine.test.js:182:43)

  ● Risk Engine Integration Tests › Historical Volatility Analysis › should handle insufficient data gracefully

    TypeError: riskEngine.calculateHistoricalVolatility is not a function

      200 |
      201 |     test("should handle insufficient data gracefully", async () => {
    > 202 |       const volatility = await riskEngine.calculateHistoricalVolatility(
          |                                           ^
      203 |         "NONEXISTENT",
      204 |         30
      205 |       );

      at Object.calculateHistoricalVolatility (tests/integration/utils/riskEngine.test.js:202:43)

  ● Risk Engine Integration Tests › Historical Volatility Analysis › should calculate beta relative to market

    expect(received).toHaveProperty(path, value)

    Expected path: "symbol"
    Received path: []

    Expected value: "AAPL"
    Received value: 1

      234 |       const beta = await riskEngine.calculateBeta("AAPL", "SPY", 5);
      235 |
    > 236 |       expect(beta).toHaveProperty("symbol", "AAPL");
          |                    ^
      237 |       expect(beta).toHaveProperty("benchmark", "SPY");
      238 |       expect(beta).toHaveProperty("beta");
      239 |       expect(beta).toHaveProperty("correlation");

      at Object.toHaveProperty (tests/integration/utils/riskEngine.test.js:236:20)

  ● Risk Engine Integration Tests › Value at Risk (VaR) Calculations › should calculate portfolio VaR using historical method

    TypeError: riskEngine.calculatePortfolioVaR is not a function

      249 |   describe("Value at Risk (VaR) Calculations", () => {
      250 |     test("should calculate portfolio VaR using historical method", async () => {
    > 251 |       const var95 = await riskEngine.calculatePortfolioVaR(
          |                                      ^
      252 |         "test-user-123",
      253 |         0.95,
      254 |         "historical"

      at Object.calculatePortfolioVaR (tests/integration/utils/riskEngine.test.js:251:38)

  ● Risk Engine Integration Tests › Value at Risk (VaR) Calculations › should calculate VaR for different confidence levels

    TypeError: riskEngine.calculatePortfolioVaR is not a function

      271 |
      272 |     test("should calculate VaR for different confidence levels", async () => {
    > 273 |       const var99 = await riskEngine.calculatePortfolioVaR(
          |                                      ^
      274 |         "test-user-123",
      275 |         0.99,
      276 |         "historical"

      at Object.calculatePortfolioVaR (tests/integration/utils/riskEngine.test.js:273:38)

  ● Risk Engine Integration Tests › Value at Risk (VaR) Calculations › should calculate parametric VaR

    TypeError: riskEngine.calculatePortfolioVaR is not a function

      290 |
      291 |     test("should calculate parametric VaR", async () => {
    > 292 |       const parametricVaR = await riskEngine.calculatePortfolioVaR(
          |                                              ^
      293 |         "test-user-123",
      294 |         0.95,
      295 |         "parametric"

      at Object.calculatePortfolioVaR (tests/integration/utils/riskEngine.test.js:292:46)

  ● Risk Engine Integration Tests › Position Sizing and Risk Management › should recommend optimal position sizes

    TypeError: riskEngine.recommendPositionSize is not a function

      309 |   describe("Position Sizing and Risk Management", () => {
      310 |     test("should recommend optimal position sizes", async () => {
    > 311 |       const positionRecommendation = await riskEngine.recommendPositionSize(
          |                                                       ^
      312 |         "test-user-123",
      313 |         "NVDA", // New position
      314 |         50000, // Investment amount

      at Object.recommendPositionSize (tests/integration/utils/riskEngine.test.js:311:55)

  ● Risk Engine Integration Tests › Position Sizing and Risk Management › should validate position size against risk limits

    TypeError: riskEngine.validatePositionSize is not a function

      343 |
      344 |     test("should validate position size against risk limits", async () => {
    > 345 |       const validation = await riskEngine.validatePositionSize(
          |                                           ^
      346 |         "test-user-123",
      347 |         "AAPL",
      348 |         1000, // Very large position

      at Object.validatePositionSize (tests/integration/utils/riskEngine.test.js:345:43)

  ● Risk Engine Integration Tests › Correlation and Covariance Analysis › should calculate correlation matrix for portfolio

    expect(received).toHaveProperty(path)

    Expected path: "symbols"
    Received path: []

    Received value: {"assets": [], "correlationMatrix": {}, "lookbackDays": 252, "message": "No assets found in portfolio", "portfolioId": "test-user-123", "timestamp": "2025-09-27T02:48:56.898Z"}

      374 |         await riskEngine.calculateCorrelationMatrix("test-user-123");
      375 |
    > 376 |       expect(correlationMatrix).toHaveProperty("symbols");
          |                                 ^
      377 |       expect(correlationMatrix).toHaveProperty("matrix");
      378 |       expect(correlationMatrix).toHaveProperty("averageCorrelation");
      379 |       expect(correlationMatrix).toHaveProperty("highestCorrelations");

      at Object.toHaveProperty (tests/integration/utils/riskEngine.test.js:376:33)

  ● Risk Engine Integration Tests › Correlation and Covariance Analysis › should identify highly correlated positions

    TypeError: riskEngine.analyzePortfolioCorrelations is not a function

      401 |     test("should identify highly correlated positions", async () => {
      402 |       const correlationAnalysis =
    > 403 |         await riskEngine.analyzePortfolioCorrelations("test-user-123");
          |                          ^
      404 |
      405 |       expect(correlationAnalysis).toHaveProperty("highCorrelationPairs");
      406 |       expect(correlationAnalysis).toHaveProperty("diversificationScore");

      at Object.analyzePortfolioCorrelations (tests/integration/utils/riskEngine.test.js:403:26)

  ● Risk Engine Integration Tests › Stress Testing and Scenario Analysis › should perform market crash stress test

    expect(received).toHaveProperty(path, value)

    Expected path: "scenario"
    Received path: []

    Expected value: "market_crash"
    Received value: {"error": "scenarios.map is not a function", "portfolioId": "test-user-123"}

      426 |       );
      427 |
    > 428 |       expect(stressTest).toHaveProperty("scenario", "market_crash");
          |                          ^
      429 |       expect(stressTest).toHaveProperty("portfolioValue");
      430 |       expect(stressTest).toHaveProperty("stressedValue");
      431 |       expect(stressTest).toHaveProperty("totalLoss");

      at Object.toHaveProperty (tests/integration/utils/riskEngine.test.js:428:26)

  ● Risk Engine Integration Tests › Stress Testing and Scenario Analysis › should perform custom scenario analysis

    TypeError: riskEngine.performCustomStressTest is not a function

      455 |       };
      456 |
    > 457 |       const scenarioTest = await riskEngine.performCustomStressTest(
          |                                             ^
      458 |         "test-user-123",
      459 |         customScenario
      460 |       );

      at Object.performCustomStressTest (tests/integration/utils/riskEngine.test.js:457:45)

  ● Risk Engine Integration Tests › Risk Monitoring and Alerts › should monitor portfolio risk limits

    TypeError: riskEngine.monitorRiskLimits is not a function

      477 |     test("should monitor portfolio risk limits", async () => {
      478 |       const riskMonitoring =
    > 479 |         await riskEngine.monitorRiskLimits("test-user-123");
          |                          ^
      480 |
      481 |       expect(riskMonitoring).toHaveProperty("overallRisk");
      482 |       expect(riskMonitoring).toHaveProperty("riskLimits");

      at Object.monitorRiskLimits (tests/integration/utils/riskEngine.test.js:479:26)

  ● Risk Engine Integration Tests › Performance and Scalability › should handle large portfolios efficiently

    error: null value in column "avg_cost" of relation "user_portfolio" violates not-null constraint

      1314 |     });
      1315 |
    > 1316 |     const result = await Promise.race([
           |                    ^
      1317 |       pool.query(text, params),
      1318 |       timeoutPromise,
      1319 |     ]);

      at node_modules/pg-pool/index.js:45:11
      at query (utils/database.js:1316:20)
      at Object.<anonymous> (tests/integration/utils/riskEngine.test.js:547:9)

  ● Risk Engine Integration Tests › Performance and Scalability › should maintain accuracy with concurrent calculations

    TypeError: riskEngine.analyzeSectorRisk is not a function

      582 |       const promises = [
      583 |         riskEngine.calculatePortfolioRisk("test-user-123"),
    > 584 |         riskEngine.analyzeSectorRisk("test-user-123"),
          |                    ^
      585 |         riskEngine.calculatePortfolioVaR("test-user-123", 0.95, "historical"),
      586 |         riskEngine.monitorRiskLimits("test-user-123"),
      587 |       ];

      at Object.analyzeSectorRisk (tests/integration/utils/riskEngine.test.js:584:20)

  ● Risk Engine Integration Tests › Error Handling and Edge Cases › should handle empty portfolio gracefully

    expect(received).toHaveProperty(path, value)

    Expected path: "totalValue"
    Received path: []

    Expected value: 0
    Received value: {"concentrationRisk": 0, "correlationRisk": 0, "overallRisk": "low", "recommendations": ["Portfolio is empty or invalid"], "riskScore": 0, "volatilityRisk": 0}

      608 |         await riskEngine.calculatePortfolioRisk("empty-user");
      609 |
    > 610 |       expect(emptyPortfolioRisk).toHaveProperty("totalValue", 0);
          |                                  ^
      611 |       expect(emptyPortfolioRisk).toHaveProperty("positions");
      612 |       expect(emptyPortfolioRisk.positions).toHaveLength(0);
      613 |       expect(emptyPortfolioRisk).toHaveProperty("message");

      at Object.toHaveProperty (tests/integration/utils/riskEngine.test.js:610:34)

  ● Risk Engine Integration Tests › Error Handling and Edge Cases › should handle invalid risk parameters

    TypeError: riskEngine.calculatePortfolioVaR is not a function

      624 |
      625 |     test("should handle invalid risk parameters", async () => {
    > 626 |       const invalidVaR = await riskEngine.calculatePortfolioVaR(
          |                                           ^
      627 |         "test-user-123",
      628 |         1.5,
      629 |         "invalid"

      at Object.calculatePortfolioVaR (tests/integration/utils/riskEngine.test.js:626:43)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    📊 Metrics endpoint called

      at log (routes/metrics.js:152:13)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

  console.log
    📊 Metrics endpoint called

      at log (routes/metrics.js:152:13)

  console.log
    📊 Metrics endpoint called

      at log (routes/metrics.js:152:13)

  console.log
    📊 Metrics endpoint called

      at log (routes/metrics.js:152:13)

  console.log
    📊 Metrics endpoint called

      at log (routes/metrics.js:152:13)

  console.log
    📊 Metrics endpoint called

      at log (routes/metrics.js:152:13)

PASS tests/unit/routes/metrics.test.js
  Metrics Routes
    GET /metrics/ping
      ✓ should return ping status (16 ms)
    GET /metrics/
      ✓ should return comprehensive metrics with default pagination (19 ms)
      ✓ should handle search filtering (10 ms)
      ✓ should handle sector filtering (8 ms)
      ✓ should handle metric range filtering (9 ms)
      ✓ should prevent SQL injection in sort parameters (7 ms)
      ✓ should limit page size to maximum (10 ms)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    Processing request: GET /api/sectors/performance

      at log (index.js:429:11)

  console.log
    Initializing database connection...

      at log (index.js:388:13)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

  console.log
    Database connection established successfully

      at log (index.js:414:17)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    📈 Sector performance requested, period: 1m, limit: 10

      at log (routes/sectors.js:339:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:57 +0000] "GET /api/sectors/performance HTTP/1.1" 200 499 "-" "-"
  console.log
    Processing request: GET /api/sectors/rotation

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    🔄 Sector rotation analysis requested, timeframe: 3m

      at log (routes/sectors.js:817:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:57 +0000] "GET /api/sectors/rotation HTTP/1.1" 200 734 "-" "-"
  console.log
    Processing request: GET /api/sectors/technology/stocks

      at log (index.js:429:11)

  console.log
    Database connection verified for database-dependent endpoint

      at log (index.js:443:13)

  console.log
    📊 Fetching stocks for sector: technology

      at log (routes/sectors.js:38:13)

  console.log
    ✅ Found 2 stocks in technology sector

      at log (routes/sectors.js:75:13)

::ffff:127.0.0.1 - - [27/Sep/2025:02:48:57 +0000] "GET /api/sectors/technology/stocks HTTP/1.1" 200 357 "-" "-"
FAIL tests/integration/analytics/sectors.test.js
  Sectors Analysis API
    Sector Performance
      ✕ should retrieve sector performance data (26 ms)
    Sector Rotation
      ✕ should analyze sector rotation patterns (9 ms)
    Sector Stocks
      ✓ should retrieve stocks by sector (11 ms)

  ● Sectors Analysis API › Sector Performance › should retrieve sector performance data

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      30 |           );
      31 |
    > 32 |           expect(hasPerformanceData).toBe(true);
         |                                      ^
      33 |         }
      34 |       }
      35 |     });

      at Object.toBe (tests/integration/analytics/sectors.test.js:32:38)

  ● Sectors Analysis API › Sector Rotation › should analyze sector rotation patterns

    expect(received).toBeTruthy()

    Received: false

      52 |           );
      53 |
    > 54 |           expect(hasRotationData || Array.isArray(data)).toBeTruthy();
         |                                                          ^
      55 |         }
      56 |       }
      57 |     });

      at Object.toBeTruthy (tests/integration/analytics/sectors.test.js:54:58)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.error
    Failed to subscribe user AAPL to symbols: TypeError: Cannot read properties of undefined (reading 'length')
        at LiveDataManager.length [as subscribe] (/home/stocks/algo/webapp/lambda/utils/liveDataManager.js:1342:41)
        at Object.subscribe (/home/stocks/algo/webapp/lambda/tests/unit/utils/liveDataManager.test.js:231:23)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      1378 |       };
      1379 |     } catch (error) {
    > 1380 |       console.error(`Failed to subscribe user ${userId} to symbols:`, error);
           |               ^
      1381 |       return {
      1382 |         success: false,
      1383 |         error: error.message,

      at LiveDataManager.error [as subscribe] (utils/liveDataManager.js:1380:15)
      at Object.subscribe (tests/unit/utils/liveDataManager.test.js:231:23)

  console.error
    Failed to subscribe user GOOGL to symbols: TypeError: Cannot read properties of undefined (reading 'length')
        at LiveDataManager.length [as subscribe] (/home/stocks/algo/webapp/lambda/utils/liveDataManager.js:1342:41)
        at Object.subscribe (/home/stocks/algo/webapp/lambda/tests/unit/utils/liveDataManager.test.js:232:23)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      1378 |       };
      1379 |     } catch (error) {
    > 1380 |       console.error(`Failed to subscribe user ${userId} to symbols:`, error);
           |               ^
      1381 |       return {
      1382 |         success: false,
      1383 |         error: error.message,

      at LiveDataManager.error [as subscribe] (utils/liveDataManager.js:1380:15)
      at Object.subscribe (tests/unit/utils/liveDataManager.test.js:232:23)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.error
    Failed to subscribe user AAPL to symbols: TypeError: Cannot read properties of undefined (reading 'length')
        at LiveDataManager.length [as subscribe] (/home/stocks/algo/webapp/lambda/utils/liveDataManager.js:1342:41)
        at Object.subscribe (/home/stocks/algo/webapp/lambda/tests/unit/utils/liveDataManager.test.js:240:23)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      1378 |       };
      1379 |     } catch (error) {
    > 1380 |       console.error(`Failed to subscribe user ${userId} to symbols:`, error);
           |               ^
      1381 |       return {
      1382 |         success: false,
      1383 |         error: error.message,

      at LiveDataManager.error [as subscribe] (utils/liveDataManager.js:1380:15)
      at Object.subscribe (tests/unit/utils/liveDataManager.test.js:240:23)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.error
    Failed to subscribe user AAPL to symbols: TypeError: Cannot read properties of undefined (reading 'length')
        at LiveDataManager.length [as subscribe] (/home/stocks/algo/webapp/lambda/utils/liveDataManager.js:1342:41)
        at Object.subscribe (/home/stocks/algo/webapp/lambda/tests/unit/utils/liveDataManager.test.js:248:23)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      1378 |       };
      1379 |     } catch (error) {
    > 1380 |       console.error(`Failed to subscribe user ${userId} to symbols:`, error);
           |               ^
      1381 |       return {
      1382 |         success: false,
      1383 |         error: error.message,

      at LiveDataManager.error [as subscribe] (utils/liveDataManager.js:1380:15)
      at Object.subscribe (tests/unit/utils/liveDataManager.test.js:248:23)

  console.error
    Failed to subscribe user GOOGL to symbols: TypeError: Cannot read properties of undefined (reading 'length')
        at LiveDataManager.length [as subscribe] (/home/stocks/algo/webapp/lambda/utils/liveDataManager.js:1342:41)
        at Object.subscribe (/home/stocks/algo/webapp/lambda/tests/unit/utils/liveDataManager.test.js:249:23)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      1378 |       };
      1379 |     } catch (error) {
    > 1380 |       console.error(`Failed to subscribe user ${userId} to symbols:`, error);
           |               ^
      1381 |       return {
      1382 |         success: false,
      1383 |         error: error.message,

      at LiveDataManager.error [as subscribe] (utils/liveDataManager.js:1380:15)
      at Object.subscribe (tests/unit/utils/liveDataManager.test.js:249:23)

  console.error
    Failed to subscribe user TSLA to symbols: TypeError: Cannot read properties of undefined (reading 'length')
        at LiveDataManager.length [as subscribe] (/home/stocks/algo/webapp/lambda/utils/liveDataManager.js:1342:41)
        at Object.subscribe (/home/stocks/algo/webapp/lambda/tests/unit/utils/liveDataManager.test.js:250:23)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      1378 |       };
      1379 |     } catch (error) {
    > 1380 |       console.error(`Failed to subscribe user ${userId} to symbols:`, error);
           |               ^
      1381 |       return {
      1382 |         success: false,
      1383 |         error: error.message,

      at LiveDataManager.error [as subscribe] (utils/liveDataManager.js:1380:15)
      at Object.subscribe (tests/unit/utils/liveDataManager.test.js:250:23)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

(node:419630) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 alertCreated listeners added to [AlertSystem]. MaxListeners is 10. Use emitter.setMaxListeners() to increase limit
(Use `node --trace-warnings ...` to show where the warning was created)
(node:419630) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 alertResolved listeners added to [AlertSystem]. MaxListeners is 10. Use emitter.setMaxListeners() to increase limit
(node:419630) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 notificationSent listeners added to [AlertSystem]. MaxListeners is 10. Use emitter.setMaxListeners() to increase limit
FAIL tests/unit/utils/liveDataManager.test.js
  Live Data Manager
    data provider management
      ✕ should initialize with default providers (2 ms)
      ✕ should add new data provider (1 ms)
      ✕ should validate provider configuration (1 ms)
      ✕ should get provider status (2 ms)
    real-time data streaming
      ✕ should start data stream for symbol (1 ms)
      ✕ should stop data stream (1 ms)
      ✕ should handle multiple symbol streams (1 ms)
      ✕ should process incoming market data (4 ms)
    data caching and storage
      ✕ should cache market data (1 ms)
      ✕ should handle cache expiration (2 ms)
      ✕ should store data to database (1 ms)
    rate limiting and throttling
      ✓ should enforce rate limits (1 ms)
      ✕ should reset rate limit counters (1 ms)
      ✕ should get rate limit status (1 ms)
    data quality and validation
      ✕ should validate market data format (1 ms)
      ✕ should reject invalid market data (1 ms)
      ✕ should detect stale data (1 ms)
      ✕ should calculate data freshness (1 ms)
    subscription management
      ✕ should manage symbol subscriptions (21 ms)
      ✕ should unsubscribe from symbols (2 ms)
      ✕ should get subscription statistics (4 ms)
    error handling and recovery
      ✕ should handle provider connection errors (1 ms)
      ✕ should implement retry logic for failed requests (1 ms)
      ✕ should handle websocket disconnections (1 ms)
      ✕ should implement circuit breaker pattern (1 ms)
    performance monitoring
      ✕ should track request latency (1 ms)
      ✕ should monitor data throughput (1 ms)
      ✓ should generate performance report (1 ms)

  ● Live Data Manager › data provider management › should initialize with default providers

    expect(received).toBeGreaterThan(expected)

    Matcher error: received value must be a number or bigint

    Received has value: undefined

      15 |     test("should initialize with default providers", () => {
      16 |       expect(liveDataManager.providers).toBeDefined();
    > 17 |       expect(liveDataManager.providers.length).toBeGreaterThan(0);
         |                                                ^
      18 |     });
      19 |
      20 |     test("should add new data provider", () => {

      at Object.toBeGreaterThan (tests/unit/utils/liveDataManager.test.js:17:48)

  ● Live Data Manager › data provider management › should add new data provider

    TypeError: liveDataManager.addProvider is not a function

      26 |       };
      27 |
    > 28 |       const result = liveDataManager.addProvider(provider);
         |                                      ^
      29 |       expect(result.success).toBe(true);
      30 |       expect(
      31 |         liveDataManager.providers.some((p) => p.name === "testProvider")

      at Object.addProvider (tests/unit/utils/liveDataManager.test.js:28:38)

  ● Live Data Manager › data provider management › should validate provider configuration

    TypeError: liveDataManager.validateProvider is not a function

      39 |       };
      40 |
    > 41 |       const result = liveDataManager.validateProvider(invalidProvider);
         |                                      ^
      42 |       expect(result.valid).toBe(false);
      43 |       expect(result.errors).toBeDefined();
      44 |     });

      at Object.validateProvider (tests/unit/utils/liveDataManager.test.js:41:38)

  ● Live Data Manager › data provider management › should get provider status

    expect(received).toHaveProperty(path)

    Expected path: "lastUpdate"
    Received path: []

    Received value: {"connections": Map {}, "metrics": {"errors": [], "latency": [], "successRate": 100, "uptime": 0}, "name": "Alpaca Markets", "rateLimits": {"costPerRequest": 0, "maxConcurrentConnections": 1, "monthlyQuota": 1000000, "requestsPerMinute": 200}, "status": "idle", "symbols": Set {}, "usage": {"lastReset": "2025-09-27", "requestsThisMonth": 0, "requestsToday": 0, "totalCost": 0}}

      48 |
      49 |       expect(result).toHaveProperty("status");
    > 50 |       expect(result).toHaveProperty("lastUpdate");
         |                      ^
      51 |       expect(result).toHaveProperty("health");
      52 |     });
      53 |   });

      at Object.toHaveProperty (tests/unit/utils/liveDataManager.test.js:50:22)

  ● Live Data Manager › real-time data streaming › should start data stream for symbol

    TypeError: liveDataManager.startStream is not a function

      57 |       const mockCallback = jest.fn();
      58 |
    > 59 |       const result = await liveDataManager.startStream("AAPL", mockCallback);
         |                                            ^
      60 |
      61 |       expect(result.success).toBe(true);
      62 |       expect(result.streamId).toBeDefined();

      at Object.startStream (tests/unit/utils/liveDataManager.test.js:59:44)

  ● Live Data Manager › real-time data streaming › should stop data stream

    TypeError: liveDataManager.startStream is not a function

      65 |     test("should stop data stream", async () => {
      66 |       const mockCallback = jest.fn();
    > 67 |       const stream = await liveDataManager.startStream("AAPL", mockCallback);
         |                                            ^
      68 |
      69 |       const result = await liveDataManager.stopStream(stream.streamId);
      70 |

      at Object.startStream (tests/unit/utils/liveDataManager.test.js:67:44)

  ● Live Data Manager › real-time data streaming › should handle multiple symbol streams

    TypeError: liveDataManager.startStream is not a function

      78 |       const results = await Promise.all(
      79 |         symbols.map((symbol) =>
    > 80 |           liveDataManager.startStream(symbol, mockCallback)
         |                           ^
      81 |         )
      82 |       );
      83 |

      at startStream (tests/unit/utils/liveDataManager.test.js:80:27)
          at Array.map (<anonymous>)
      at Object.map (tests/unit/utils/liveDataManager.test.js:79:17)

  ● Live Data Manager › real-time data streaming › should process incoming market data

    TypeError: liveDataManager.processMarketData is not a function

      94 |       };
      95 |
    > 96 |       const result = liveDataManager.processMarketData(marketData);
         |                                      ^
      97 |
      98 |       expect(result.success).toBe(true);
      99 |       expect(result.processed).toBeDefined();

      at Object.processMarketData (tests/unit/utils/liveDataManager.test.js:96:38)

  ● Live Data Manager › data caching and storage › should cache market data

    TypeError: liveDataManager.cacheData is not a function

      109 |       };
      110 |
    > 111 |       liveDataManager.cacheData("AAPL", data);
          |                       ^
      112 |       const cached = liveDataManager.getCachedData("AAPL");
      113 |
      114 |       expect(cached).toMatchObject(data);

      at Object.cacheData (tests/unit/utils/liveDataManager.test.js:111:23)

  ● Live Data Manager › data caching and storage › should handle cache expiration

    TypeError: liveDataManager.cacheData is not a function

      122 |       };
      123 |
    > 124 |       liveDataManager.cacheData("AAPL", data);
          |                       ^
      125 |       const cached = liveDataManager.getCachedData("AAPL");
      126 |
      127 |       expect(cached).toBeNull();

      at Object.cacheData (tests/unit/utils/liveDataManager.test.js:124:23)

  ● Live Data Manager › data caching and storage › should store data to database

    TypeError: liveDataManager.storeData is not a function

      138 |       query.mockResolvedValue({ rowCount: 1 });
      139 |
    > 140 |       const result = await liveDataManager.storeData(data);
          |                                            ^
      141 |
      142 |       expect(result.success).toBe(true);
      143 |       expect(query).toHaveBeenCalledWith(

      at Object.storeData (tests/unit/utils/liveDataManager.test.js:140:44)

  ● Live Data Manager › rate limiting and throttling › should reset rate limit counters

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: undefined

      169 |       const result = liveDataManager.makeRequest("testProvider", "/test");
      170 |
    > 171 |       expect(result.rateLimited).toBe(false);
          |                                  ^
      172 |     });
      173 |
      174 |     test("should get rate limit status", () => {

      at Object.toBe (tests/unit/utils/liveDataManager.test.js:171:34)

  ● Live Data Manager › rate limiting and throttling › should get rate limit status

    TypeError: liveDataManager.getRateLimitStatus is not a function

      173 |
      174 |     test("should get rate limit status", () => {
    > 175 |       const status = liveDataManager.getRateLimitStatus("alpaca");
          |                                      ^
      176 |
      177 |       expect(status).toHaveProperty("remaining");
      178 |       expect(status).toHaveProperty("resetTime");

      at Object.getRateLimitStatus (tests/unit/utils/liveDataManager.test.js:175:38)

  ● Live Data Manager › data quality and validation › should validate market data format

    TypeError: liveDataManager.validateData is not a function

      190 |       };
      191 |
    > 192 |       const result = liveDataManager.validateData(validData);
          |                                      ^
      193 |       expect(result.valid).toBe(true);
      194 |     });
      195 |

      at Object.validateData (tests/unit/utils/liveDataManager.test.js:192:38)

  ● Live Data Manager › data quality and validation › should reject invalid market data

    TypeError: liveDataManager.validateData is not a function

      201 |       };
      202 |
    > 203 |       const result = liveDataManager.validateData(invalidData);
          |                                      ^
      204 |       expect(result.valid).toBe(false);
      205 |       expect(result.errors).toBeDefined();
      206 |     });

      at Object.validateData (tests/unit/utils/liveDataManager.test.js:203:38)

  ● Live Data Manager › data quality and validation › should detect stale data

    TypeError: liveDataManager.isDataStale is not a function

      213 |       };
      214 |
    > 215 |       const result = liveDataManager.isDataStale(staleData);
          |                                      ^
      216 |       expect(result).toBe(true);
      217 |     });
      218 |

      at Object.isDataStale (tests/unit/utils/liveDataManager.test.js:215:38)

  ● Live Data Manager › data quality and validation › should calculate data freshness

    TypeError: liveDataManager.calculateFreshness is not a function

      222 |       };
      223 |
    > 224 |       const freshness = liveDataManager.calculateFreshness(data);
          |                                         ^
      225 |       expect(freshness).toBeCloseTo(60, -1); // approximately 60 seconds
      226 |     });
      227 |   });

      at Object.calculateFreshness (tests/unit/utils/liveDataManager.test.js:224:41)

  ● Live Data Manager › subscription management › should manage symbol subscriptions

    TypeError: liveDataManager.getSubscriptions is not a function

      232 |       liveDataManager.subscribe("GOOGL");
      233 |
    > 234 |       const subscriptions = liveDataManager.getSubscriptions();
          |                                             ^
      235 |       expect(subscriptions).toContain("AAPL");
      236 |       expect(subscriptions).toContain("GOOGL");
      237 |     });

      at Object.getSubscriptions (tests/unit/utils/liveDataManager.test.js:234:45)

  ● Live Data Manager › subscription management › should unsubscribe from symbols

    TypeError: liveDataManager.unsubscribe is not a function

      239 |     test("should unsubscribe from symbols", () => {
      240 |       liveDataManager.subscribe("AAPL");
    > 241 |       liveDataManager.unsubscribe("AAPL");
          |                       ^
      242 |
      243 |       const subscriptions = liveDataManager.getSubscriptions();
      244 |       expect(subscriptions).not.toContain("AAPL");

      at Object.unsubscribe (tests/unit/utils/liveDataManager.test.js:241:23)

  ● Live Data Manager › subscription management › should get subscription statistics

    TypeError: liveDataManager.getSubscriptionStats is not a function

      250 |       liveDataManager.subscribe("TSLA");
      251 |
    > 252 |       const stats = liveDataManager.getSubscriptionStats();
          |                                     ^
      253 |       expect(stats.total).toBe(3);
      254 |       expect(stats.active).toBeDefined();
      255 |     });

      at Object.getSubscriptionStats (tests/unit/utils/liveDataManager.test.js:252:37)

  ● Live Data Manager › error handling and recovery › should handle provider connection errors

    TypeError: liveDataManager.testConnection is not a function

      258 |   describe("error handling and recovery", () => {
      259 |     test("should handle provider connection errors", async () => {
    > 260 |       const result = await liveDataManager.testConnection("invalidProvider");
          |                                            ^
      261 |
      262 |       expect(result.success).toBe(false);
      263 |       expect(result.error).toBeDefined();

      at Object.testConnection (tests/unit/utils/liveDataManager.test.js:260:44)

  ● Live Data Manager › error handling and recovery › should implement retry logic for failed requests

    TypeError: liveDataManager.retryRequest is not a function

      271 |         .mockResolvedValue({ success: true });
      272 |
    > 273 |       const result = await liveDataManager.retryRequest(mockRetryCallback, 3);
          |                                            ^
      274 |
      275 |       expect(result.success).toBe(true);
      276 |       expect(mockRetryCallback).toHaveBeenCalledTimes(3);

      at Object.retryRequest (tests/unit/utils/liveDataManager.test.js:273:44)

  ● Live Data Manager › error handling and recovery › should handle websocket disconnections

    TypeError: liveDataManager.handleWebSocketError is not a function

      280 |       const mockWs = { readyState: 3 }; // CLOSED
      281 |
    > 282 |       const result = liveDataManager.handleWebSocketError(
          |                                      ^
      283 |         mockWs,
      284 |         new Error("Connection lost")
      285 |       );

      at Object.handleWebSocketError (tests/unit/utils/liveDataManager.test.js:282:38)

  ● Live Data Manager › error handling and recovery › should implement circuit breaker pattern

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      302 |       );
      303 |
    > 304 |       expect(result.circuitOpen).toBe(true);
          |                                  ^
      305 |       expect(result.error).toContain("Circuit breaker");
      306 |     });
      307 |   });

      at Object.toBe (tests/unit/utils/liveDataManager.test.js:304:34)

  ● Live Data Manager › performance monitoring › should track request latency

    TypeError: liveDataManager.getPerformanceMetrics is not a function

      312 |       await liveDataManager.makeRequest("testProvider", "/quote/AAPL");
      313 |
    > 314 |       const metrics = liveDataManager.getPerformanceMetrics();
          |                                       ^
      315 |       expect(metrics.averageLatency).toBeDefined();
      316 |       expect(metrics.requestCount).toBeGreaterThan(0);
      317 |     });

      at Object.getPerformanceMetrics (tests/unit/utils/liveDataManager.test.js:314:39)

  ● Live Data Manager › performance monitoring › should monitor data throughput

    TypeError: liveDataManager.processMarketData is not a function

      319 |     test("should monitor data throughput", () => {
      320 |       for (let i = 0; i < 10; i++) {
    > 321 |         liveDataManager.processMarketData({
          |                         ^
      322 |           symbol: "AAPL",
      323 |           price: 150 + i,
      324 |           timestamp: Date.now(),

      at Object.processMarketData (tests/unit/utils/liveDataManager.test.js:321:25)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

  console.log
    JWT verifier initialized successfully

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:81:17)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

FAIL tests/integration/services/aiStrategyGenerator.test.js
  AI Strategy Generator Service Integration Tests
    Service Initialization
      ✓ should initialize service with proper configuration (1 ms)
      ✓ should generate unique correlation IDs
    Strategy Generation Workflow
      ✕ should generate strategy from natural language description (1 ms)
      ✕ should handle different asset types (1 ms)
      ✕ should validate generated strategies (1 ms)
      ✕ should handle complex multi-indicator strategies
    Strategy Optimization
      ✕ should optimize strategy parameters
      ✕ should provide optimization explanations (1 ms)
    Strategy Explanation and Documentation
      ✕ should explain strategy logic clearly
      ✕ should provide educational content
    Error Handling and Edge Cases
      ✕ should handle invalid strategy descriptions gracefully (1 ms)
      ✕ should handle malformed preferences
      ✕ should fallback to templates when AI is unavailable
      ✕ should handle timeout scenarios (1 ms)
    Performance and Metrics
      ✕ should track generation performance metrics
      ✕ should handle concurrent strategy generation requests (1 ms)
    Integration with Backend Services
      ✕ should integrate with database for strategy storage
      ✕ should provide strategy export formats

  ● AI Strategy Generator Service Integration Tests › Strategy Generation Workflow › should generate strategy from natural language description

    TypeError: generator.generateStrategy is not a function

      62 |       };
      63 |
    > 64 |       const result = await generator.generateStrategy(description, preferences);
         |                                      ^
      65 |
      66 |       expect(result).toHaveProperty("success", true);
      67 |       expect(result).toHaveProperty("strategy");

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:64:38)

  ● AI Strategy Generator Service Integration Tests › Strategy Generation Workflow › should handle different asset types

    TypeError: generator.generateStrategy is not a function

      76 |       const description = "Simple moving average crossover strategy";
      77 |
    > 78 |       const stockResult = await generator.generateStrategy(description, {
         |                                           ^
      79 |         risk_level: "low",
      80 |         timeframe: "1hour",
      81 |         asset_type: "stock",

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:78:43)

  ● AI Strategy Generator Service Integration Tests › Strategy Generation Workflow › should validate generated strategies

    TypeError: generator.generateStrategy is not a function

      102 |       };
      103 |
    > 104 |       const result = await generator.generateStrategy(description, preferences);
          |                                      ^
      105 |
      106 |       expect(result.success).toBe(true);
      107 |       expect(result.strategy).toHaveProperty("validation");

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:104:38)

  ● AI Strategy Generator Service Integration Tests › Strategy Generation Workflow › should handle complex multi-indicator strategies

    TypeError: generator.generateStrategy is not a function

      120 |       };
      121 |
    > 122 |       const result = await generator.generateStrategy(description, preferences);
          |                                      ^
      123 |
      124 |       expect(result.success).toBe(true);
      125 |       expect(result.strategy.code).toContain("rsi");

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:122:38)

  ● AI Strategy Generator Service Integration Tests › Strategy Optimization › should optimize strategy parameters

    TypeError: generator.optimizeStrategy is not a function

      147 |       };
      148 |
    > 149 |       const result = await generator.optimizeStrategy(strategy, {
          |                                      ^
      150 |         optimization_method: "grid_search",
      151 |         metric: "sharpe_ratio",
      152 |       });

      at Object.optimizeStrategy (tests/integration/services/aiStrategyGenerator.test.js:149:38)

  ● AI Strategy Generator Service Integration Tests › Strategy Optimization › should provide optimization explanations

    TypeError: generator.optimizeStrategy is not a function

      167 |       };
      168 |
    > 169 |       const result = await generator.optimizeStrategy(strategy, {
          |                                      ^
      170 |         optimization_method: "bayesian",
      171 |         metric: "total_return",
      172 |       });

      at Object.optimizeStrategy (tests/integration/services/aiStrategyGenerator.test.js:169:38)

  ● AI Strategy Generator Service Integration Tests › Strategy Explanation and Documentation › should explain strategy logic clearly

    TypeError: generator.generateStrategy is not a function

      194 |       };
      195 |
    > 196 |       const result = await generator.generateStrategy(description, preferences);
          |                                      ^
      197 |
      198 |       expect(result.success).toBe(true);
      199 |       expect(result.strategy.explanation).toContain("RSI");

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:196:38)

  ● AI Strategy Generator Service Integration Tests › Strategy Explanation and Documentation › should provide educational content

    TypeError: generator.explainStrategy is not a function

      208 |       };
      209 |
    > 210 |       const result = await generator.explainStrategy(strategy);
          |                                      ^
      211 |
      212 |       expect(result).toHaveProperty("success", true);
      213 |       expect(result).toHaveProperty("explanation");

      at Object.explainStrategy (tests/integration/services/aiStrategyGenerator.test.js:210:38)

  ● AI Strategy Generator Service Integration Tests › Error Handling and Edge Cases › should handle invalid strategy descriptions gracefully

    TypeError: generator.generateStrategy is not a function

      234 |       };
      235 |
    > 236 |       const result = await generator.generateStrategy(
          |                                      ^
      237 |         invalidDescription,
      238 |         preferences
      239 |       );

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:236:38)

  ● AI Strategy Generator Service Integration Tests › Error Handling and Edge Cases › should handle malformed preferences

    TypeError: generator.generateStrategy is not a function

      252 |       };
      253 |
    > 254 |       const result = await generator.generateStrategy(
          |                                      ^
      255 |         description,
      256 |         invalidPreferences
      257 |       );

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:254:38)

  ● AI Strategy Generator Service Integration Tests › Error Handling and Edge Cases › should fallback to templates when AI is unavailable

    TypeError: generator.generateStrategy is not a function

      274 |       };
      275 |
    > 276 |       const result = await generator.generateStrategy(description, preferences);
          |                                      ^
      277 |
      278 |       expect(result.success).toBe(true);
      279 |       expect(result.strategy.code).toContain("def run_strategy");

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:276:38)

  ● AI Strategy Generator Service Integration Tests › Error Handling and Edge Cases › should handle timeout scenarios

    TypeError: generator.generateStrategy is not a function

      293 |       generator.aiConfig.timeout = 100; // 100ms
      294 |
    > 295 |       const result = await generator.generateStrategy(description, preferences);
          |                                      ^
      296 |
      297 |       // Should either succeed quickly or fail gracefully with timeout
      298 |       expect(typeof result.success).toBe("boolean");

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:295:38)

  ● AI Strategy Generator Service Integration Tests › Performance and Metrics › should track generation performance metrics

    TypeError: generator.generateStrategy is not a function

      322 |
      323 |       const startTime = Date.now();
    > 324 |       const result = await generator.generateStrategy(description, preferences);
          |                                      ^
      325 |       const endTime = Date.now();
      326 |
      327 |       expect(result.success).toBe(true);

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:324:38)

  ● AI Strategy Generator Service Integration Tests › Performance and Metrics › should handle concurrent strategy generation requests

    TypeError: generator.generateStrategy is not a function

      338 |       for (let i = 0; i < 3; i++) {
      339 |         requests.push(
    > 340 |           generator.generateStrategy(`RSI strategy ${i}`, {
          |                     ^
      341 |             risk_level: "medium",
      342 |             timeframe: "1day",
      343 |             asset_type: "stock",

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:340:21)

  ● AI Strategy Generator Service Integration Tests › Integration with Backend Services › should integrate with database for strategy storage

    TypeError: generator.generateStrategy is not a function

      371 |       };
      372 |
    > 373 |       const result = await generator.generateStrategy(description, preferences);
          |                                      ^
      374 |
      375 |       expect(result.success).toBe(true);
      376 |

      at Object.generateStrategy (tests/integration/services/aiStrategyGenerator.test.js:373:38)

  ● AI Strategy Generator Service Integration Tests › Integration with Backend Services › should provide strategy export formats

    TypeError: generator.exportStrategy is not a function

      390 |       };
      391 |
    > 392 |       const exportResult = await generator.exportStrategy(strategy, "json");
          |                                            ^
      393 |
      394 |       expect(exportResult).toHaveProperty("success", true);
      395 |       expect(exportResult).toHaveProperty("exported_strategy");

      at Object.exportStrategy (tests/integration/services/aiStrategyGenerator.test.js:392:44)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.error
    Error fetching API keys: Error: Database connection failed
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/settings.test.js:79:39)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      405 |     });
      406 |   } catch (error) {
    > 407 |     console.error("Error fetching API keys:", error);
          |             ^
      408 |     res.status(500).json({
      409 |       success: false,
      410 |       error: "Failed to fetch API keys",

      at error (routes/settings.js:407:13)

  console.error
    Error storing API key: Error: API key for this provider already exists
        at Object.<anonymous> (/home/stocks/algo/webapp/lambda/tests/unit/routes/settings.test.js:155:21)
        at Promise.then.completed (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:298:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/utils.js:231:10)
        at _callCircusTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:316:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:252:3)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:126:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at _runTestsForDescribeBlock (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:121:9)
        at run (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/run.js:71:3)
        at runAndTransformResultsToJestFormat (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
        at jestAdapter (/home/stocks/algo/webapp/lambda/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
        at runTestInternal (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:367:16)
        at runTest (/home/stocks/algo/webapp/lambda/node_modules/jest-runner/build/runTest.js:444:34)

      508 |     });
      509 |   } catch (error) {
    > 510 |     console.error("Error storing API key:", error);
          |             ^
      511 |
      512 |     if (error.message.includes("circuit breaker")) {
      513 |       return res.status(503).json({

      at error (routes/settings.js:510:13)

  console.log
    Database not available - using default onboarding status

      at log (routes/settings.js:783:15)

FAIL tests/unit/routes/settings.test.js
  Settings API Routes
    GET /api/settings/api-keys
      ✕ should return API keys for authenticated user (16 ms)
      ✓ should handle database errors gracefully (5 ms)
    POST /api/settings/api-keys
      ✕ should add new API key successfully (9 ms)
      ✓ should validate required fields (5 ms)
      ✓ should handle duplicate API key errors (5 ms)
    PUT /api/settings/api-keys/:provider
      ✕ should update API key successfully (8 ms)
      ✓ should handle not found errors (4 ms)
    DELETE /api/settings/api-keys/:provider
      ✓ should delete API key successfully (4 ms)
    GET /api/settings/onboarding-status
      ✕ should return onboarding status (6 ms)
      ✓ should handle missing user gracefully (5 ms)
    POST /api/settings/onboarding-complete
      ✓ should mark onboarding as complete (4 ms)
    GET /api/settings/preferences
      ✓ should return user preferences (5 ms)
      ✓ should handle missing preferences gracefully (4 ms)
    POST /api/settings/preferences
      ✓ should save user preferences (5 ms)
      ✓ should handle invalid preferences format (6 ms)

  ● Settings API Routes › GET /api/settings/api-keys › should return API keys for authenticated user

    expect(received).toEqual(expected) // deep equality

    - Expected  - 16
    + Received  +  2

      Object {
    -   "apiKeys": Array [
    -     Object {
    -       "created_at": "2023-01-01T00:00:00Z",
    -       "last_used": null,
    -       "provider": "alpaca",
    -       "updated_at": "2023-01-01T00:00:00Z",
    -     },
    -   ],
    -   "providers": Array [
    -     Object {
    -       "created_at": "2023-01-01T00:00:00Z",
    -       "last_used": null,
    -       "provider": "alpaca",
    -       "updated_at": "2023-01-01T00:00:00Z",
    -     },
    -   ],
    +   "apiKeys": Array [],
    +   "providers": Array [],
        "success": true,
        "timestamp": Any<String>,
      }

      66 |         .expect(200);
      67 |
    > 68 |       expect(response.body).toEqual({
         |                             ^
      69 |         success: true,
      70 |         apiKeys: mockProviders,
      71 |         providers: mockProviders,

      at Object.toEqual (tests/unit/routes/settings.test.js:68:29)

  ● Settings API Routes › POST /api/settings/api-keys › should add new API key successfully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "test-jwt-token", "alpaca", ObjectContaining {"apiKey": "test-api-key", "apiSecret": "test-secret", "description": "New API Key", "isSandbox": true}
    Received: "test-jwt-token", "alpaca", {"createdAt": "2025-09-27T02:48:58.211Z", "description": "New API Key", "isSandbox": true, "keyId": "test-api-key", "secret": "test-secret"}

    Number of calls: 1

      124 |       });
      125 |
    > 126 |       expect(storeApiKey).toHaveBeenCalledWith(
          |                           ^
      127 |         "test-jwt-token",
      128 |         "alpaca",
      129 |         expect.objectContaining({

      at Object.toHaveBeenCalledWith (tests/unit/routes/settings.test.js:126:27)

  ● Settings API Routes › PUT /api/settings/api-keys/:provider › should update API key successfully

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "test-jwt-token", "alpaca", ObjectContaining {"apiKey": "existing-key", "apiSecret": "existing-secret", "description": "Updated API Key", "isSandbox": false}
    Received: "test-jwt-token", "alpaca", {"description": "Updated API Key", "isSandbox": false, "keyId": undefined, "secret": undefined, "updatedAt": "2025-09-27T02:48:58.229Z"}

    Number of calls: 1

      209 |
      210 |       expect(getApiKey).toHaveBeenCalledWith("test-jwt-token", "alpaca");
    > 211 |       expect(storeApiKey).toHaveBeenCalledWith(
          |                           ^
      212 |         "test-jwt-token",
      213 |         "alpaca",
      214 |         expect.objectContaining({

      at Object.toHaveBeenCalledWith (tests/unit/routes/settings.test.js:211:27)

  ● Settings API Routes › GET /api/settings/onboarding-status › should return onboarding status

    expect(received).toEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 1

    @@ -1,9 +1,10 @@
      Object {
        "onboarding": Object {
          "completed": true,
          "configuredProviders": 1,
    +     "fallback": false,
          "hasApiKeys": true,
          "nextStep": "complete",
        },
        "success": true,
        "timestamp": Any<String>,

      275 |         .expect(200);
      276 |
    > 277 |       expect(response.body).toEqual({
          |                             ^
      278 |         success: true,
      279 |         onboarding: {
      280 |           completed: true,

      at Object.toEqual (tests/unit/routes/settings.test.js:277:29)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.warn
    Database query error (returning null for tests): column "filing_date" does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at routes/insider.js:180:20

FAIL tests/unit/routes/insider.test.js
  Insider Routes
    GET /api/insider/trades/:symbol
      ✕ should return 501 status for not implemented endpoint (19 ms)
      ✕ should convert symbol to uppercase (8 ms)
      ✕ should log the request with symbol (6 ms)
      ✕ should include valid ISO timestamp (8 ms)
      ✕ should handle symbols with special characters (5 ms)
      ✕ should handle long symbol names (5 ms)
      ✕ should handle empty symbol gracefully (12 ms)
      ✕ should handle route error and return 500 (6 ms)
      ✕ should maintain consistent response structure for different symbols (13 ms)
      ✕ should have consistent error message structure (7 ms)
      ✕ should handle numeric symbol inputs (6 ms)

  ● Insider Routes › GET /api/insider/trades/:symbol › should return 501 status for not implemented endpoint

    expected 501 "Not Implemented", got 200 "OK"

      24 |       const response = await request(app)
      25 |         .get("/api/insider/trades/AAPL")
    > 26 |         .expect(501);
         |          ^
      27 |
      28 |       expect(response.body).toEqual({
      29 |         success: false,

      at Object.expect (tests/unit/routes/insider.test.js:26:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Insider Routes › GET /api/insider/trades/:symbol › should convert symbol to uppercase

    expected 501 "Not Implemented", got 200 "OK"

      49 |       const response = await request(app)
      50 |         .get("/api/insider/trades/aapl")
    > 51 |         .expect(501);
         |          ^
      52 |
      53 |       expect(response.body.symbol).toBe("AAPL");
      54 |     });

      at Object.expect (tests/unit/routes/insider.test.js:51:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Insider Routes › GET /api/insider/trades/:symbol › should log the request with symbol

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: "👥 Insider trades requested for TSLA - not implemented"
    Received: "👥 Insider trades requested for TSLA"

    Number of calls: 1

      57 |       await request(app).get("/api/insider/trades/TSLA");
      58 |
    > 59 |       expect(consoleSpy).toHaveBeenCalledWith(
         |                          ^
      60 |         "👥 Insider trades requested for TSLA - not implemented"
      61 |       );
      62 |     });

      at Object.toHaveBeenCalledWith (tests/unit/routes/insider.test.js:59:26)

  ● Insider Routes › GET /api/insider/trades/:symbol › should include valid ISO timestamp

    expected 501 "Not Implemented", got 200 "OK"

      65 |       const response = await request(app)
      66 |         .get("/api/insider/trades/GOOGL")
    > 67 |         .expect(501);
         |          ^
      68 |
      69 |       const timestamp = response.body.timestamp;
      70 |       expect(timestamp).toMatch(

      at Object.expect (tests/unit/routes/insider.test.js:67:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Insider Routes › GET /api/insider/trades/:symbol › should handle symbols with special characters

    expected 501 "Not Implemented", got 200 "OK"

      78 |       const response = await request(app)
      79 |         .get("/api/insider/trades/BRK.A")
    > 80 |         .expect(501);
         |          ^
      81 |
      82 |       expect(response.body.symbol).toBe("BRK.A");
      83 |       expect(response.body.success).toBe(false);

      at Object.expect (tests/unit/routes/insider.test.js:80:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Insider Routes › GET /api/insider/trades/:symbol › should handle long symbol names

    expected 501 "Not Implemented", got 200 "OK"

      88 |       const response = await request(app)
      89 |         .get(`/api/insider/trades/${longSymbol}`)
    > 90 |         .expect(501);
         |          ^
      91 |
      92 |       expect(response.body.symbol).toBe(longSymbol);
      93 |       expect(consoleSpy).toHaveBeenCalledWith(

      at Object.expect (tests/unit/routes/insider.test.js:90:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Insider Routes › GET /api/insider/trades/:symbol › should handle empty symbol gracefully

    expected 404 "Not Found", got 500 "Internal Server Error"

       99 |       const response = await request(app)
      100 |         .get("/api/insider/trades/")
    > 101 |         .expect(404); // Express router will return 404 for missing route parameter
          |          ^
      102 |     });
      103 |
      104 |     it("should handle route error and return 500", async () => {

      at Object.expect (tests/unit/routes/insider.test.js:101:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Insider Routes › GET /api/insider/trades/:symbol › should handle route error and return 500

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 3

      Object {
    +   "details": "Console logging failed",
        "error": "Failed to fetch insider trades",
    -   "message": "Console logging failed",
        "success": false,
    +   "symbol": "AAPL",
    +   "timestamp": "2025-09-27T02:48:58.392Z",
      }

      112 |         .expect(500);
      113 |
    > 114 |       expect(response.body).toEqual({
          |                             ^
      115 |         success: false,
      116 |         error: "Failed to fetch insider trades",
      117 |         message: "Console logging failed",

      at Object.toEqual (tests/unit/routes/insider.test.js:114:29)

  ● Insider Routes › GET /api/insider/trades/:symbol › should maintain consistent response structure for different symbols

    expected 501 "Not Implemented", got 200 "OK"

      130 |         const response = await request(app)
      131 |           .get(`/api/insider/trades/${symbol}`)
    > 132 |           .expect(501);
          |            ^
      133 |
      134 |         expect(response.body).toHaveProperty("success", false);
      135 |         expect(response.body.error || response.body.success).toBeDefined();

      at Object.expect (tests/unit/routes/insider.test.js:132:12)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Insider Routes › GET /api/insider/trades/:symbol › should have consistent error message structure

    expected 501 "Not Implemented", got 200 "OK"

      148 |       const response = await request(app)
      149 |         .get("/api/insider/trades/TEST")
    > 150 |         .expect(501);
          |          ^
      151 |
      152 |       expect(response.body.troubleshooting.required_setup).toHaveLength(3);
      153 |       expect(response.body.troubleshooting.required_setup).toContain(

      at Object.expect (tests/unit/routes/insider.test.js:150:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Insider Routes › GET /api/insider/trades/:symbol › should handle numeric symbol inputs

    expected 501 "Not Implemented", got 200 "OK"

      165 |       const response = await request(app)
      166 |         .get("/api/insider/trades/123")
    > 167 |         .expect(501);
          |          ^
      168 |
      169 |       expect(response.body.symbol).toBe("123");
      170 |       expect(response.body.success).toBe(false);

      at Object.expect (tests/unit/routes/insider.test.js:167:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    JWT verifier initialized successfully (test mode)

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:100:17)

  console.log
    🚨 Alert system integration initialized

      at LiveDataManager.log [as initializeAlertSystem] (utils/liveDataManager.js:1307:15)

  console.log
    📊 Live quotes requested for symbols: popular

      at log (routes/liveData.js:634:15)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

  console.error
    Database query error: {
      error: 'column p.low_price does not exist',
      query: '\n' +
        '      WITH latest_prices AS (\n' +
        '        SELECT DISTINCT ON (p.symbol)\n' +
        '          p.symbol,\n' +
        '          p...',
      params: '1 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/liveData.js:723:21

  console.warn
    Database query error (returning null for tests): column p.low_price does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at routes/liveData.js:723:21

  console.error
    Live quotes error: TypeError: Cannot read properties of null (reading 'map')
        at map (/home/stocks/algo/webapp/lambda/routes/liveData.js:726:32)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)

      815 |   } catch (error) {
      816 |     try {
    > 817 |       console.error("Live quotes error:", error);
          |               ^
      818 |     } catch (e) {
      819 |       // Ignore console logging errors
      820 |     }

      at error (routes/liveData.js:817:15)

  console.log
    📊 Live quotes requested for symbols: AAPL,MSFT,GOOGL

      at log (routes/liveData.js:634:15)

  console.error
    Database query error: {
      error: 'column p.low_price does not exist',
      query: '\n' +
        '      WITH latest_prices AS (\n' +
        '        SELECT DISTINCT ON (p.symbol)\n' +
        '          p.symbol,\n' +
        '          p...',
      params: '1 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/liveData.js:723:21

  console.warn
    Database query error (returning null for tests): column p.low_price does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at routes/liveData.js:723:21

  console.error
    Live quotes error: TypeError: Cannot read properties of null (reading 'map')
        at map (/home/stocks/algo/webapp/lambda/routes/liveData.js:726:32)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)

      815 |   } catch (error) {
      816 |     try {
    > 817 |       console.error("Live quotes error:", error);
          |               ^
      818 |     } catch (e) {
      819 |       // Ignore console logging errors
      820 |     }

      at error (routes/liveData.js:817:15)

  console.log
    📊 Live quotes requested for symbols: popular

      at log (routes/liveData.js:634:15)

  console.error
    Database query error: {
      error: 'column p.low_price does not exist',
      query: '\n' +
        '      WITH latest_prices AS (\n' +
        '        SELECT DISTINCT ON (p.symbol)\n' +
        '          p.symbol,\n' +
        '          p...',
      params: '1 parameters',
      code: '42703'
    }

      1343 |     return result;
      1344 |   } catch (error) {
    > 1345 |     console.error("Database query error:", {
           |             ^
      1346 |       error: error.message,
      1347 |       query: typeof text === 'string' ? text.slice(0, 100) + (text.length > 100 ? "..." : "") : JSON.stringify(text).slice(0, 100) + "...",
      1348 |       params: params?.length ? `${params.length} parameters` : "no parameters",

      at error (utils/database.js:1345:13)
      at routes/liveData.js:723:21

  console.warn
    Database query error (returning null for tests): column p.low_price does not exist

      1370 |       error.code === "42P01" // undefined_table
      1371 |     ) {
    > 1372 |       console.warn("Database query error (returning null for tests):", error.message);
           |               ^
      1373 |       return null;
      1374 |     }
      1375 |

      at warn (utils/database.js:1372:15)
      at routes/liveData.js:723:21

  console.error
    Live quotes error: TypeError: Cannot read properties of null (reading 'map')
        at map (/home/stocks/algo/webapp/lambda/routes/liveData.js:726:32)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)

      815 |   } catch (error) {
      816 |     try {
    > 817 |       console.error("Live quotes error:", error);
          |               ^
      818 |     } catch (e) {
      819 |       // Ignore console logging errors
      820 |     }

      at error (routes/liveData.js:817:15)

  console.log
    🔧 Test mode: Using dev-bypass-token for authentication

      at log (middleware/auth.js:66:15)

  console.log
    {"timestamp":"2025-09-27T02:48:58.575Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Processing live data stream request","correlationId":"livedata-stream-1758941338575","userId":"dev-user-bypass","symbols":"default_watchlist","type":"quotes","format":"json","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:95:15)

  console.log
    {"timestamp":"2025-09-27T02:48:58.576Z","level":"INFO","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Live data stream request completed (test mode)","correlationId":"livedata-stream-1758941338575","duration":1,"symbols":["AAPL","MSFT","GOOGL","AMZN","TSLA","NVDA","META"],"type":"quotes","severity":"INFO"}

      at Logger.log [as output] (utils/logger.js:95:15)

FAIL tests/unit/routes/liveData.test.js
  Live Data Routes Unit Tests
    GET /live-data/
      ✕ should return live data info (10 ms)
    GET /live-data/quotes
      ✕ should return live quotes with proper structure (30 ms)
      ✓ should handle symbols filter (18 ms)
      ✓ should handle limit parameter (16 ms)
    GET /live-data/stream
      ✕ should setup SSE stream with proper headers (9 ms)
    GET /live-data/optimization
      ✕ should return optimization status (7 ms)
    POST /live-data/admin/toggle-stream
      ✕ should handle stream toggle for admin (6 ms)
      ✕ should validate toggle request body (4 ms)
    POST /live-data/admin/clear-cache
      ✕ should handle cache clearing for admin (6 ms)
    GET /live-data/health
      ✓ should return live data service health (5 ms)

  ● Live Data Routes Unit Tests › GET /live-data/ › should return live data info

    expect(received).toHaveProperty(path)

    Expected path: "status"
    Received path: []

    Received value: {"data": {"authentication": "Required for most endpoints", "endpoints": ["/status - Get live data service status", "/stream/:symbols - Stream real-time data for symbols (requires auth)", "/latest/:symbols - Get latest data for symbols (requires auth)", "/health - Health check endpoint", "/metrics - Performance metrics"], "message": "Live Data API - Ready", "status": "operational", "timestamp": "2025-09-27T02:48:58.503Z"}, "success": true, "timestamp": "2025-09-27T02:48:58.503Z"}

      33 |
      34 |       expect(response.body).toHaveProperty("success");
    > 35 |       expect(response.body).toHaveProperty("status");
         |                             ^
      36 |     });
      37 |   });
      38 |

      at Object.toHaveProperty (tests/unit/routes/liveData.test.js:35:29)

  ● Live Data Routes Unit Tests › GET /live-data/quotes › should return live quotes with proper structure

    expect(received).toContain(expected) // indexOf

    Expected value: 500
    Received array: [401]

      67 |         expect(response.body.data.summary).toHaveProperty("losers");
      68 |       } else {
    > 69 |         expect([401]).toContain(response.status);
         |                       ^
      70 |         expect(response.body).toHaveProperty("success", false);
      71 |       }
      72 |     });

      at Object.toContain (tests/unit/routes/liveData.test.js:69:23)

  ● Live Data Routes Unit Tests › GET /live-data/stream › should setup SSE stream with proper headers

    expect(received).toBe(expected) // Object.is equality

    Expected: "text/event-stream"
    Received: "application/json; charset=utf-8"

      107 |       if (response.status === 200) {
      108 |         // Check SSE headers are set
    > 109 |         expect(response.headers["content-type"]).toBe("text/event-stream");
          |                                                  ^
      110 |         expect(response.headers["cache-control"]).toBe("no-cache");
      111 |         expect(response.headers["connection"]).toBe("keep-alive");
      112 |       } else {

      at Object.toBe (tests/unit/routes/liveData.test.js:109:50)

  ● Live Data Routes Unit Tests › GET /live-data/optimization › should return optimization status

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [401]

      139 |         expect(Array.isArray(response.body.data.recommendations)).toBe(true);
      140 |       } else {
    > 141 |         expect([401]).toContain(response.status);
          |                       ^
      142 |       }
      143 |     });
      144 |   });

      at Object.toContain (tests/unit/routes/liveData.test.js:141:23)

  ● Live Data Routes Unit Tests › POST /live-data/admin/toggle-stream › should handle stream toggle for admin

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [401, 403]

      157 |         expect(response.body.data).toHaveProperty("active_connections");
      158 |       } else {
    > 159 |         expect([401, 403]).toContain(response.status);
          |                            ^
      160 |       }
      161 |     });
      162 |

      at Object.toContain (tests/unit/routes/liveData.test.js:159:28)

  ● Live Data Routes Unit Tests › POST /live-data/admin/toggle-stream › should validate toggle request body

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [400, 422]

      168 |
      169 |       if (response.status !== 401) {
    > 170 |         expect([400, 422]).toContain(response.status);
          |                            ^
      171 |         expect(response.body).toHaveProperty("success", false);
      172 |       }
      173 |     });

      at Object.toContain (tests/unit/routes/liveData.test.js:170:28)

  ● Live Data Routes Unit Tests › POST /live-data/admin/clear-cache › should handle cache clearing for admin

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [401, 403]

      186 |         expect(response.body.data).toHaveProperty("cleared_entries");
      187 |       } else {
    > 188 |         expect([401, 403]).toContain(response.status);
          |                            ^
      189 |       }
      190 |     });
      191 |   });

      at Object.toContain (tests/unit/routes/liveData.test.js:188:28)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

FAIL tests/integration/utils/schemaValidator.test.js
  Schema Validator Integration Tests
    Stock Data Validation
      ✓ should validate stock quote data (1 ms)
      ✕ should reject invalid stock data (1 ms)
      ✕ should validate portfolio data
    Trading Order Validation
      ✕ should validate buy order (1 ms)
      ✕ should validate limit order with price (1 ms)
      ✕ should reject invalid trading orders (1 ms)
    User Data Validation
      ✕ should validate user registration data
      ✕ should validate API key configuration
    Market Data Validation
      ✕ should validate technical indicators (1 ms)
      ✕ should validate earnings data
    Real-time Data Validation
      ✕ should validate WebSocket message format (5 ms)
      ✕ should validate streaming data batch (1 ms)
    Custom Schema Validation
      ✕ should validate with custom schema
      ✕ should register and use persistent custom schemas (1 ms)
    Data Sanitization
      ✕ should sanitize and transform data
      ✕ should handle SQL injection attempts
    Performance and Scalability
      ✓ should validate large datasets efficiently (9 ms)
      ✕ should cache compiled schemas for performance (1 ms)
    Error Handling and Edge Cases
      ✕ should handle malformed data gracefully
      ✕ should handle circular references
      ✕ should handle very large numbers
    Integration with Database
      ✕ should validate data before database insertion (1 ms)
      ✕ should handle database constraint violations
    Multi-language Support
      ✕ should support localized error messages (1 ms)

  ● Schema Validator Integration Tests › Stock Data Validation › should reject invalid stock data

    expect(received).toContain(expected) // indexOf

    Expected value: "symbol"
    Received array: [undefined, undefined, undefined]

      55 |
      56 |       const errorFields = validation.errors.map((err) => err.field);
    > 57 |       expect(errorFields).toContain("symbol");
         |                           ^
      58 |       expect(errorFields).toContain("price");
      59 |       expect(errorFields).toContain("volume");
      60 |       expect(errorFields).toContain("timestamp");

      at Object.toContain (tests/integration/utils/schemaValidator.test.js:57:27)

  ● Schema Validator Integration Tests › Stock Data Validation › should validate portfolio data

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      85 |       const validation = schemaValidator.validate(validPortfolio, "portfolio");
      86 |
    > 87 |       expect(validation.isValid).toBe(true);
         |                                  ^
      88 |       expect(validation.errors).toEqual([]);
      89 |       expect(validation.sanitizedData.holdings.length).toBe(2);
      90 |     });

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:87:34)

  ● Schema Validator Integration Tests › Trading Order Validation › should validate buy order

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      105 |       const validation = schemaValidator.validate(buyOrder, "tradingOrder");
      106 |
    > 107 |       expect(validation.isValid).toBe(true);
          |                                  ^
      108 |       expect(validation.sanitizedData.side).toBe("buy");
      109 |       expect(validation.sanitizedData.type).toBe("market");
      110 |       expect(validation.sanitizedData.quantity).toBe(100);

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:107:34)

  ● Schema Validator Integration Tests › Trading Order Validation › should validate limit order with price

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      125 |       const validation = schemaValidator.validate(limitOrder, "tradingOrder");
      126 |
    > 127 |       expect(validation.isValid).toBe(true);
          |                                  ^
      128 |       expect(validation.sanitizedData.type).toBe("limit");
      129 |       expect(validation.sanitizedData.limitPrice).toBe(155.0);
      130 |     });

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:127:34)

  ● Schema Validator Integration Tests › Trading Order Validation › should reject invalid trading orders

    expect(received).toContain(expected) // indexOf

    Expected value: "INVALID_USER_ID"
    Received array: [undefined, undefined, undefined, undefined, undefined]

      146 |
      147 |       const errorCodes = validation.errors.map((err) => err.code);
    > 148 |       expect(errorCodes).toContain("INVALID_USER_ID");
          |                          ^
      149 |       expect(errorCodes).toContain("INVALID_SYMBOL");
      150 |       expect(errorCodes).toContain("INVALID_SIDE");
      151 |       expect(errorCodes).toContain("INVALID_QUANTITY");

      at Object.toContain (tests/integration/utils/schemaValidator.test.js:148:26)

  ● Schema Validator Integration Tests › User Data Validation › should validate user registration data

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      168 |       const validation = schemaValidator.validate(userData, "userRegistration");
      169 |
    > 170 |       expect(validation.isValid).toBe(true);
          |                                  ^
      171 |       expect(validation.sanitizedData.email).toBe("test@example.com");
      172 |       expect(validation.sanitizedData.country).toBe("US");
      173 |       // Password should be excluded from sanitized data for security

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:170:34)

  ● Schema Validator Integration Tests › User Data Validation › should validate API key configuration

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      189 |       const validation = schemaValidator.validate(apiKeyConfig, "apiKeyConfig");
      190 |
    > 191 |       expect(validation.isValid).toBe(true);
          |                                  ^
      192 |       expect(validation.sanitizedData.provider).toBe("alpaca");
      193 |       expect(validation.sanitizedData.environment).toBe("paper");
      194 |       expect(Array.isArray(validation.sanitizedData.permissions)).toBe(true);

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:191:34)

  ● Schema Validator Integration Tests › Market Data Validation › should validate technical indicators

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      223 |       );
      224 |
    > 225 |       expect(validation.isValid).toBe(true);
          |                                  ^
      226 |       expect(validation.sanitizedData.indicators.rsi).toBe(65.5);
      227 |       expect(validation.sanitizedData.indicators.macd.macd).toBe(1.25);
      228 |       expect(validation.sanitizedData.indicators.bollinger.upper).toBe(155.0);

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:225:34)

  ● Schema Validator Integration Tests › Market Data Validation › should validate earnings data

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      249 |       const validation = schemaValidator.validate(earningsData, "earningsData");
      250 |
    > 251 |       expect(validation.isValid).toBe(true);
          |                                  ^
      252 |       expect(validation.sanitizedData.quarter).toBe("Q1");
      253 |       expect(validation.sanitizedData.year).toBe(2023);
      254 |       expect(validation.sanitizedData.surprise.epsPercent).toBe(4.83);

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:251:34)

  ● Schema Validator Integration Tests › Real-time Data Validation › should validate WebSocket message format

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      276 |       );
      277 |
    > 278 |       expect(validation.isValid).toBe(true);
          |                                  ^
      279 |       expect(validation.sanitizedData.type).toBe("quote");
      280 |       expect(validation.sanitizedData.symbol).toBe("AAPL");
      281 |       expect(validation.sanitizedData.data.price).toBe(150.25);

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:278:34)

  ● Schema Validator Integration Tests › Real-time Data Validation › should validate streaming data batch

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      312 |       );
      313 |
    > 314 |       expect(validation.isValid).toBe(true);
          |                                  ^
      315 |       expect(validation.sanitizedData.messages.length).toBe(2);
      316 |       expect(validation.sanitizedData.source).toBe("alpaca");
      317 |     });

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:314:34)

  ● Schema Validator Integration Tests › Custom Schema Validation › should validate with custom schema

    TypeError: schemaValidator.validateWithCustomSchema is not a function

      340 |       };
      341 |
    > 342 |       const validation = schemaValidator.validateWithCustomSchema(
          |                                          ^
      343 |         testData,
      344 |         customSchema
      345 |       );

      at Object.validateWithCustomSchema (tests/integration/utils/schemaValidator.test.js:342:42)

  ● Schema Validator Integration Tests › Custom Schema Validation › should register and use persistent custom schemas

    TypeError: schemaValidator.registerSchema is not a function

      362 |
      363 |       // Register schema
    > 364 |       schemaValidator.registerSchema(schemaName, schema);
          |                       ^
      365 |
      366 |       // Use registered schema
      367 |       const testData = { id: "test_123", value: 456 };

      at Object.registerSchema (tests/integration/utils/schemaValidator.test.js:364:23)

  ● Schema Validator Integration Tests › Data Sanitization › should sanitize and transform data

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      389 |       });
      390 |
    > 391 |       expect(validation.isValid).toBe(true);
          |                                  ^
      392 |       expect(validation.sanitizedData.symbol).toBe("AAPL");
      393 |       expect(validation.sanitizedData.price).toBe(150.25);
      394 |       expect(validation.sanitizedData.description).not.toContain("<script>");

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:391:34)

  ● Schema Validator Integration Tests › Data Sanitization › should handle SQL injection attempts

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      408 |       });
      409 |
    > 410 |       expect(validation.sanitized).toBe(true);
          |                                    ^
      411 |       expect(validation.sanitizedData.symbol).not.toContain("DROP TABLE");
      412 |       expect(validation.sanitizedData.userId).not.toContain("OR '1'='1");
      413 |       expect(validation.sanitizedData.description).not.toContain("DELETE FROM");

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:410:36)

  ● Schema Validator Integration Tests › Performance and Scalability › should cache compiled schemas for performance

    expect(received).toBeLessThan(expected)

    Expected: < 0
    Received:   0

      452 |       expect(validation1.isValid).toBe(true);
      453 |       expect(validation2.isValid).toBe(true);
    > 454 |       expect(duration2).toBeLessThan(duration1); // Cached should be faster
          |                         ^
      455 |     });
      456 |   });
      457 |

      at Object.toBeLessThan (tests/integration/utils/schemaValidator.test.js:454:25)

  ● Schema Validator Integration Tests › Error Handling and Edge Cases › should handle malformed data gracefully

    TypeError: Cannot read properties of null (reading 'symbol')

      729 |     // Check required fields
      730 |     for (const requiredField of schema.required) {
    > 731 |       if (data[requiredField] === undefined || data[requiredField] === null) {
          |               ^
      732 |         errors.push(`Required field "${requiredField}" is missing`);
      733 |       }
      734 |     }

      at SchemaValidator.validate (utils/schemaValidator.js:731:15)
      at Object.validate (utils/schemaValidator.js:1573:51)
      at validate (tests/integration/utils/schemaValidator.test.js:463:44)
          at Array.forEach (<anonymous>)
      at Object.forEach (tests/integration/utils/schemaValidator.test.js:462:21)

  ● Schema Validator Integration Tests › Error Handling and Edge Cases › should handle circular references

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      477 |       expect(
      478 |         validation.errors.some((err) => err.code === "CIRCULAR_REFERENCE")
    > 479 |       ).toBe(true);
          |         ^
      480 |     });
      481 |
      482 |     test("should handle very large numbers", () => {

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:479:9)

  ● Schema Validator Integration Tests › Error Handling and Edge Cases › should handle very large numbers

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      496 |       expect(
      497 |         validation.errors.some((err) => err.code === "INVALID_NUMBER")
    > 498 |       ).toBe(true);
          |         ^
      499 |     });
      500 |   });
      501 |

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:498:9)

  ● Schema Validator Integration Tests › Integration with Database › should validate data before database insertion

    TypeError: schemaValidator.validateForDatabase is not a function

      509 |       };
      510 |
    > 511 |       const validation = await schemaValidator.validateForDatabase(
          |                                                ^
      512 |         stockData,
      513 |         "stock_quotes"
      514 |       );

      at Object.validateForDatabase (tests/integration/utils/schemaValidator.test.js:511:48)

  ● Schema Validator Integration Tests › Integration with Database › should handle database constraint violations

    TypeError: schemaValidator.validateForDatabase is not a function

      527 |       };
      528 |
    > 529 |       const validation = await schemaValidator.validateForDatabase(
          |                                                ^
      530 |         duplicateData,
      531 |         "stock_quotes"
      532 |       );

      at Object.validateForDatabase (tests/integration/utils/schemaValidator.test.js:529:48)

  ● Schema Validator Integration Tests › Multi-language Support › should support localized error messages

    expect(received).not.toBe(expected) // Object.is equality

    Expected: not undefined

      556 |       expect(validationEn.isValid).toBe(false);
      557 |       expect(validationEs.isValid).toBe(false);
    > 558 |       expect(validationEn.errors[0].message).not.toBe(
          |                                                  ^
      559 |         validationEs.errors[0].message
      560 |       );
      561 |     });

      at Object.toBe (tests/integration/utils/schemaValidator.test.js:558:50)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    JWT verifier initialized successfully (test mode)

      at ApiKeyService.log [as initializeJwtVerifier] (utils/apiKeyService.js:100:17)

FAIL tests/unit/routes/positioning.test.js
  Positioning Routes
    GET /api/positioning/stocks
      ✓ should return positioning data successfully (16 ms)
      ✓ should handle symbol parameter correctly (5 ms)
      ✓ should handle pagination parameters (4 ms)
      ✓ should handle timeframe parameter (7 ms)
      ✓ should handle database query failures with 500 error (5 ms)
      ✓ should return 404 when no data is found (4 ms)
      ✓ should handle database errors properly (7 ms)
      ✓ should include correct metadata structure (4 ms)
      ✓ should handle server errors properly (4 ms)
      ✓ should use default values when parameters are not provided (6 ms)
      ✓ should handle large page numbers correctly (4 ms)
    GET /api/positioning/summary
      ✕ should return positioning summary successfully (5 ms)
      ✕ should calculate bullish overall positioning (6 ms)
      ✕ should calculate moderately bullish positioning (4 ms)
      ✕ should calculate bearish positioning (4 ms)
      ✕ should calculate moderately bearish positioning (6 ms)
      ✕ should default to neutral positioning (4 ms)
      ✕ should handle null/undefined values in database results (4 ms)
      ✕ should calculate retail sentiment classifications correctly (6 ms)
      ✕ should include valid timestamp in response (4 ms)
      ✕ should handle database errors properly (4 ms)
      ✕ should use correct SQL queries with fundamental metrics and retail sentiment (6 ms)
      ✕ should have consistent data structure (4 ms)

  ● Positioning Routes › GET /api/positioning/summary › should return positioning summary successfully

    expected 200 "OK", got 401 "Unauthorized"

      276 |       const response = await request(app)
      277 |         .get("/api/positioning/summary")
    > 278 |         .expect(200);
          |          ^
      279 |
      280 |       expect(response.body).toHaveProperty("market_overview");
      281 |       expect(response.body).toHaveProperty("key_metrics");

      at Object.expect (tests/unit/routes/positioning.test.js:278:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Positioning Routes › GET /api/positioning/summary › should calculate bullish overall positioning

    expected 200 "OK", got 401 "Unauthorized"

      299 |       const response = await request(app)
      300 |         .get("/api/positioning/summary")
    > 301 |         .expect(200);
          |          ^
      302 |
      303 |       expect(response.body.market_overview.overall_positioning).toBe("BULLISH");
      304 |     });

      at Object.expect (tests/unit/routes/positioning.test.js:301:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Positioning Routes › GET /api/positioning/summary › should calculate moderately bullish positioning

    expected 200 "OK", got 401 "Unauthorized"

      318 |       const response = await request(app)
      319 |         .get("/api/positioning/summary")
    > 320 |         .expect(200);
          |          ^
      321 |
      322 |       expect(response.body.market_overview.overall_positioning).toBe(
      323 |         "MODERATELY_BULLISH"

      at Object.expect (tests/unit/routes/positioning.test.js:320:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Positioning Routes › GET /api/positioning/summary › should calculate bearish positioning

    expected 200 "OK", got 401 "Unauthorized"

      339 |       const response = await request(app)
      340 |         .get("/api/positioning/summary")
    > 341 |         .expect(200);
          |          ^
      342 |
      343 |       expect(response.body.market_overview.overall_positioning).toBe("BEARISH");
      344 |     });

      at Object.expect (tests/unit/routes/positioning.test.js:341:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Positioning Routes › GET /api/positioning/summary › should calculate moderately bearish positioning

    expected 200 "OK", got 401 "Unauthorized"

      358 |       const response = await request(app)
      359 |         .get("/api/positioning/summary")
    > 360 |         .expect(200);
          |          ^
      361 |
      362 |       expect(response.body.market_overview.overall_positioning).toBe(
      363 |         "MODERATELY_BEARISH"

      at Object.expect (tests/unit/routes/positioning.test.js:360:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Positioning Routes › GET /api/positioning/summary › should default to neutral positioning

    expected 200 "OK", got 401 "Unauthorized"

      379 |       const response = await request(app)
      380 |         .get("/api/positioning/summary")
    > 381 |         .expect(200);
          |          ^
      382 |
      383 |       expect(response.body.market_overview.overall_positioning).toBe("NEUTRAL");
      384 |     });

      at Object.expect (tests/unit/routes/positioning.test.js:381:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Positioning Routes › GET /api/positioning/summary › should handle null/undefined values in database results

    expected 200 "OK", got 401 "Unauthorized"

      407 |       const response = await request(app)
      408 |         .get("/api/positioning/summary")
    > 409 |         .expect(200);
          |          ^
      410 |
      411 |       expect(response.body.key_metrics.institutional_avg_change).toBe(0);
      412 |       expect(response.body.key_metrics.retail_net_sentiment).toBe(0);

      at Object.expect (tests/unit/routes/positioning.test.js:409:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Positioning Routes › GET /api/positioning/summary › should calculate retail sentiment classifications correctly

    expected 200 "OK", got 401 "Unauthorized"

      439 |         const response = await request(app)
      440 |           .get("/api/positioning/summary")
    > 441 |           .expect(200);
          |            ^
      442 |
      443 |         expect(response.body.market_overview.retail_sentiment).toBe(
      444 |           testCase.expected

      at Object.expect (tests/unit/routes/positioning.test.js:441:12)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Positioning Routes › GET /api/positioning/summary › should include valid timestamp in response

    expected 200 "OK", got 401 "Unauthorized"

      454 |       const response = await request(app)
      455 |         .get("/api/positioning/summary")
    > 456 |         .expect(200);
          |          ^
      457 |
      458 |       expect(response.body.last_updated).toMatch(
      459 |         /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/

      at Object.expect (tests/unit/routes/positioning.test.js:456:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Positioning Routes › GET /api/positioning/summary › should handle database errors properly

    expected 500 "Internal Server Error", got 401 "Unauthorized"

      467 |       const response = await request(app)
      468 |         .get("/api/positioning/summary")
    > 469 |         .expect(500);
          |          ^
      470 |
      471 |       expect(response.body.success).toBe(false);
      472 |       expect(response.body.error).toBe("Failed to fetch positioning summary");

      at Object.expect (tests/unit/routes/positioning.test.js:469:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Positioning Routes › GET /api/positioning/summary › should use correct SQL queries with fundamental metrics and retail sentiment

    expected 200 "OK", got 401 "Unauthorized"

      482 |         .mockResolvedValueOnce(mockRetailSummary);
      483 |
    > 484 |       await request(app).get("/api/positioning/summary").expect(200);
          |                                                          ^
      485 |
      486 |       expect(mockQuery).toHaveBeenCalledWith(
      487 |         expect.stringContaining("FROM stocks")

      at Object.expect (tests/unit/routes/positioning.test.js:484:58)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● Positioning Routes › GET /api/positioning/summary › should have consistent data structure

    expected 200 "OK", got 401 "Unauthorized"

      501 |       const response = await request(app)
      502 |         .get("/api/positioning/summary")
    > 503 |         .expect(200);
          |          ^
      504 |
      505 |       expect(response.body).toHaveProperty("market_overview");
      506 |       expect(response.body.market_overview).toHaveProperty(

      at Object.expect (tests/unit/routes/positioning.test.js:503:10)
      ----
      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)
      at node_modules/supertest/lib/test.js:308:13
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    Using database config from environment variables

      at log (utils/database.js:177:15)

  console.log
    Database config loaded from environment: localhost:5432/stocks

      at log (utils/database.js:215:15)

  console.log
    ✅ Database connection pool initialized successfully

      at log (utils/database.js:266:15)

  console.error
    Alpaca account fetch error: API Error

      84 |       };
      85 |     } catch (error) {
    > 86 |       console.error("Alpaca account fetch error:", error.message);
         |               ^
      87 |       throw new Error(`Failed to fetch account information: ${error.message}`);
      88 |     }
      89 |   }

      at AlpacaService.error [as getAccount] (utils/alpacaService.js:86:15)
      at Object.<anonymous> (tests/integration/services/alpacaService.test.js:149:7)

  console.error
    Error fetching position: Cannot read properties of undefined (reading 'find')

      819 |       };
      820 |     } catch (error) {
    > 821 |       console.error("Error fetching position:", error.message);
          |               ^
      822 |       throw new Error(
      823 |         `Failed to fetch position for ${symbol}: ${error.message}`
      824 |       );

      at AlpacaService.error [as getPosition] (utils/alpacaService.js:821:15)
      at Object.<anonymous> (tests/integration/services/alpacaService.test.js:218:24)

  console.error
    Alpaca order creation error: Quantity must be a positive number

      738 |       };
      739 |     } catch (error) {
    > 740 |       console.error("Alpaca order creation error:", error.message);
          |               ^
      741 |       throw new Error(`Failed to create order: ${error.message}`);
      742 |     }
      743 |   }

      at AlpacaService.error [as createOrder] (utils/alpacaService.js:740:15)
      at Object.createOrder (tests/integration/services/alpacaService.test.js:238:41)

  console.error
    Alpaca order creation error: Quantity must be a positive number

      738 |       };
      739 |     } catch (error) {
    > 740 |       console.error("Alpaca order creation error:", error.message);
          |               ^
      741 |       throw new Error(`Failed to create order: ${error.message}`);
      742 |     }
      743 |   }

      at AlpacaService.error [as createOrder] (utils/alpacaService.js:740:15)
      at Object.createOrder (tests/integration/services/alpacaService.test.js:267:41)

  console.log
    Fetching orders from Alpaca

      at AlpacaService.log [as getOrders] (utils/alpacaService.js:748:15)

  console.log
    Canceling order order-123 on Alpaca

      at AlpacaService.log [as cancelOrder] (utils/alpacaService.js:776:15)

  console.error
    Alpaca order creation error: Quantity must be a positive number

      738 |       };
      739 |     } catch (error) {
    > 740 |       console.error("Alpaca order creation error:", error.message);
          |               ^
      741 |       throw new Error(`Failed to create order: ${error.message}`);
      742 |     }
      743 |   }

      at AlpacaService.error [as createOrder] (utils/alpacaService.js:740:15)
      at Object.createOrder (tests/integration/services/alpacaService.test.js:311:23)

  console.log
    📊 Fetching bars for AAPL from Alpaca { timeframe: '1Day', start: '2023-01-01', limit: 100 }

      at AlpacaService.log [as getBars] (utils/alpacaService.js:538:15)

  console.log
    ✅ Bars fetched for AAPL: 1 bars

      at AlpacaService.log [as getBars] (utils/alpacaService.js:559:15)

  console.error
    Alpaca account fetch error: Network error

      84 |       };
      85 |     } catch (error) {
    > 86 |       console.error("Alpaca account fetch error:", error.message);
         |               ^
      87 |       throw new Error(`Failed to fetch account information: ${error.message}`);
      88 |     }
      89 |   }

      at AlpacaService.error [as getAccount] (utils/alpacaService.js:86:15)
      at Object.<anonymous> (tests/integration/services/alpacaService.test.js:466:7)

  console.error
    Alpaca account fetch error: Rate limit exceeded

      84 |       };
      85 |     } catch (error) {
    > 86 |       console.error("Alpaca account fetch error:", error.message);
         |               ^
      87 |       throw new Error(`Failed to fetch account information: ${error.message}`);
      88 |     }
      89 |   }

      at AlpacaService.error [as getAccount] (utils/alpacaService.js:86:15)
      at Object.<anonymous> (tests/integration/services/alpacaService.test.js:474:7)

  console.error
    Alpaca account fetch error: Invalid API credentials

      84 |       };
      85 |     } catch (error) {
    > 86 |       console.error("Alpaca account fetch error:", error.message);
         |               ^
      87 |       throw new Error(`Failed to fetch account information: ${error.message}`);
      88 |     }
      89 |   }

      at AlpacaService.error [as getAccount] (utils/alpacaService.js:86:15)
      at Object.<anonymous> (tests/integration/services/alpacaService.test.js:484:7)

  console.error
    Alpaca order creation error: Quantity must be a positive number

      738 |       };
      739 |     } catch (error) {
    > 740 |       console.error("Alpaca order creation error:", error.message);
          |               ^
      741 |       throw new Error(`Failed to create order: ${error.message}`);
      742 |     }
      743 |   }

      at AlpacaService.error [as createOrder] (utils/alpacaService.js:740:15)
      at Object.createOrder (tests/integration/services/alpacaService.test.js:495:23)

  console.error
    Alpaca order creation error: Quantity must be a positive number

      738 |       };
      739 |     } catch (error) {
    > 740 |       console.error("Alpaca order creation error:", error.message);
          |               ^
      741 |       throw new Error(`Failed to create order: ${error.message}`);
      742 |     }
      743 |   }

      at AlpacaService.error [as createOrder] (utils/alpacaService.js:740:15)
      at Object.createOrder (tests/integration/services/alpacaService.test.js:510:23)

  console.log
    Fetching orders from Alpaca

      at AlpacaService.log [as getOrders] (utils/alpacaService.js:748:15)

FAIL tests/integration/services/alpacaService.test.js
  Alpaca Service Integration Tests
    Service Initialization
      ✓ should initialize with valid API credentials (1 ms)
      ✓ should throw error with missing credentials (15 ms)
      ✓ should configure for live trading when specified (1 ms)
    Rate Limiting
      ✓ should track request times for rate limiting
      ✓ should throw error when rate limit exceeded (4 ms)
      ✓ should clean up old request times (1 ms)
    Account Operations
      ✕ should fetch account information (2 ms)
      ✓ should handle account fetch errors gracefully (4 ms)
      ✕ should fetch portfolio history (2 ms)
    Position Management
      ✓ should fetch current positions (1 ms)
      ✕ should fetch position for specific symbol (1 ms)
    Order Management
      ✕ should place market buy order (1 ms)
      ✕ should place limit sell order (1 ms)
      ✓ should fetch all orders (1 ms)
      ✕ should cancel specific order (1 ms)
      ✕ should validate order parameters (2 ms)
    Market Data Operations
      ✓ should fetch asset information
      ✓ should fetch tradable assets
      ✕ should fetch historical bars data (2 ms)
      ✓ should fetch latest trade data (1 ms)
    Watchlist Management
      ✓ should fetch all watchlists (1 ms)
      ✓ should create new watchlist (1 ms)
    Error Handling and Edge Cases
      ✓ should handle network errors gracefully (1 ms)
      ✓ should handle API rate limiting from Alpaca (1 ms)
      ✓ should handle invalid API credentials (2 ms)
      ✕ should handle market closed scenarios (3 ms)
      ✕ should handle insufficient funds (2 ms)
    Performance and Monitoring
      ✓ should track request metrics
      ✓ should handle concurrent requests properly (1 ms)

  ● Alpaca Service Integration Tests › Account Operations › should fetch account information

    expect(received).toEqual(expected) // deep equality

    - Expected  -  4
    + Received  + 21

      Object {
    -   "buying_power": "20000.00",
    -   "cash": "10000.00",
    -   "id": "test-account-id",
    -   "portfolio_value": "12000.00",
    +   "accountBlocked": undefined,
    +   "accountId": "test-account-id",
    +   "buyingPower": 20000,
    +   "cash": 10000,
    +   "createdAt": undefined,
    +   "currency": undefined,
    +   "dayTradeCount": NaN,
    +   "dayTradingBuyingPower": NaN,
    +   "environment": "paper",
    +   "equity": NaN,
    +   "initialMargin": NaN,
    +   "lastEquity": NaN,
    +   "longMarketValue": NaN,
    +   "maintenanceMargin": NaN,
    +   "multiplier": NaN,
    +   "patternDayTrader": undefined,
    +   "portfolioValue": 12000,
    +   "regtBuyingPower": NaN,
    +   "shortMarketValue": NaN,
        "status": "ACTIVE",
    +   "tradingBlocked": undefined,
    +   "transfersBlocked": undefined,
      }

      141 |
      142 |       expect(mockClient.getAccount).toHaveBeenCalledTimes(1);
    > 143 |       expect(account).toEqual(mockAccount);
          |                       ^
      144 |     });
      145 |
      146 |     test("should handle account fetch errors gracefully", async () => {

      at Object.toEqual (tests/integration/services/alpacaService.test.js:143:23)

  ● Alpaca Service Integration Tests › Account Operations › should fetch portfolio history

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    +   "extended_hours": true,
    +   "period": Object {
          "period": "1D",
          "timeframe": "1Min",
    +   },
    +   "timeframe": "1Day",
      },

    Number of calls: 1

      165 |       });
      166 |
    > 167 |       expect(mockClient.getPortfolioHistory).toHaveBeenCalledWith({
          |                                              ^
      168 |         period: "1D",
      169 |         timeframe: "1Min",
      170 |       });

      at Object.toHaveBeenCalledWith (tests/integration/services/alpacaService.test.js:167:46)

  ● Alpaca Service Integration Tests › Position Management › should fetch position for specific symbol

    Failed to fetch position for AAPL: Cannot read properties of undefined (reading 'find')

      820 |     } catch (error) {
      821 |       console.error("Error fetching position:", error.message);
    > 822 |       throw new Error(
          |             ^
      823 |         `Failed to fetch position for ${symbol}: ${error.message}`
      824 |       );
      825 |     }

      at AlpacaService.getPosition (utils/alpacaService.js:822:13)
      at Object.<anonymous> (tests/integration/services/alpacaService.test.js:218:24)

  ● Alpaca Service Integration Tests › Order Management › should place market buy order

    Failed to create order: Quantity must be a positive number

      739 |     } catch (error) {
      740 |       console.error("Alpaca order creation error:", error.message);
    > 741 |       throw new Error(`Failed to create order: ${error.message}`);
          |             ^
      742 |     }
      743 |   }
      744 |

      at AlpacaService.createOrder (utils/alpacaService.js:741:13)
      at Object.createOrder (tests/integration/services/alpacaService.test.js:238:41)

  ● Alpaca Service Integration Tests › Order Management › should place limit sell order

    Failed to create order: Quantity must be a positive number

      739 |     } catch (error) {
      740 |       console.error("Alpaca order creation error:", error.message);
    > 741 |       throw new Error(`Failed to create order: ${error.message}`);
          |             ^
      742 |     }
      743 |   }
      744 |

      at AlpacaService.createOrder (utils/alpacaService.js:741:13)
      at Object.createOrder (tests/integration/services/alpacaService.test.js:267:41)

  ● Alpaca Service Integration Tests › Order Management › should cancel specific order

    expect(received).toBe(expected) // Object.is equality

    Expected: "order-123"
    Received: undefined

      303 |
      304 |       expect(mockClient.cancelOrder).toHaveBeenCalledWith("order-123");
    > 305 |       expect(result.id).toBe("order-123");
          |                         ^
      306 |     });
      307 |
      308 |     test("should validate order parameters", async () => {

      at Object.toBe (tests/integration/services/alpacaService.test.js:305:25)

  ● Alpaca Service Integration Tests › Order Management › should validate order parameters

    expect(received).rejects.toThrow(expected)

    Expected substring: "Symbol is required"
    Received message:   "Failed to create order: Quantity must be a positive number"

          739 |     } catch (error) {
          740 |       console.error("Alpaca order creation error:", error.message);
        > 741 |       throw new Error(`Failed to create order: ${error.message}`);
              |             ^
          742 |     }
          743 |   }
          744 |

      at AlpacaService.createOrder (utils/alpacaService.js:741:13)
      at Object.createOrder (tests/integration/services/alpacaService.test.js:311:23)
      at Object.toThrow (node_modules/expect/build/index.js:218:22)
      at Object.toThrow (tests/integration/services/alpacaService.test.js:317:17)

  ● Alpaca Service Integration Tests › Market Data Operations › should fetch historical bars data

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      "AAPL",
      Object {
    +   "asof": null,
        "end": "2023-01-02",
    +   "feed": null,
    +   "limit": 100,
    +   "page_token": null,
        "start": "2023-01-01",
        "timeframe": "1Day",
      },

    Number of calls: 1

      396 |       });
      397 |
    > 398 |       expect(mockClient.getBars).toHaveBeenCalledWith("AAPL", {
          |                                  ^
      399 |         start: "2023-01-01",
      400 |         end: "2023-01-02",
      401 |         timeframe: "1Day",

      at Object.toHaveBeenCalledWith (tests/integration/services/alpacaService.test.js:398:34)

  ● Alpaca Service Integration Tests › Error Handling and Edge Cases › should handle market closed scenarios

    expect(received).rejects.toThrow(expected)

    Expected substring: "Market is closed"
    Received message:   "Failed to create order: Quantity must be a positive number"

          739 |     } catch (error) {
          740 |       console.error("Alpaca order creation error:", error.message);
        > 741 |       throw new Error(`Failed to create order: ${error.message}`);
              |             ^
          742 |     }
          743 |   }
          744 |

      at AlpacaService.createOrder (utils/alpacaService.js:741:13)
      at Object.createOrder (tests/integration/services/alpacaService.test.js:495:23)
      at Object.toThrow (node_modules/expect/build/index.js:218:22)
      at Object.toThrow (tests/integration/services/alpacaService.test.js:501:17)

  ● Alpaca Service Integration Tests › Error Handling and Edge Cases › should handle insufficient funds

    expect(received).rejects.toThrow(expected)

    Expected substring: "Insufficient buying power"
    Received message:   "Failed to create order: Quantity must be a positive number"

          739 |     } catch (error) {
          740 |       console.error("Alpaca order creation error:", error.message);
        > 741 |       throw new Error(`Failed to create order: ${error.message}`);
              |             ^
          742 |     }
          743 |   }
          744 |

      at AlpacaService.createOrder (utils/alpacaService.js:741:13)
      at Object.createOrder (tests/integration/services/alpacaService.test.js:510:23)
      at Object.toThrow (node_modules/expect/build/index.js:218:22)
      at Object.toThrow (tests/integration/services/alpacaService.test.js:516:17)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    {"timestamp":"2025-09-27T02:48:59.143Z","level":"ERROR","service":"financial-platform-api","environment":"test","version":"1.0.0","message":"Stock returns calculation failed for AAPL:","correlationId":"703a8f66","severity":"ERROR"}

      at Logger.log [as output] (utils/logger.js:95:15)

FAIL tests/unit/utils/riskEngine.test.js
  Risk Engine
    portfolio risk assessment
      ✓ should calculate portfolio VaR (2 ms)
      ✓ should assess concentration risk
      ✓ should calculate sector allocation risk
      ✓ should compute correlation matrix (1 ms)
    individual stock risk metrics
      ✓ should calculate beta coefficient (1 ms)
      ✕ should calculate historical volatility (1 ms)
      ✓ should calculate maximum drawdown (1 ms)
      ✓ should assess liquidity risk
    risk limit monitoring
      ✓ should check position size limits (4 ms)
      ✓ should validate sector allocation limits
      ✓ should monitor leverage limits
      ✓ should validate correlation limits (1 ms)
    stress testing and scenario analysis
      ✓ should run market crash scenario (1 ms)
      ✓ should perform Monte Carlo simulation (3 ms)
      ✓ should analyze interest rate sensitivity (1 ms)
      ✓ should evaluate tail risk events
    risk reporting and alerts
      ✓ should generate risk dashboard
      ✓ should create risk alerts (1 ms)
      ✓ should generate compliance report (1 ms)
    dynamic risk adjustment
      ✓ should calculate optimal position sizes
      ✓ should rebalance portfolio for risk control
      ✓ should adjust risk based on market conditions (1 ms)
    error handling and edge cases
      ✓ should handle missing price data
      ✓ should handle portfolio with zero weights (1 ms)
      ✓ should validate input parameters (16 ms)
      ✓ should handle database connection errors (3 ms)

  ● Risk Engine › individual stock risk metrics › should calculate historical volatility

    expect(received).toBe(expected) // Object.is equality

    Expected: "number"
    Received: "object"

      110 |       const volatility = await riskEngine.calculateVolatility("AAPL", 30);
      111 |
    > 112 |       expect(typeof volatility).toBe("number");
          |                                 ^
      113 |       expect(volatility).toBeGreaterThan(0);
      114 |       expect(volatility).toBeLessThan(2); // Annual volatility typically < 200%
      115 |     });

      at Object.toBe (tests/unit/utils/riskEngine.test.js:112:33)

  console.log
    ✅ Test environment configured

      at Object.log (tests/setup.js:20:9)

  console.log
    💰 Dividend history requested for AAPL

      at log (routes/dividend.js:576:11)

  console.log
    💰 Dividend history requested for AAPL

      at log (routes/dividend.js:576:11)

  console.log
    💰 Dividend history requested for BRK.B

      at log (routes/dividend.js:576:11)

  console.log
    💰 Dividend history requested for AAPL

      at log (routes/dividend.js:576:11)

