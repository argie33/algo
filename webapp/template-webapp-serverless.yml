AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Serverless SPA → CloudFront + HTTP API Gateway + Lambda (RDS)
  — imports S3, network & IAM from core infra; DB Secret ARN from stocks-infra-stack.

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name for resource naming and configuration

  LambdaCodeKey:
    Type: String
    Description: S3 key for the API Lambda zip (e.g. api.zip)

  CertificateArn:
    Type: String
    Default: ''
    Description: ACM certificate ARN (us-east-1) for CloudFront

Conditions:
  UseCert:
    Fn::Not:
      - Fn::Equals:
          - !Ref CertificateArn
          - ''

Resources:

  ## 1) Origin Access Identity
  OAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access SPA bucket

  ## 2) Bucket policy for SPA bucket
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !ImportValue StocksCore-SiteCodeBucketName
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt OAI.S3CanonicalUserId
            Action: s3:GetObject
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - !ImportValue StocksCore-SiteCodeBucketName
                  - '/*'

  ## 3) CloudFront distribution
  SPACloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: SPA
            DomainName: !Sub "${StocksCore-SiteCodeBucketName}.s3.amazonaws.com"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OAI}"
        DefaultCacheBehavior:
          TargetOriginId: SPA
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
        ViewerCertificate:
          Fn::If:
            - UseCert
            - AcmCertificateArn: !Ref CertificateArn
              SslSupportMethod: sni-only
            - CloudFrontDefaultCertificate: true
  ## 4) API Lambda backed by RDS (via Secret)
  ApiLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'financial-dashboard-api-${EnvironmentName}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !ImportValue StocksCore-LambdaExecutionRoleArn
      Code:
        S3Bucket: !ImportValue StocksCore-CodeBucketName
        S3Key: !Ref LambdaCodeKey
      Timeout: 30
      VpcConfig:
        SubnetIds:
          - !ImportValue StocksCore-PrivateSubnet1Id
          - !ImportValue StocksCore-PrivateSubnet2Id
        SecurityGroupIds:
          - !ImportValue StocksCore-LambdaSecurityGroupId
      Environment:
        Variables:
          DB_SECRET_ARN: !ImportValue StocksInfra-SecretArn
          ENVIRONMENT: !Ref EnvironmentName
  ## 5) HTTP API (API Gateway v2)
  StocksApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'financial-dashboard-api-${EnvironmentName}'
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins: ['*']
        AllowMethods: ['GET','POST','PUT','DELETE','OPTIONS']
        AllowHeaders: ['Content-Type', 'X-Amz-Date', 'Authorization', 'X-Api-Key', 'X-Amz-Security-Token']

  ApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref StocksApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt ApiLambda.Arn
      PayloadFormatVersion: '2.0'

  # Catch-all route for all paths
  ApiRouteRoot:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref StocksApi
      RouteKey: 'ANY /'
      Target: !Sub 'integrations/${ApiIntegration}'

  ApiRouteProxy:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref StocksApi
      RouteKey: 'ANY /{proxy+}'
      Target: !Sub 'integrations/${ApiIntegration}'

  ApiDeploy:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref StocksApi
    DependsOn: [ApiRouteRoot, ApiRouteProxy]
  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref StocksApi
      StageName: !Ref EnvironmentName
      DeploymentId: !Ref ApiDeploy
      AutoDeploy: true

  # Permission for API Gateway to invoke Lambda
  LambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ApiLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${StocksApi}/*/*'

Outputs:
  FrontendBucketName:
    Description: Name of the S3 bucket for frontend hosting
    Value: !ImportValue StocksCore-SiteCodeBucketName
    Export:
      Name: !Sub '${AWS::StackName}-FrontendBucketName'

  CloudFrontDistributionId:
    Description: ID of the CloudFront distribution
    Value: !Ref SPACloudFront
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDistributionId'

  CloudFrontUrl:
    Description: CloudFront URL for SPA
    Value: !Sub 'https://${SPACloudFront.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'

  ApiGatewayUrl:
    Description: HTTP API invoke URL with stage
    Value: !Sub 'https://${StocksApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayUrl'

  ApiUrl:
    Description: HTTP API invoke URL (legacy output name)
    Value: !Sub 'https://${StocksApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}'

  EnvironmentName:
    Description: Environment name
    Value: !Ref EnvironmentName
    Export:
      Name: !Sub '${AWS::StackName}-Environment'
