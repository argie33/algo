{
  "name": "financial-dashboard-frontend",
  "version": "1.0.10",
  "description": "React frontend for Financial Data Dashboard - Complex app restored and ready for AWS",
  "type": "module",
  "private": true,
  "dependencies": {
    "@aws-amplify/auth": "^6.13.1",
    "@aws-amplify/core": "^6.12.1",
    "@aws-amplify/ui-react": "^6.11.2",
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.1",
    "@headlessui/react": "^2.2.4",
    "@heroicons/react": "^2.2.0",
    "@mui/icons-material": "^5.15.14",
    "@mui/material": "^5.15.14",
    "@tanstack/react-query": "^4.35.3",
    "aws-amplify": "^6.15.1",
    "axios": "^1.3.4",
    "date-fns": "^4.1.0",
    "framer-motion": "^10.16.4",
    "lodash": "^4.17.21",
    "ml-matrix": "^6.12.1",
    "numeral": "^2.0.6",
    "react": "^18.3.1",
    "react-beautiful-dnd": "^13.1.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.8.1",
    "recharts": "^2.15.4",
    "uuid": "^9.0.0"
  },
  "devDependencies": {
    "@playwright/test": "^1.40.1",
    "@tailwindcss/forms": "^0.5.10",
    "@testing-library/jest-dom": "^6.1.5",
    "@testing-library/react": "^14.1.2",
    "@testing-library/user-event": "^14.5.1",
    "@types/node": "^18.15.3",
    "@types/react": "^18.2.43",
    "@types/react-dom": "^18.2.17",
    "@vitejs/plugin-react": "^4.2.1",
    "@vitest/coverage-v8": "^1.1.0",
    "artillery": "^2.0.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^8.55.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.5",
    "jsdom": "^23.0.1",
    "postcss": "^8.5.6",
    "postcss-cli": "^11.0.1",
    "tailwindcss": "^3.4.17",
    "vite": "^5.0.8",
    "vitest": "^1.1.0"
  },
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "lint:fix": "eslint . --ext js,jsx --fix",
    "preview": "vite preview",
    "test": "vitest",
    "test:coverage": "vitest run --coverage",
    "test:run": "vitest run",
    "test:unit": "vitest run --reporter=verbose",
    "test:integration": "vitest run --config vitest.integration.config.js",
    "test:e2e": "playwright test",
    "test:performance": "vitest run --config vitest.performance.config.js",
    "test:security": "vitest run src/tests/security/security-validation.test.js",
    "test:all": "npm run test:unit && npm run test:integration && npm run test:e2e",
    "test:debug": "vitest run --config vitest.debug.config.js",
    "test:watch": "vitest",
    "test:automated": "node -e \"import('./src/utils/automatedTestFramework.js').then(m => m.runAllTests().then(r => console.log('Automated tests completed:', r)))\"",
    "test:react-hooks": "node -e \"import('./src/utils/automatedTestFramework.js').then(m => m.runReactHooksTests().then(r => console.log('React hooks tests completed:', r)))\"",
    "test:portfolio-math": "node -e \"import('./src/utils/automatedTestFramework.js').then(m => m.runUnitTests().then(r => console.log('Portfolio math tests completed:', r)))\"",
    "test:api-integration": "vitest run src/tests/integration/api-endpoints.test.js",
    "test:load": "artillery run src/tests/performance/load-test.yml",
    "test:ci-validation": "vitest run src/tests/ci-cd/ci-validation.test.js",
    "test:deployment": "vitest run src/tests/deployment/build-validation.test.js",
    "test:aws-integration": "vitest run src/tests/aws/infrastructure.test.js",
    "test:ci": "npm run test:ci-validation && npm run test:deployment && npm run test:unit && npm run test:integration && npm run test:performance && npm run test:security && npm run test:e2e",
    "test:headless": "npm run test:automated && npm run test:e2e",
    "setup-dev": "node scripts/setup-dev.js",
    "setup-prod": "node scripts/setup-prod.js",
    "config": "node setup-api-config.js",
    "start": "npm run config && npm run setup-dev && npm run dev",
    "build-prod": "npm run config && npm run setup-prod && npm run build",
    "debug:react": "node -e \"console.log('Running React diagnostics...'); import('./src/utils/reactHooksDebugger.js').then(m => m.runReactHooksDiagnostics())\""
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
