AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Unified Financial Dashboard Webapp Infrastructure
  Creates: API Gateway + Lambda + CORS + CloudFront + S3 + Cognito as single unit
  Eliminates V2 naming, duplicates, and deployment conflicts

Parameters:
  LambdaCodeKey:
    Type: String
    Description: S3 key for the API Lambda zip (e.g. api.zip)
    Default: api.zip

  CertificateArn:
    Type: String
    Default: ''
    Description: ACM certificate ARN (us-east-1) for CloudFront

  EnvironmentName:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name for resource naming

Conditions:
  UseCert:
    Fn::Not:
      - Fn::Equals:
          - !Ref CertificateArn
          - ''

Resources:
  ## 1) S3 Bucket for Frontend Hosting
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'financial-dashboard-frontend-${EnvironmentName}-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3600

  ## 2) CloudFront Origin Access Control
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub 'financial-dashboard-${EnvironmentName}-oac'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  ## 3) S3 Bucket Policy for CloudFront Access
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${FrontendBucket.Arn}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  ## 4) Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub 'financial-dashboard-${EnvironmentName}-user-pool'
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: 'Your verification code is {####}'
        EmailSubject: 'Your verification code'
      UserPoolTags:
        Project: financial-dashboard
        Environment: !Ref EnvironmentName

  ## 5) Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub 'financial-dashboard-${EnvironmentName}-client'
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Sub 'https://${CloudFrontDistribution.DomainName}'
        - 'http://localhost:5173'
        - 'http://localhost:3000'
      LogoutURLs:
        - !Sub 'https://${CloudFrontDistribution.DomainName}'
        - 'http://localhost:5173'
        - 'http://localhost:3000'
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true

  ## 6) Cognito User Pool Domain
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub 'financial-dashboard-${EnvironmentName}-${AWS::AccountId}'

  ## 7) API Lambda Function
  ApiLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'financial-dashboard-api-${EnvironmentName}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !ImportValue StocksCore-LambdaExecutionRoleArn
      Code:
        S3Bucket: !ImportValue StocksCore-CodeBucketName
        S3Key: !Ref LambdaCodeKey
      Timeout: 45
      MemorySize: 512
      VpcConfig:
        SubnetIds:
          - !ImportValue StocksCore-PrivateSubnet1Id
          - !ImportValue StocksCore-PrivateSubnet2Id
        SecurityGroupIds:
          - !ImportValue StocksCore-LambdaSecurityGroupId
      Environment:
        Variables:
          DB_SECRET_ARN: !ImportValue StocksApp-SecretArn
          API_KEY_ENCRYPTION_SECRET_ARN: !ImportValue StocksApp-ApiKeyEncryptionSecretArn
          NODE_ENV: production
          WEBAPP_AWS_REGION: !Ref AWS::Region
          COGNITO_USER_POOL_ID: !Ref UserPool
          COGNITO_CLIENT_ID: !Ref UserPoolClient
          ENVIRONMENT: !Ref EnvironmentName
          FRONTEND_URL: !Sub 'https://${CloudFrontDistribution.DomainName}'

  ## 8) HTTP API Gateway v2 (better for Lambda integration)
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'financial-dashboard-api-${EnvironmentName}'
      ProtocolType: HTTP
      Description: !Sub 'Financial Dashboard API for ${EnvironmentName} environment'
      CorsConfiguration:
        AllowOrigins: 
          - !Sub 'https://${CloudFrontDistribution.DomainName}'
          - 'http://localhost:3000'
          - 'http://localhost:5173'
          - 'http://127.0.0.1:3000'
          - 'http://127.0.0.1:5173'
        AllowMethods: 
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
          - PATCH
        AllowHeaders:
          - Content-Type
          - Authorization
          - X-Amz-Date
          - X-Api-Key
          - X-Amz-Security-Token
          - X-Requested-With
          - X-Amz-User-Agent
        AllowCredentials: true
        MaxAge: 86400

  ## 9) API Integration with Lambda
  ApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}/invocations'
      PayloadFormatVersion: '2.0'
      TimeoutInMillis: 30000

  ## 10) API Routes
  ApiRootRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'GET /'
      Target: !Sub 'integrations/${ApiIntegration}'

  ApiCatchAllRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'ANY /{proxy+}'
      Target: !Sub 'integrations/${ApiIntegration}'

  ## 11) API Stage
  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: !Ref EnvironmentName
      AutoDeploy: true
      DefaultRouteSettings:
        ThrottlingBurstLimit: 100
        ThrottlingRateLimit: 50
      AccessLogSettings:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '$context.requestId $context.status $context.error.message $context.error.messageString'

  ## 12) Lambda Permission for API Gateway
  LambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ApiLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*'

  ## 13) CloudWatch Log Group for API Gateway
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/financial-dashboard-${EnvironmentName}'
      RetentionInDays: 14

  ## 14) CloudWatch Log Group for Lambda
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/financial-dashboard-api-${EnvironmentName}'
      RetentionInDays: 14

  ## 15) CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        PriceClass: PriceClass_100
        HttpVersion: http2
        IPV6Enabled: true
        Comment: !Sub 'Financial Dashboard ${EnvironmentName} distribution'
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref OriginAccessControl
          - Id: ApiOrigin
            DomainName: !Sub '${HttpApi}.execute-api.${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              HTTPPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
              OriginReadTimeout: 30
              OriginKeepaliveTimeout: 5
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # Managed-CORS-S3Origin
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03  # Managed-SecurityHeadersPolicy
          Compress: true
        CacheBehaviors:
          - PathPattern: !Sub '/${EnvironmentName}/*'
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: https-only
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # Managed-CachingDisabled
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac  # Managed-AllViewerExceptHostHeader
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03  # Managed-SecurityHeadersPolicy
            Compress: true
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
        ViewerCertificate:
          Fn::If:
            - UseCert
            - AcmCertificateArn: !Ref CertificateArn
              SslSupportMethod: sni-only
              MinimumProtocolVersion: TLSv1.2_2021
            - CloudFrontDefaultCertificate: true

  ## 16) CloudWatch Alarms for Monitoring
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'financial-dashboard-${EnvironmentName}-lambda-errors'
      AlarmDescription: Lambda function errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ApiLambda
      TreatMissingData: notBreaching

  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'financial-dashboard-${EnvironmentName}-lambda-duration'
      AlarmDescription: Lambda function duration is high
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 30000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ApiLambda
      TreatMissingData: notBreaching

  ApiGatewayErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'financial-dashboard-${EnvironmentName}-api-errors'
      AlarmDescription: API Gateway 4xx/5xx errors
      MetricName: 4XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Ref HttpApi
      TreatMissingData: notBreaching

Outputs:
  ## Frontend Hosting
  FrontendBucketName:
    Description: S3 bucket name for frontend hosting
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub '${AWS::StackName}-FrontendBucketName'

  CloudFrontDistributionId:
    Description: CloudFront distribution ID
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDistributionId'

  WebsiteURL:
    Description: CloudFront URL for the website
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'

  ## API Gateway
  ApiEndpoint:
    Description: API Gateway invoke URL
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  ApiId:
    Description: API Gateway ID
    Value: !Ref HttpApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiId'

  ## Lambda
  LambdaFunctionName:
    Description: Lambda function name
    Value: !Ref ApiLambda
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionName'

  LambdaFunctionArn:
    Description: Lambda function ARN
    Value: !GetAtt ApiLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'

  ## Cognito Authentication
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolId'

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolClientId'

  UserPoolDomain:
    Description: Cognito User Pool Domain
    Value: !Sub 'https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com'
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolDomain'

  ## Environment
  EnvironmentName:
    Description: Environment name
    Value: !Ref EnvironmentName
    Export:
      Name: !Sub '${AWS::StackName}-EnvironmentName'

  StackName:
    Description: Stack name for reference
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub '${AWS::StackName}-StackName'